[{"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js":"1","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js":"2","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js":"3","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js":"4","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js":"5","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js":"6","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js":"7","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js":"8","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js":"9","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js":"10","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js":"11","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js":"12","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js":"13","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js":"14","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js":"15","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js":"16","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js":"17","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js":"18","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js":"19","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js":"20","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js":"21","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js":"22","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js":"23","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js":"24"},{"size":346,"mtime":1607545119820,"results":"25","hashOfConfig":"26"},{"size":2800,"mtime":1607646906900,"results":"27","hashOfConfig":"26"},{"size":127,"mtime":1607048726560,"results":"28","hashOfConfig":"26"},{"size":2976,"mtime":1607538212620,"results":"29","hashOfConfig":"26"},{"size":153,"mtime":1607049405560,"results":"30","hashOfConfig":"26"},{"size":156,"mtime":1607049772990,"results":"31","hashOfConfig":"26"},{"size":3757,"mtime":1607538684270,"results":"32","hashOfConfig":"26"},{"size":159,"mtime":1607049761510,"results":"33","hashOfConfig":"26"},{"size":19218,"mtime":1607445003290,"results":"34","hashOfConfig":"26"},{"size":4001,"mtime":1607452190360,"results":"35","hashOfConfig":"26"},{"size":378,"mtime":1607446887890,"results":"36","hashOfConfig":"26"},{"size":1104,"mtime":1607452351210,"results":"37","hashOfConfig":"26"},{"size":772,"mtime":1607656674410,"results":"38","hashOfConfig":"26"},{"size":1521,"mtime":1607657690370,"results":"39","hashOfConfig":"26"},{"size":3937,"mtime":1607656303610,"results":"40","hashOfConfig":"26"},{"size":594,"mtime":1607642656450,"results":"41","hashOfConfig":"26"},{"size":1523,"mtime":1607642631600,"results":"42","hashOfConfig":"26"},{"size":46,"mtime":1607462916677,"results":"43","hashOfConfig":"26"},{"size":180,"mtime":1607532595660,"results":"44","hashOfConfig":"26"},{"size":182,"mtime":1607532579230,"results":"45","hashOfConfig":"26"},{"size":189,"mtime":1607532617240,"results":"46","hashOfConfig":"26"},{"size":1718,"mtime":1607656782210,"results":"47","hashOfConfig":"26"},{"size":1706,"mtime":1607656881900,"results":"48","hashOfConfig":"26"},{"size":428,"mtime":1607646956930,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"hnf33b",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js",[],["111","112"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js",["113"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./Homepage/Homepage\"\nimport Login from \"./Login/Login\"\nimport Signup from \"./Signup/Signup\"\nimport PodcasterHomepage from \"./Podcasters/Homepage/Homepage\"\nimport TranscriberHomepage from \"./Transcribers/Homepage/Homepage\"\nimport ResearcherHomepage from \"./Researcher/Homepage/Homepage\"\nimport EditorWrapper from \"./Editor/EditorWrapper\"\nimport PodcastDisplayWrapper from \"./Podcasters/PodcastDisplay/PodcastDisplayWrapper\"\nimport { useDispatch } from 'react-redux';\nimport PodcasterNav from \"./NavBar/PodcasterNav/NavBar\"\nimport TranscriberNav from \"./NavBar/TranscriberNav/NavBar\"\nimport DefaultNav from \"./NavBar/DefaultNav/NavBar\"\nimport { SET_USER } from './Store/actions';\nimport MyPodcasts from \"./Podcasters/MyPodcasts/MyPodcasts\"\nimport NewTranscriptForm from \"./Podcasters/NewTranscriptionForm/NewTranscriptForm\"\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    //const token = localStorage.getItem(\"token\")\n    const type = localStorage.getItem(\"type\")\n    if(type){\n      const loginUsingToken = async() =>{\n        const res = await fetch(`/${type.toLowerCase()}/token`)\n        const data = await res.json()\n        if(data.msg){\n          return\n        }\n        const action = {\n          type: SET_USER,\n          payload: {...data, type}\n        }\n        console.log(action)\n        dispatch(action)\n      }\n\n\n      loginUsingToken()\n    }\n  },[])\n  return (\n    <Router>\n      <Switch>\n        <Route exact={false} path=\"/podcaster\">\n          <PodcasterNav />\n        </Route>\n        <Route exact={false} path=\"/transcriber\">\n          <TranscriberNav />\n        </Route>\n        <Route path=\"/\" exact={false}>\n          <DefaultNav />\n        </Route>\n      </Switch>     \n      <Route exact={true} path=\"/\">\n        <Homepage />\n      </Route>\n      <Route exact={true} path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact={true} path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <PodcasterHomepage />\n      </Route>\n      <Route exact={true} path=\"/podcaster/myPodcasts\">\n        <MyPodcasts />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id\">\n        <PodcastDisplayWrapper />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id/newtranscript\">\n        <NewTranscriptForm />\n      </Route>\n      <Route exact={true} path=\"/transcriber\">\n        <TranscriberHomepage />\n      </Route>\n      <Route exact={true} path=\"/researcher\">\n        <ResearcherHomepage />\n      </Route>\n      <Route exact={true} path=\"/editor\">\n        <EditorWrapper />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js",["114","115","116","117","118","119"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, setUser} from \"../Store/actions\"\n\nconst Login = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherLogin, setResearcherLogin] = useState(false)\n    const [transcriberLogin, setTranscriberLogin] = useState(false)\n    const [podcasterLogin, setPodcasterLogin] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherLogin(false)\n        setTranscriberLogin(false)\n        setPodcasterLogin(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterLogin(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberLogin(true)\n        } else{\n            setResearcherLogin(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n\n    const submitDetails = e =>{\n        const userDetails = setUser(option, email, password)\n        userDetails.then(val => dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Login</h1>\n            <label>Login as:</label>\n            <select value={option} onChange={handleChange}>\n                <option value=\"Podcaster\">Podcaster</option>\n                <option value=\"Transcriber\">Transcriber</option>\n                <option value=\"Researcher\">Researcher</option>\n            </select>\n            <div className=\"error\">\n                {error}\n            </div>\n            <div className=\"loginForm\">\n                <label>Email</label>\n                <input type=\"email\" value={email} onChange={handleEmail}></input>\n                <label>Password</label>\n                <input type=\"password\" value={password} onChange={handlePassword}></input>\n            </div>\n            <button className=\"submitButton\" onClick={submitDetails}>Login</button>\n        </div>\n        \n    )\n}\n\nexport default Login","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js",["120","121","122"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, signupUser} from \"../Store/actions\"\n\nconst Signup = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherSignup, setResearcherSignup] = useState(false)\n    const [transcriberSignup, setTranscriberSignup] = useState(false)\n    const [podcasterSignup, setPodcasterSignup] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherSignup(false)\n        setTranscriberSignup(false)\n        setPodcasterSignup(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterSignup(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberSignup(true)\n        } else{\n            setResearcherSignup(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n    const handleFirstName = e => setFirstName(e.target.value)\n    const handleLastName = e => setLastName(e.target.value)\n\n    const submitDetails = e =>{\n        let userDetails\n        if(researcherSignup){\n            userDetails = signupUser(option, email, password)\n        } else {\n            userDetails = signupUser(option, email, password, firstName, lastName)\n        }\n        userDetails.then(val => dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Signup</h1>\n            <label>Login as:</label>\n            <select value={option} onChange={handleChange}>\n                <option value=\"Podcaster\">Podcaster</option>\n                <option value=\"Transcriber\">Transcriber</option>\n                <option value=\"Researcher\">Researcher</option>\n            </select>\n            <div className=\"error\">\n                {error}\n            </div>\n            <div className=\"loginForm\">\n                <label>Email</label>\n                <input type=\"email\" value={email} onChange={handleEmail}></input>\n                <label>Password</label>\n                <input type=\"password\" value={password} onChange={handlePassword}></input>\n                {podcasterSignup || transcriberSignup ? \n                <>\n                <label>First Name</label>\n                <input type=\"text\" value={firstName} onChange={handleFirstName}></input>\n                <label>Last Name</label>\n                <input type=\"text\" value={lastName} onChange={handleLastName}></input>\n                </> : null\n            }\n            </div>\n            <button className=\"submitButton\" onClick={submitDetails}>Login</button>\n        </div>\n        \n    )\n}\n\nexport default Signup","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js",["123","124"],"import React, { useEffect, useState } from \"react\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport Text from \"./Text/Text\"\n\n\nconst parseJsonAndSetStates = (wordArr) =>{\n    let speakerList = [wordArr[0].speaker]\n    let currentSpeaker = wordArr[0].speaker\n    let result = []\n    let collector = []\n    for(let i = 0; i < wordArr.length; i++){\n        if(wordArr[i].speaker !== currentSpeaker){\n            currentSpeaker = wordArr[i].speaker;\n            result.push(collector)\n            collector = []\n            if(!speakerList.includes(wordArr[i].speaker)){\n                speakerList.push(wordArr[i].speaker)\n            }\n        }\n        collector.push(wordArr[i])\n    }\n    result.push(collector)\n    console.log(result)\n    return {speakerNames: speakerList, sections: result}\n}\n\nconst Editor = (props) =>{\n    const [editorMode, setEditorMode] = useState(0)\n    const [stateSections, setStateSections] = useState([])\n    const [wordNodes, setWordNodes] = useState([])\n    const [selectedWordIndex, setSelectedWordIndex] = useState(0)\n\n    //const [speakers, setSpeakers] = useState(speakerNames)\n\n    useEffect(()=>{\n        let data = JSON.parse(props.data)\n        console.log(\"I am setting data again\")\n        data = [...data, ...data, ...data, ...data]\n        const temp = parseJsonAndSetStates(data)\n        let speakerNames = temp.speakerNames\n        let sections = temp.sections\n        //setSpeakers(speakerNames)\n        setStateSections(sections)\n    }, [])\n    \n    useEffect(()=>{\n        console.log(\"Resetting this jabroni\")\n        if(!stateSections){\n            return\n        }\n        let result = []\n        let currentIndex = 0\n        const words = document.querySelectorAll(\".Editor__Word\")\n        words.forEach(el=>{\n            //el.createAttribute(\"totalwordindex\")\n            el.setAttribute(\"totalwordindex\", currentIndex++)\n            result.push(el)\n        })\n        setWordNodes(result)\n\n    }, [stateSections])\n\n\n    //functions to thread\n\n\n    const setSpeakerNames = (oldName, newName) =>{\n        //this needs to alter the larger guy up in wrapper!!\n        //const innerSpeakers = [...speakers];\n        //const i = innerSpeakers.indexOf(oldName)\n        //innerSpeakers[i] = newName\n        //console.log(innerSpeakers)\n        //setSpeakers(innerSpeakers)\n        const newStateSections = []\n        for(let i = 0; i < stateSections.length; i++){\n            if(stateSections[i][0].speaker !== oldName){\n                newStateSections.push(stateSections[i])\n                continue\n            }\n            const collector = []\n            for(let j = 0; j < stateSections[i].length; j++){\n                const word = stateSections[i][j]\n                word.speaker = newName\n                collector.push(word)\n            }\n            newStateSections.push(collector)\n        }\n        setStateSections(newStateSections)\n    }\n\n    const handleWordClick = (e) =>{\n        if(editorMode === 2){\n            return\n        }\n        const newIndex = e.target.getAttribute(\"totalwordindex\")\n        if(selectedWordIndex === newIndex){\n            setEditorMode(2)\n            return\n        }\n        wordNodes[selectedWordIndex].classList.remove(\"Editor__SelectedWord\")\n        setSelectedWordIndex(newIndex)\n        wordNodes[newIndex].classList.add(\"Editor__SelectedWord\")\n    }\n    \n\n    if(!stateSections){\n        console.log(\"Nothing here\")\n        return null\n    }\n    console.log(\"SOMETHING HERE\")\n    return(\n        <div>\n        <h1>Editor</h1>\n        {stateSections.map((words, i) => {\n            return(\n                <div className=\"section\">\n                <SpeakerSection key={i*2} speaker={words[0].speaker} stateUpdater={setSpeakerNames} />\n                <Text setEditorMode={setEditorMode} editorMode={editorMode} handleWordClick={handleWordClick} text={words} specialKey={i} key={i*2+1} />\n                </div>\n            )\n        })}\n        </div>\n    )\n}\n\nexport default Editor","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js",["125"],"import React from \"react\";\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n\n    const changeSpeakerName = (name) =>{\n        stateUpdater(speakerName, name)\n    }\n\n    return(\n        <div className=\"speakerSecontion\">\n            <h3>{speakerName}:</h3>\n        </div>\n    )\n}\n\nexport default SpeakerSection",["126","127"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js",["128"],"import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport PodcastDisplay from \"./PodCastDisplay\"\nimport {getPodcast, clearPodcast} from \"../../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst PodcastDisplayWrapper = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const podcastInfo = useSelector(state=>state.podcastDisplay)\n\n    useEffect(()=>{\n        console.log(\"calling the back\")\n        const asyncFunc = async() => await getPodcast(id)\n        asyncFunc().then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    return(\n        \n        <PodcastDisplay info={podcastInfo} />\n    )\n}\n\nexport default PodcastDisplayWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js",["129"],"import { useDispatch } from \"react-redux\"\n\n\nexport const GET_PODCAST = \"GET_PODCAST\"\nexport const CLEAR_PODCAST = \"CLEAR_PODCAST\"\nexport const SET_USER = \"SET_USER\"\nexport const REMOVE_USER = \"REMOVE_USER\"\nexport const SET_ERROR = \"SET_ERROR\"\nexport const CLEAR_ERROR = \"CLEAR_ERROR\"\nexport const SET_MYPODCASTS = \"SET_MYPODCASTS\"\nexport const CLEAR_MYPODCASTS = \"CLEAR_MYPODCASTS\"\nexport const SET_MEDIAURL = \"SET_MEDIAURL\"\nexport const CLEAR_MEDIAURL = \"CLEAR_MEDIAURL\"\n\n\n\nexport const getPodcast = async (podcastId) =>{\n    const res = await fetch(\"/podcaster/podcasts/\" + podcastId)\n    const data = await res.json()\n    return{type: GET_PODCAST, payload: data}\n    \n}\n\nexport const clearPodcast = () =>{\n    return{\n        type: CLEAR_PODCAST\n    }\n}\n\nexport const setError = (err) =>{\n    return {\n        type: SET_ERROR,\n        payload: err\n    }\n}\n\nexport const clearError = () =>{\n    return{\n        type: CLEAR_ERROR\n    }\n}\n\nexport const setUser = async (type, email, password) =>{\n    const res = await fetch(`/${type.toLowerCase()}/login`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    //localStorage.setItem(\"token\", data.token)\n    document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    console.log(data, data.token)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const signupUser = async (type, email, password, firstName, lastName) =>{\n    const res = await fetch(`/${type.toLowerCase()}/signup`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password, firstName, lastName})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    // localStorage.setItem(\"token\", data.token)\n    document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const removeUser = () =>{\n    return {\n        type: REMOVE_USER,\n        payload: {}\n    }\n}\n\nexport const setMyPodcasts = async ()=>{\n    const res = await fetch(`/podcaster/podcasts/mypodcasts`)\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n\n}\n\nexport const clearMyPodcasts = () =>{\n    return {\n        type: CLEAR_MYPODCASTS\n    }\n}\n\nexport const setNewPodcast = async (rssFeedUrl)=>{\n    const res = await fetch(\"/podcaster/podcasts/new\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({rssFeedUrl})\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n}\n\nexport const setMediaUrl = (mediaurl) =>{\n    return{\n        type: SET_MEDIAURL,\n        payload: mediaurl\n    }\n}\n\nexport const clearMediaUrl = () =>{\n    return{\n        type: CLEAR_MEDIAURL\n    }\n}\n\nexport const createNewTranscriptJob = async (mediaLink, podcastId, speakerNames) =>{\n    const res = await fetch(`/podcaster/podcasts/${podcastId}/newJob`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            mediaUrl: mediaLink,\n            speakerNames\n        })\n    })\n    const data = await res.json();\n    if(!data.msg === \"starting\"){\n        return{\n            type: SET_ERROR,\n            payload: \"There was a problem processing this transcription. Please try again later\"\n        }\n    }\n    // const res2 = await fetch(`/podcaster/podcast/${podcastId}`)\n    // const data2 = res2.json()\n    // return{type: GET_PODCAST, payload: data2}\n    return clearMediaUrl()\n    \n}","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js",["130"],"import {createStore, applyMiddleware, combineReducers, compose} from \"redux\"\n\nimport {podcastDisplayReducer, errorReducer, userReducer, myPodcastsReducer, mediaUrlReducer} from \"./reducers\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer = combineReducers({podcastDisplay: podcastDisplayReducer, user: userReducer, error: errorReducer, myPodcasts: myPodcastsReducer, mediaUrl: mediaUrlReducer})\n\nconst configureStore = initialState =>{\n    return createStore(reducer, initialState, composeEnhancers())\n}\n\nexport const store = configureStore({})\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js",[],["131","132"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js",["133"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport {setMyPodcasts, clearMyPodcasts, setNewPodcast} from \"../../Store/actions\"\n\n\nconst MyPodcasts = (props) =>{\n    const history = useHistory()\n    const myPodcasts = useSelector(state=>state.myPodcasts)\n    const dispatch = useDispatch()\n\n    const [myPodcastsState, setMyPodcastsState] = useState(myPodcasts || [])\n    const [newRSSFeed, setNewRSSFeed] = useState(\"\")\n\n    useEffect(()=>{\n        const pods = setMyPodcasts()\n        pods.then(val=> dispatch(val))\n        return ()=>{\n            dispatch(clearMyPodcasts())\n        }\n    },[])\n\n    useEffect(()=>{\n        setMyPodcastsState(myPodcasts)\n    },[myPodcasts])\n\n    const handleRSSFeedChange = (e) => setNewRSSFeed(e.target.value)\n\n    const addFeed = e =>{\n        setNewRSSFeed(\"\")\n        const prom = setNewPodcast(newRSSFeed)\n        prom.then(val => dispatch(val))\n    }\n\n    const generateLinkFunction = (id) =>{\n        return () =>{\n            history.push(\"/podcaster/podcasts/\" + id)\n        }\n    }\n\n    return(\n        <>\n        <div className=\"myPodcasts\">\n            {myPodcastsState.map((el, i) =>{\n                return(\n                    <div onClick={generateLinkFunction(el.id)} className=\"podcast\" key={i}>\n                        <h3>{el.name}</h3>\n                    </div>\n                )\n            })}\n        </div>\n        <br/>\n        <br/>\n        <label>Add New RSS Feed:</label>\n        <input value={newRSSFeed} onChange={handleRSSFeedChange}></input>\n        <button onClick={addFeed}>Add Feed</button>\n\n\n        </>\n    )\n}\n\nexport default MyPodcasts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js",["134"],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SpeakerBox from \"./SpeakerBox\"\nimport {createNewTranscriptJob} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\";\nimport {clearMediaUrl} from \"../../Store/actions\"\n\nconst NewTranscriptForm = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const mediaUrl = useSelector(state=>state.mediaUrl)\n    const history = useHistory()\n    const [speakerSections, setSpeakerSections] = useState([\"item\"])\n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearMediaUrl())\n        }\n    },[])\n    \n    const addSpeaker = () =>{\n        const temp = [...speakerSections]\n        temp.push(\"item\")\n        setSpeakerSections(temp)\n    }\n\n    const submit = () =>{\n        setLoading(true)\n        const getAllBoxes = document.querySelectorAll(\".speakerInputBox\")\n        const speakers = []\n        getAllBoxes.forEach((el)=>{\n            speakers.push(el.value)\n        })\n        const prom = createNewTranscriptJob(mediaUrl, id, speakers)\n        prom.then(val=> {\n            dispatch(val);\n            history.goBack()\n        })\n    }\n\n\n\n    return(\n        <div className=\"speakerNameForm\">\n            {speakerSections.map((el, i)=>{\n                return(\n                    <SpeakerBox index={i} />\n                )\n            })}\n            <br/>\n            <button onClick={addSpeaker}>Add Speaker</button>\n            {loading ? <button>Pending</button> : <button onClick={submit}>Submit</button>}\n        </div>\n        \n    )\n}\n\nexport default NewTranscriptForm","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":42,"column":5,"nodeType":"141","endLine":42,"endColumn":7,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":14,"column":12,"nodeType":"145","messageId":"146","endLine":14,"endColumn":27},{"ruleId":"143","severity":1,"message":"147","line":15,"column":12,"nodeType":"145","messageId":"146","endLine":15,"endColumn":28},{"ruleId":"143","severity":1,"message":"148","line":16,"column":12,"nodeType":"145","messageId":"146","endLine":16,"endColumn":26},{"ruleId":"143","severity":1,"message":"149","line":20,"column":12,"nodeType":"145","messageId":"146","endLine":20,"endColumn":22},{"ruleId":"139","severity":1,"message":"150","line":31,"column":8,"nodeType":"141","endLine":31,"endColumn":14,"suggestions":"151"},{"ruleId":"139","severity":1,"message":"140","line":41,"column":8,"nodeType":"141","endLine":41,"endColumn":10,"suggestions":"152"},{"ruleId":"143","severity":1,"message":"149","line":22,"column":12,"nodeType":"145","messageId":"146","endLine":22,"endColumn":22},{"ruleId":"139","severity":1,"message":"150","line":33,"column":8,"nodeType":"141","endLine":33,"endColumn":14,"suggestions":"153"},{"ruleId":"139","severity":1,"message":"140","line":43,"column":8,"nodeType":"141","endLine":43,"endColumn":10,"suggestions":"154"},{"ruleId":"143","severity":1,"message":"155","line":40,"column":13,"nodeType":"145","messageId":"146","endLine":40,"endColumn":25},{"ruleId":"139","severity":1,"message":"156","line":44,"column":8,"nodeType":"141","endLine":44,"endColumn":10,"suggestions":"157"},{"ruleId":"143","severity":1,"message":"158","line":7,"column":11,"nodeType":"145","messageId":"146","endLine":7,"endColumn":28},{"ruleId":"135","replacedBy":"159"},{"ruleId":"137","replacedBy":"160"},{"ruleId":"139","severity":1,"message":"161","line":19,"column":8,"nodeType":"141","endLine":19,"endColumn":10,"suggestions":"162"},{"ruleId":"143","severity":1,"message":"163","line":1,"column":10,"nodeType":"145","messageId":"146","endLine":1,"endColumn":21},{"ruleId":"143","severity":1,"message":"164","line":1,"column":22,"nodeType":"145","messageId":"146","endLine":1,"endColumn":37},{"ruleId":"135","replacedBy":"165"},{"ruleId":"137","replacedBy":"166"},{"ruleId":"139","severity":1,"message":"140","line":21,"column":7,"nodeType":"141","endLine":21,"endColumn":9,"suggestions":"167"},{"ruleId":"139","severity":1,"message":"140","line":21,"column":7,"nodeType":"141","endLine":21,"endColumn":9,"suggestions":"168"},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["171"],"no-unused-vars","'researcherLogin' is assigned a value but never used.","Identifier","unusedVar","'transcriberLogin' is assigned a value but never used.","'podcasterLogin' is assigned a value but never used.","'stateError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ifLoggedInThenRedirect'. Either include it or remove the dependency array.",["172"],["173"],["174"],["175"],"'speakerNames' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["176"],"'changeSpeakerName' is assigned a value but never used.",["169"],["170"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["177"],"'useDispatch' is defined but never used.","'applyMiddleware' is defined but never used.",["169"],["170"],["178"],["179"],"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"180","fix":"184"},{"desc":"182","fix":"185"},{"desc":"180","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"180","fix":"191"},{"desc":"180","fix":"192"},"Update the dependencies array to be: [dispatch]",{"range":"193","text":"194"},"Update the dependencies array to be: [ifLoggedInThenRedirect, user]",{"range":"195","text":"196"},{"range":"197","text":"194"},{"range":"198","text":"196"},{"range":"199","text":"194"},"Update the dependencies array to be: [props.data]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch, id]",{"range":"202","text":"203"},{"range":"204","text":"194"},{"range":"205","text":"194"},[1526,1528],"[dispatch]",[1054,1060],"[ifLoggedInThenRedirect, user]",[1222,1224],[1164,1170],[1332,1334],[1502,1504],"[props.data]",[655,657],"[dispatch, id]",[699,701],[715,717]]
[{"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js":"1","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js":"2","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js":"3","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js":"4","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js":"5","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js":"6","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js":"7","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js":"8","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js":"9","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js":"10","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js":"11","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js":"12"},{"size":219,"mtime":1607045402260,"results":"13","hashOfConfig":"14"},{"size":1118,"mtime":1607221528090,"results":"15","hashOfConfig":"14"},{"size":127,"mtime":1607048726560,"results":"16","hashOfConfig":"14"},{"size":117,"mtime":1607048835890,"results":"17","hashOfConfig":"14"},{"size":153,"mtime":1607049405560,"results":"18","hashOfConfig":"14"},{"size":156,"mtime":1607049772990,"results":"19","hashOfConfig":"14"},{"size":121,"mtime":1607049975660,"results":"20","hashOfConfig":"14"},{"size":159,"mtime":1607049761510,"results":"21","hashOfConfig":"14"},{"size":19218,"mtime":1607445003290,"results":"22","hashOfConfig":"14"},{"size":4001,"mtime":1607452190360,"results":"23","hashOfConfig":"14"},{"size":378,"mtime":1607446887890,"results":"24","hashOfConfig":"14"},{"size":1104,"mtime":1607452351210,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"hnf33b",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js",[],["54","55"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js",["56","57"],"import React, { useEffect, useState } from \"react\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport Text from \"./Text/Text\"\n\n\nconst parseJsonAndSetStates = (wordArr) =>{\n    let speakerList = [wordArr[0].speaker]\n    let currentSpeaker = wordArr[0].speaker\n    let result = []\n    let collector = []\n    for(let i = 0; i < wordArr.length; i++){\n        if(wordArr[i].speaker !== currentSpeaker){\n            currentSpeaker = wordArr[i].speaker;\n            result.push(collector)\n            collector = []\n            if(!speakerList.includes(wordArr[i].speaker)){\n                speakerList.push(wordArr[i].speaker)\n            }\n        }\n        collector.push(wordArr[i])\n    }\n    result.push(collector)\n    console.log(result)\n    return {speakerNames: speakerList, sections: result}\n}\n\nconst Editor = (props) =>{\n    const [editorMode, setEditorMode] = useState(0)\n    const [stateSections, setStateSections] = useState([])\n    const [wordNodes, setWordNodes] = useState([])\n    const [selectedWordIndex, setSelectedWordIndex] = useState(0)\n\n    //const [speakers, setSpeakers] = useState(speakerNames)\n\n    useEffect(()=>{\n        let data = JSON.parse(props.data)\n        console.log(\"I am setting data again\")\n        data = [...data, ...data, ...data, ...data]\n        const temp = parseJsonAndSetStates(data)\n        let speakerNames = temp.speakerNames\n        let sections = temp.sections\n        //setSpeakers(speakerNames)\n        setStateSections(sections)\n    }, [])\n    \n    useEffect(()=>{\n        console.log(\"Resetting this jabroni\")\n        if(!stateSections){\n            return\n        }\n        let result = []\n        let currentIndex = 0\n        const words = document.querySelectorAll(\".Editor__Word\")\n        words.forEach(el=>{\n            //el.createAttribute(\"totalwordindex\")\n            el.setAttribute(\"totalwordindex\", currentIndex++)\n            result.push(el)\n        })\n        setWordNodes(result)\n\n    }, [stateSections])\n\n\n    //functions to thread\n\n\n    const setSpeakerNames = (oldName, newName) =>{\n        //this needs to alter the larger guy up in wrapper!!\n        //const innerSpeakers = [...speakers];\n        //const i = innerSpeakers.indexOf(oldName)\n        //innerSpeakers[i] = newName\n        //console.log(innerSpeakers)\n        //setSpeakers(innerSpeakers)\n        const newStateSections = []\n        for(let i = 0; i < stateSections.length; i++){\n            if(stateSections[i][0].speaker !== oldName){\n                newStateSections.push(stateSections[i])\n                continue\n            }\n            const collector = []\n            for(let j = 0; j < stateSections[i].length; j++){\n                const word = stateSections[i][j]\n                word.speaker = newName\n                collector.push(word)\n            }\n            newStateSections.push(collector)\n        }\n        setStateSections(newStateSections)\n    }\n\n    const handleWordClick = (e) =>{\n        if(editorMode === 2){\n            return\n        }\n        const newIndex = e.target.getAttribute(\"totalwordindex\")\n        if(selectedWordIndex === newIndex){\n            setEditorMode(2)\n            return\n        }\n        wordNodes[selectedWordIndex].classList.remove(\"Editor__SelectedWord\")\n        setSelectedWordIndex(newIndex)\n        wordNodes[newIndex].classList.add(\"Editor__SelectedWord\")\n    }\n    \n\n    if(!stateSections){\n        console.log(\"Nothing here\")\n        return null\n    }\n    console.log(\"SOMETHING HERE\")\n    return(\n        <div>\n        <h1>Editor</h1>\n        {stateSections.map((words, i) => {\n            return(\n                <div className=\"section\">\n                <SpeakerSection key={i*2} speaker={words[0].speaker} stateUpdater={setSpeakerNames} />\n                <Text setEditorMode={setEditorMode} editorMode={editorMode} handleWordClick={handleWordClick} text={words} specialKey={i} key={i*2+1} />\n                </div>\n            )\n        })}\n        </div>\n    )\n}\n\nexport default Editor","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js",["58"],"import React from \"react\";\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n\n    const changeSpeakerName = (name) =>{\n        stateUpdater(speakerName, name)\n    }\n\n    return(\n        <div className=\"speakerSecontion\">\n            <h3>{speakerName}:</h3>\n        </div>\n    )\n}\n\nexport default SpeakerSection",["59","60"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":40,"column":13,"nodeType":"67","messageId":"68","endLine":40,"endColumn":25},{"ruleId":"69","severity":1,"message":"70","line":44,"column":8,"nodeType":"71","endLine":44,"endColumn":10,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"73","line":7,"column":11,"nodeType":"67","messageId":"68","endLine":7,"endColumn":28},{"ruleId":"61","replacedBy":"74"},{"ruleId":"63","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'speakerNames' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.","ArrayExpression",["78"],"'changeSpeakerName' is assigned a value but never used.",["76"],["77"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [props.data]",{"range":"81","text":"82"},[1502,1504],"[props.data]"]
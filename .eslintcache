[{"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js":"1","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js":"2","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js":"3","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js":"4","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js":"5","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js":"6","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js":"7","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js":"8","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js":"9","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js":"10","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js":"11","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js":"12","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js":"13","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js":"14","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js":"15","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js":"16","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js":"17","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js":"18","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js":"19","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js":"20","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js":"21","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js":"22","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js":"23","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js":"24","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js":"25","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js":"26","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js":"27","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js":"28","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js":"29","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js":"30","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js":"31","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js":"32","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js":"33","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/AllPodcasts/AllPodcastsWrapper.js":"34","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/PodcastDisplay/PodcastDisplay.js":"35","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/EpisodeDisplay/EpisodeDisplay.js":"36","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/WrapperTranscriptViewer.js":"37","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/TranscriptView.js":"38","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayerWrapper.js":"39","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/Text/Text.js":"40","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/SpeakerSection/SpeakerSection.js":"41","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayer.js":"42","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Volume.js":"43","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Controls.js":"44","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Bar.js":"45","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/useAudioPlayer.js":"46","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Length.js":"47","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/config.js":"48"},{"size":346,"mtime":1607545119820,"results":"49","hashOfConfig":"50"},{"size":3448,"mtime":1608678573480,"results":"51","hashOfConfig":"50"},{"size":405,"mtime":1607921574410,"results":"52","hashOfConfig":"50"},{"size":3884,"mtime":1608681998390,"results":"53","hashOfConfig":"50"},{"size":131,"mtime":1607930655310,"results":"54","hashOfConfig":"50"},{"size":156,"mtime":1607049772990,"results":"55","hashOfConfig":"50"},{"size":4059,"mtime":1608681938860,"results":"56","hashOfConfig":"50"},{"size":282,"mtime":1607722197336,"results":"57","hashOfConfig":"50"},{"size":940,"mtime":1607825063260,"results":"58","hashOfConfig":"50"},{"size":12377,"mtime":1608676936290,"results":"59","hashOfConfig":"50"},{"size":3434,"mtime":1607943408140,"results":"60","hashOfConfig":"50"},{"size":4126,"mtime":1607943767850,"results":"61","hashOfConfig":"50"},{"size":1485,"mtime":1607941833720,"results":"62","hashOfConfig":"50"},{"size":1547,"mtime":1607843465080,"results":"63","hashOfConfig":"50"},{"size":7138,"mtime":1608680082880,"results":"64","hashOfConfig":"50"},{"size":881,"mtime":1607924288200,"results":"65","hashOfConfig":"50"},{"size":3170,"mtime":1607925447600,"results":"66","hashOfConfig":"50"},{"size":46,"mtime":1607462916677,"results":"67","hashOfConfig":"50"},{"size":1203,"mtime":1608680099730,"results":"68","hashOfConfig":"50"},{"size":1206,"mtime":1607918756870,"results":"69","hashOfConfig":"50"},{"size":2343,"mtime":1608679564210,"results":"70","hashOfConfig":"50"},{"size":1971,"mtime":1607930751110,"results":"71","hashOfConfig":"50"},{"size":1821,"mtime":1607961564020,"results":"72","hashOfConfig":"50"},{"size":428,"mtime":1607646956930,"results":"73","hashOfConfig":"50"},{"size":1626,"mtime":1607943015400,"results":"74","hashOfConfig":"50"},{"size":659,"mtime":1607825230980,"results":"75","hashOfConfig":"50"},{"size":876,"mtime":1607825145030,"results":"76","hashOfConfig":"50"},{"size":1370,"mtime":1607827697510,"results":"77","hashOfConfig":"50"},{"size":3674,"mtime":1607827613910,"results":"78","hashOfConfig":"50"},{"size":734,"mtime":1607727232300,"results":"79","hashOfConfig":"50"},{"size":1639,"mtime":1607729598050,"results":"80","hashOfConfig":"50"},{"size":600,"mtime":1607727235330,"results":"81","hashOfConfig":"50"},{"size":1396,"mtime":1607798758910,"results":"82","hashOfConfig":"50"},{"size":1001,"mtime":1607930361190,"results":"83","hashOfConfig":"50"},{"size":1287,"mtime":1607930879480,"results":"84","hashOfConfig":"50"},{"size":3115,"mtime":1607941941590,"results":"85","hashOfConfig":"50"},{"size":968,"mtime":1607944469090,"results":"86","hashOfConfig":"50"},{"size":5349,"mtime":1607962984880,"results":"87","hashOfConfig":"50"},{"size":659,"mtime":1607943821080,"results":"88","hashOfConfig":"50"},{"size":775,"mtime":1607944215470,"results":"89","hashOfConfig":"50"},{"size":494,"mtime":1607944277020,"results":"90","hashOfConfig":"50"},{"size":876,"mtime":1607943821080,"results":"91","hashOfConfig":"50"},{"size":734,"mtime":1607943821090,"results":"92","hashOfConfig":"50"},{"size":1370,"mtime":1607943821080,"results":"93","hashOfConfig":"50"},{"size":1639,"mtime":1607943821080,"results":"94","hashOfConfig":"50"},{"size":3124,"mtime":1607944603570,"results":"95","hashOfConfig":"50"},{"size":600,"mtime":1607943821090,"results":"96","hashOfConfig":"50"},{"size":167,"mtime":1608144291060,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"hnf33b",{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"100"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js",[],["219","220"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js",["221"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./Homepage/Homepage\"\nimport Login from \"./Login/Login\"\nimport Signup from \"./Signup/Signup\"\nimport PodcasterHomepage from \"./Podcasters/Homepage/Homepage\"\nimport TranscriberHomepage from \"./Transcribers/Homepage/Homepage\"\nimport ResearcherHomepage from \"./Researcher/Homepage/Homepage\"\nimport EditorWrapper from \"./Editor/EditorWrapper\"\nimport PodcastDisplayWrapper from \"./Podcasters/PodcastDisplay/PodcastDisplayWrapper\"\nimport { useDispatch } from 'react-redux';\nimport PodcasterNav from \"./NavBar/PodcasterNav/NavBar\"\nimport TranscriberNav from \"./NavBar/TranscriberNav/NavBar\"\nimport DefaultNav from \"./NavBar/DefaultNav/NavBar\"\nimport { SET_USER } from './Store/actions';\nimport MyPodcasts from \"./Podcasters/MyPodcasts/MyPodcasts\"\nimport NewTranscriptForm from \"./Podcasters/NewTranscriptionForm/NewTranscriptForm\"\nimport AllPodcastWrapper from \"./Researcher/AllPodcasts/AllPodcastsWrapper\"\nimport TranscriptViewerWrapper from \"./TranscriptViewer/WrapperTranscriptViewer\"\nimport {baseUrl} from \"./config\"\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    //const token = localStorage.getItem(\"token\")\n    const type = localStorage.getItem(\"type\")\n    if(type){\n      const loginUsingToken = async() =>{\n        const res = await fetch(baseUrl + `/${type.toLowerCase()}/token`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        })\n        const data = await res.json()\n        if(data.msg){\n          return\n        }\n        const action = {\n          type: SET_USER,\n          payload: {...data, type}\n        }\n        dispatch(action)\n      }\n\n\n      loginUsingToken()\n    }\n  },[])\n  return (\n    <>\n    <Router>\n      <Switch>\n        <Route exact={false} path=\"/podcaster\">\n          <PodcasterNav />\n        </Route>\n        <Route exact={false} path=\"/transcriber\">\n          <TranscriberNav />\n        </Route>\n        <Route path=\"/\" exact={false}>\n          <DefaultNav />\n        </Route>\n      </Switch>     \n      <Route exact={true} path=\"/\">\n        <Homepage />\n      </Route>\n      <Route exact={true} path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact={true} path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <PodcasterHomepage />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <MyPodcasts />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id\">\n        <PodcastDisplayWrapper />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id/newtranscript/:title\">\n        <NewTranscriptForm />\n      </Route>\n      <Route exact={true} path=\"/transcriber\">\n        <TranscriberHomepage />\n      </Route>\n      <Route exact={true} path=\"/researcher\">\n        <ResearcherHomepage />\n      </Route>\n      <Route exact={true} path={\"/podcasts\"}>\n        <AllPodcastWrapper />\n      </Route>\n      <Route exact={true} path=\"/transcriber/transcribe/:transcriptId\">\n        <EditorWrapper />\n      </Route>\n      <Route exact={true} path=\"/transcript/:transcriptId\">\n          <TranscriptViewerWrapper />\n      </Route>\n    </Router>\n    <a href=\"https://www.freepik.com/vectors/technology\">Technology vector created by freepik - www.freepik.com</a>\n    </>\n  );\n}\n\nexport default App;\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js",["222","223","224","225","226","227"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js",["228"],"import React from \"react\"\n\nconst PodcasterHomepage = (props) =>{\n    return(\n        null\n    )\n}\n\nexport default PodcasterHomepage","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js",["229","230","231"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js",["232"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Editor from \"./Editor\"\nimport {getEditorData, clearEditorData} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst EditorWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <Editor data={stateEditorData} speakerOptions={editorData.transcript.Speakers} />\n    )\n}\n\n\nexport default EditorWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js",["233","234","235","236","237","238","239"],"import React, { useEffect, useState } from \"react\"\nimport AudioPlayerWrapper from \"./AudioPlayer/AudioPlayerWrapper\"\nimport Text from \"./Text/Text\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {updateAudioIsLoaded} from \"../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport { TextsmsTwoTone } from \"@material-ui/icons\"\nimport {baseUrl} from \"../config\"\n\nconst Editor = (props) =>{\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const {data, speakerOptions} = props\n    const words = data.data\n    console.log(\"In editor!!!!\", words.length)\n    const updateWordArr = useSelector(state=>state.updateWordArr)\n    const updateAudioIsLoadedSLice = useSelector(state=>state.updateAudioIsLoaded)\n\n    const [sections, setSections] = useState([])\n    const [wordIndex, setWordIndex] = useState([])\n    const [allWords, setAllWords] = useState([])\n    const [editorMode, setEditorMode] = useState(0)\n    const [openLocalTextMenu, setOpenLocalTextMenu] = useState(false)\n    const [moveSelected, setMoveSelected] = useState(0)\n    const [submitting, setSubmitting] = useState(false)\n\n    //On mount, set up sections\n    useEffect(()=>{\n        console.log(\"Use effect is running\")\n        const tempSections = []\n        let tempSection = []\n        let currentSpeaker = words[0].speaker\n        for(let i = 0; i < words.length; i++){\n            const word = words[i]\n            if(word.speaker !== currentSpeaker){\n                tempSections.push(tempSection)\n                tempSection = []\n                currentSpeaker = word.speaker\n            }\n            tempSection.push(word)\n            \n\n        }\n        tempSections.push(tempSection)\n        console.log(\"TEMP SECTIONS:\", tempSections)\n        setSections(tempSections)\n    }, [])\n\n\n\n    //updates the word index for near constant lookup times\n    useEffect(()=>{\n        const words = document.querySelectorAll(\".Editor__Word\")\n        const tempWordIndex = []\n        const tempAllWords = []\n        for(let i = 0; i < words.length; i ++){\n            let secondIndex = Math.floor(words[i].getAttribute(\"starttime\"))\n            if(!tempWordIndex[secondIndex]){\n                tempWordIndex[secondIndex] = []\n            }\n            words[i].setAttribute(\"totalwordindex\", i)\n            tempWordIndex[secondIndex].push(words[i])\n            tempAllWords.push(words[i])\n        }\n        setWordIndex(tempWordIndex)\n        setAllWords(tempAllWords)\n\n\n    }, [updateWordArr])\n\n\n    //this function needs to be threaded through so that it can find audio\n    const keepWithTime = (e) =>{\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        //testcomment\n        selected.forEach(el=>el.classList.remove(\"Editor__SelectedWord\"))\n\n        const currentTime = (Math.floor(e.target.currentTime * 100)) / 100\n        let currentIndex = Math.floor(currentTime)\n        let wordsAtSecond = wordIndex[currentIndex]\n        //finds words at the second prior if any\n        let currentWord\n\n        while(!wordsAtSecond && currentIndex >= 0){\n            currentIndex -= 1;\n            wordsAtSecond = wordIndex[currentIndex]\n        }\n        //only true if going negative\n        if(!wordsAtSecond){\n            return\n        }\n\n        for(let i = 0; i < wordsAtSecond.length; i++){\n            currentWord = wordsAtSecond[i]\n            if(currentWord.getAttribute(\"endtime\") > currentTime){\n                break\n            }\n        }\n        currentWord.classList.add(\"Editor__SelectedWord\")\n    }\n\n    //This is to handle reassigning sections inside of a larger chunk\n    useEffect(()=>{\n\n        const handleLocalTextChange = (name, selected) =>{\n            const nodesInSection = selected.baseNode.parentNode.parentNode.childNodes\n            const before = []\n            const toChange = []\n            const after = []\n            let current = before\n            for(let i = 0; i < nodesInSection.length; i++){\n                //protects from the 1 word edge case\n                let justSwitched = false;\n                if((nodesInSection[i] === selected.baseNode.parentNode || nodesInSection[i] === selected.focusNode.parentNode) && \n                current === before){\n                    current = toChange\n                    if(selected.baseNode.parentNode !== selected.focusNode.parentNode){\n                        justSwitched = true\n                    }  \n                }\n                current.push(nodesInSection[i])\n                if((nodesInSection[i] === selected.baseNode.parentNode || nodesInSection[i] === selected.focusNode.parentNode) && \n                current === toChange && !justSwitched){\n                    current = after\n                }\n            }\n            const tempSections = [...sections]\n            const indexToEdit = toChange[0].getAttribute(\"sectionindex\")\n            const sectionToEdit = sections[indexToEdit]\n            for(let i = 0; i < before.length; i++){\n                before[i] = sectionToEdit[i]\n            }\n            for(let i = 0; i < toChange.length; i++){\n                toChange[i] = sectionToEdit[i + before.length]\n                toChange[i].speaker = name\n            }\n            for(let i = 0; i < after.length; i++){\n                after[i] = sectionToEdit[i + before.length + toChange.length]\n            }\n\n            const toAdd = []\n            if(before.length) toAdd.push(before)\n            if(toChange.length) toAdd.push(toChange)\n            if(after.length) toAdd.push(after)\n\n            tempSections.splice(indexToEdit, 1, ...toAdd)\n            document.querySelectorAll(\".localSpeakerContextBox\").forEach((el)=>{\n                document.querySelector(\"body\").removeChild(el)\n            })\n            setSections(tempSections)\n\n        }\n\n        const handleLocalTextChangeFactory = (name, selected) =>{\n            return (e)=>{\n                e.preventDefault()\n                e.stopPropagation()\n                handleLocalTextChange(name, selected)\n            }\n        }\n\n        const closeMenu = () =>{\n            document.querySelectorAll(\".localSpeakerContextBox\").forEach((el)=>{\n                document.querySelector(\"body\").removeChild(el)\n            })\n            document.querySelector(\"html\").removeEventListener(\"mouseup\", closeMenu)\n        }\n\n        const handleMouseUp = (e) =>{\n            const selected = window.getSelection()\n            if(selected.isCollapsed || editorMode === 2){\n                return\n            }\n            e.stopPropagation()\n            const div = document.createElement(\"div\")\n            document.querySelector(\"body\").appendChild(div)\n            div.classList.add(\"localSpeakerContextBox\")\n            div.style.top = e.clientY + \"px\";\n            div.style.left = e.clientX + \"px\";\n            div.backgroundColor = \"grey\"\n\n            for(let i = 0; i < speakerOptions.length; i++){\n                const option = document.createElement(\"div\")\n                option.innerHTML = `This text => ${speakerOptions[i].name}`\n                option.classList.add(\"speakerOption\")\n                div.appendChild(option)\n                option.addEventListener(\"mouseup\", handleLocalTextChangeFactory(speakerOptions[i].name, {baseNode: selected.baseNode, focusNode: selected.focusNode}))\n            }\n\n            document.querySelector(\"html\").addEventListener(\"mouseup\", closeMenu)\n        }\n\n        const editorPage = document.getElementById(\"editorPage\")\n        if(!editorPage){\n            return\n        }\n        editorPage.addEventListener(\"mouseup\", handleMouseUp)\n    })\n\n    useEffect(()=>{\n        if(editorMode === 2){\n            const selected = document.querySelector(\".Editor__SelectedWord\")\n            const r = new Range()\n            r.setStart(selected.childNodes[0], 0)\n            r.setEnd(selected.childNodes[0], selected.innerHTML.length)\n            const selection = window.getSelection()\n            selection.collapse(null)\n            selection.addRange(r)\n        }\n    }, [editorMode, moveSelected])\n\n    useEffect(()=>{\n        const moveSelectorWord = (e) =>{\n            if(editorMode === 0 && !document.getElementById(\"audio\").paused){\n                return\n            }\n            if(e.key === \"ArrowRight\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) + 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            } else if(e.key === \"ArrowLeft\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) - 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            }\n        }\n\n        document.querySelector(\"body\").addEventListener(\"keydown\", moveSelectorWord)\n\n        return () => {\n            document.querySelector(\"body\").removeEventListener(\"keydown\", moveSelectorWord)\n        }\n\n    })\n\n\n\n    const changeSpeaker = (oldName, newName, sections) =>{\n        const result = []\n        for(let i = 0; i < sections.length; i++){\n            if(sections[i][0].speaker !== oldName){\n                result.push(sections[i])\n            } else{\n                const collector = []\n                for(let j = 0; j < sections[i].length; j++){\n                    const word = {...sections[i][j]}\n                    word.speaker = newName\n                    collector.push(word)\n                }\n                result.push(collector)\n            }\n            \n        }\n        setSections(result)\n    }\n\n    const changeSectionSpeaker = (index, newName, sections) =>{\n        const result = [...sections]\n        const toChange = result[index]\n        for(let i = 0; i < toChange.length; i++){\n            toChange[i].speaker = newName\n        }\n        result[index] = toChange\n        setSections(result)\n    }\n\n    if(!sections.length){\n        return <p>Loading</p>\n    }\n\n    const submitTranscript = (e) =>{\n        const completedTranscript = []\n        for(let i = 0; i < allWords.length; i++){\n            const wordNode = allWords[i]\n            const word = {\n                startTime: wordNode.getAttribute(\"starttime\"),\n                endTime: wordNode.getAttribute(\"endTime\"),\n                speaker: wordNode.getAttribute(\"speaker\"),\n                formatted: wordNode.innerHTML.replace(/&nbsp;/g,' ')\n            }\n            completedTranscript.push(word)\n        }\n        console.log(\"FROM SUBMIT!!!!!!!!\", completedTranscript)\n        const submit = async ()=>{\n            const res = await fetch(baseUrl + \"/transcriber/transcription/\" + transcriptId, {\n               method: \"POST\",\n               headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                   \"Content-Type\": \"application/json\"\n               },\n               body: JSON.stringify({data:completedTranscript})\n            })\n            const data = await res.json()\n            if(data.msg === \"Success\"){\n                history.goBack()\n            }\n        }\n        submit()\n        setSubmitting(true)\n       \n    }\n\n    return(\n        <div className=\"editorPage\" id=\"editorPage\">\n            <h2>Editor</h2>\n            <AudioPlayerWrapper editorMode={editorMode} setEditorMode={setEditorMode} keepWithTime={keepWithTime} />\n            {sections.map((el, i) => {\n                return(\n                    <div className=\"section\" key={i}>\n                        <SpeakerSection changeSectionSpeaker={changeSectionSpeaker} speakerList={speakerOptions} number={i} speaker={el[0].speaker} sections={sections} stateUpdater={changeSpeaker} />\n                        <Text text={el} speaker={el[0].speaker} specialKey={i} editorMode={editorMode} />\n                    </div>\n                )\n            })}\n            <br />\n            <br />\n            {submitting ? <button>Please Wait</button> : <button onClick={submitTranscript}>Submit Transcript</button>}\n        </div>\n    )\n\n}\n\nexport default Editor","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js",["240","241","242"],"import React, { useEffect, useState } from \"react\";\nimport ListDividers from \"./ContextBoxSpeaker\"\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n    const number = props.number\n    const sections = props.sections\n    const changeSectionSpeaker = props.changeSectionSpeaker\n\n    const changeSectionNameFunction = (name) =>{\n        changeSectionSpeaker(number, name, sections)\n    } \n\n    const createSectionNameSwitcherFunction = (name, sections)=>{\n        return(e) =>{\n            changeSectionNameFunction(name)\n        }\n    }\n    \n\n    const changeSpeakerName = (name) =>{\n        stateUpdater(speakerName, name, sections)\n    }\n\n    const createNameSwitcherFunction = (name, sections) =>{\n        return (e)=>{\n            changeSpeakerName(name, sections)\n        }\n    }\n\n    //set up the event listeners to open and close menus\n    useEffect(()=>{\n        const handleClick = (e) =>{\n            e.stopPropagation()\n            document.querySelector(\"html\").addEventListener(\"click\", handleClickOut)\n            const div = document.createElement(\"div\")\n            document.querySelector(\"body\").appendChild(div)\n            div.classList.add(\"speakerClickContextBox\")\n            div.style.top = e.clientY + \"px\";\n            div.style.left = e.clientX + \"px\";\n            div.backgroundColor = \"grey\"\n            \n            for(let i = 0; i < props.speakerList.length; i++){\n                const option = document.createElement(\"div\")\n                option.innerHTML = `${speakerName} => ${props.speakerList[i].name}`\n                option.style.display = \"flex\"\n                option.classList.add(\"speakerOption\")\n                div.appendChild(option)\n                option.addEventListener(\"click\", createNameSwitcherFunction(props.speakerList[i].name, sections))\n            }\n            for(let i = 0; i < props.speakerList.length; i++){\n                const option = document.createElement(\"div\")\n                option.innerHTML = `This Section => ${props.speakerList[i].name}`\n                option.style.display = \"flex\"\n                option.classList.add(\"speakerOption\")\n                div.appendChild(option)\n                option.addEventListener(\"click\", createSectionNameSwitcherFunction(props.speakerList[i].name, sections))\n            }\n\n            \n\n            e.target.addEventListener(\"click\", handleClickOut)\n        }\n        const handleClickOut = (e) =>{\n            console.log(\"close menu\")\n            document.querySelector(\"html\").removeEventListener(\"click\", handleClickOut)\n            const sections = document.querySelectorAll(\".speakerSecontion\")\n            sections.forEach(el=>el.removeEventListener(\"click\", handleClickOut))\n            const boxes = document.querySelectorAll(\".speakerClickContextBox\")\n            boxes.forEach(el=> document.querySelector(\"body\").removeChild(el))\n        }\n        document.getElementById(`speakerSection${number}`).addEventListener(\"click\", handleClick)\n\n        const removeEventListeners = () =>{\n            document.getElementById(`speakerSection${number}`).removeEventListener(\"click\", handleClick)\n        }\n        //return removeEventListeners\n    })\n\n    return(\n        <>\n        <div className=\"speakerSecontion\" id={`speakerSection${number}`}>\n            {speakerName + \":\"}\n        </div>\n        </>\n    )\n}\n\nexport default SpeakerSection","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js",["243"],"import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport {updateWordArr} from \"../../Store/actions\"\n\n\nconst Text = (props) =>{\n    const dispatch = useDispatch()\n    const {text, specialKey, speaker} = props\n    const editorMode = props.editorMode === 2\n    \n    \n    const reinsertMetaData = (e) =>{\n        const spans = e.target.childNodes\n        const results = []\n        for(let i = 0; i < spans.length; i++){\n            let inner = spans[i].innerHTML.split(\"\")\n            \n            if((inner.includes(\"<\") && inner.includes(\">\"))){\n                const tempInner = []\n                let insideTheBrackets = false\n                for(let k = 0; k < inner.length; k++){\n                    if(inner[k]=== \"<\"){\n                        insideTheBrackets = true\n                    }\n                    if(!insideTheBrackets){\n                        tempInner.push(inner[k])\n                    }\n                    if(inner[k]=== \">\"){\n                        insideTheBrackets = false\n                    }\n                }\n                inner = tempInner\n                spans[i].innerHTML = tempInner.join(\"\")\n            }\n            \n\n\n            let counter = 0;\n            for(let j = 0; j < inner.length; j++){\n                if(inner[j] === \" \"){\n                    counter++\n                }\n                if(counter === 2){\n                    const editted = {\n                        index: i,\n                        words: inner.join(\"\"),\n                        node: spans[i]\n                    }\n                    results.push(editted)\n                    break\n                }\n            }\n        }\n        for(let i = 0; i < results.length; i++){\n            const edit = results[i]\n            let startTime\n            if(results[i].index === 0){\n                startTime = spans[1].getAttribute(\"starttime\") - 1\n            } else{\n                startTime = spans[edit.index - 1].getAttribute(\"endtime\")\n            }\n            let endTime\n            if(results[i].index === spans.length -1){\n                endTime = spans[spans.length - 2].getAttribute(\"endtime\") + 1\n            } else{\n                endTime = spans[edit.index + 1].getAttribute(\"starttime\")\n            }\n            const wordsArr = edit.words.split(\" \")\n            const timePerWord = (endTime - startTime) / wordsArr.length\n            for(let i = 0; i < wordsArr.length; i++){\n                const node = document.createElement(\"span\")\n                node.innerHTML = wordsArr[i] + \" \"\n                //gets rid of dangling space\n                if(i === wordsArr.length - 1){\n                    node.innerHTML = wordsArr[i]\n                }\n                node.setAttribute(\"starttime\", startTime + (timePerWord * i))\n                node.setAttribute(\"endtime\", startTime + (timePerWord * (i + 1)))\n                node.setAttribute(\"sectionindex\", specialKey)\n                node.setAttribute(\"speaker\", speaker)\n                node.classList.add(\"Editor__Word\")\n                e.target.insertBefore(node, edit.node)\n            }\n            e.target.removeChild(edit.node)\n            \n            \n        }\n\n        dispatch(updateWordArr())\n    }\n\n    //tell the editor to get the word arrs\n    useEffect(()=>{\n        dispatch(updateWordArr())\n    }, [])\n\n    \n\n    return(\n        <>\n        {editorMode ? <div onBlur={reinsertMetaData} className={specialKey} contentEditable={true}>\n                {text.map((el, i) =>{\n                    return <span className=\"Editor__Word\"  speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n                })}\n        </div> : <div>\n            {text.map((el, i) =>{\n                return <span className=\"Editor__Word\" speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n            })}\n    </div>}\n    </> \n    )\n}\n\nexport default Text","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js",["244","245"],"import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n//import PodcastDisplay from \"./PodCastDisplay\"\nimport {getPodcast, clearPodcast} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\nimport {setMediaUrl} from \"../../Store/actions\"\n\n\nconst PodcastDisplayWrapper = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const podcastInfo = useSelector(state=>state.podcastDisplay)\n    const history = useHistory()\n\n    const createToTranscriptLink = (id) =>{\n        return () =>{\n            history.push(\"/transcripts/\" + id)\n        }\n    }\n\n    const createNewTranscriptLink = (mediaurl, title) =>{\n        return () => {\n            dispatch(setMediaUrl(mediaurl))\n            history.push(`/podcaster/podcasts/${id}/newtranscript/${title}`)\n        }\n    }\n\n    useEffect(()=>{\n        const asyncFunc = async() => await getPodcast(id)\n        asyncFunc().then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    if(!podcastInfo || !podcastInfo.length){\n        return <h2>Loading Episodes</h2>\n    }\n\n    return(\n        \n        <EpisodeDisplay episodes={podcastInfo} title={podcastInfo[0].podcastTitle}\n        clickStub={\"/transcript\"} transcribeButton={true} transcibeFunction={createNewTranscriptLink}/>\n    )\n}\n\nexport default PodcastDisplayWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js",[],["246","247"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js",["248"],"import { useDispatch } from \"react-redux\"\nimport {baseUrl} from \"../config\"\n\n\nexport const GET_PODCAST = \"GET_PODCAST\"\nexport const CLEAR_PODCAST = \"CLEAR_PODCAST\"\nexport const SET_USER = \"SET_USER\"\nexport const REMOVE_USER = \"REMOVE_USER\"\nexport const SET_ERROR = \"SET_ERROR\"\nexport const CLEAR_ERROR = \"CLEAR_ERROR\"\nexport const SET_MYPODCASTS = \"SET_MYPODCASTS\"\nexport const CLEAR_MYPODCASTS = \"CLEAR_MYPODCASTS\"\nexport const SET_MEDIAURL = \"SET_MEDIAURL\"\nexport const CLEAR_MEDIAURL = \"CLEAR_MEDIAURL\"\nexport const SET_TRANSCRIPTS = \"SET_TRANSCRIPTS\"\nexport const CLEAR_TRANSCRIPTS = \"CLEAR_TRANSCRIPTS\"\nexport const GET_EDITORDATA = \"GET_EDITORDATA\"\nexport const CLEAR_EDITORDATA = \"CLEAR_EDITORDATA\"\nexport const UPDATE_WORDARR = \"UPDATE_WORDARR\"\nexport const UPDATE_AUDIOISLOADED = \"UPDATE_AUDIOISLOADED\"\nexport const UPDATE_SECTIONS = \"UPDATE_SECTIONS\"\nexport const CLEAR_SECTIONS = \"CLEAR_SECTIONS\"\nexport const SET_PODCASTDISPLAY = \"SET_PODCASTDISPLAY\"\nexport const CLEAR_PODCASTS = \"CLEAR_PODCASTS\"\n\n\n\nexport const getPodcast = async (podcastId) =>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/\" + podcastId, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n    })\n    const data = await res.json()\n    console.log(data)\n    return{type: GET_PODCAST, payload: data}\n    \n}\n\nexport const clearPodcast = () =>{\n    return{\n        type: CLEAR_PODCAST\n    }\n}\n\nexport const setError = (err) =>{\n    return {\n        type: SET_ERROR,\n        payload: err\n    }\n}\n\nexport const clearError = () =>{\n    return{\n        type: CLEAR_ERROR\n    }\n}\n\nexport const setUser = async (type, email, password) =>{\n    console.log(\"Running the new one\", email, password)\n    const res = await fetch(baseUrl + `/${type.toLowerCase()}/login`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          },\n        body: JSON.stringify({email, password})\n    })\n    const data = await res.json()\n    // if(data.msg){\n    //     return setError(data.msg)\n    // }\n    localStorage.setItem(\"token\", data.token)\n    // console.log(data.token, \"THIS IS THE TOKEN ABOUT TO BE SET IN COOOKIES\")\n    // document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const signupUser = async (type, email, password, firstName, lastName) =>{\n    const res = await fetch(baseUrl + `/${type.toLowerCase()}/signup`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password, firstName, lastName})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    localStorage.setItem(\"token\", data.token)\n    //document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const removeUser = () =>{\n    localStorage.setItem(\"token\", \"\")\n    return {\n        type: REMOVE_USER,\n        payload: {}\n    }\n}\n\nexport const setMyPodcasts = async ()=>{\n    const res = await fetch(baseUrl + `/podcaster/podcasts/mypodcasts`,{\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        mode: \"cors\"\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n\n}\n\nexport const clearMyPodcasts = () =>{\n    return {\n        type: CLEAR_MYPODCASTS\n    }\n}\n\nexport const setNewPodcast = async (rssFeedUrl)=>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/new\", {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({rssFeedUrl})\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n}\n\nexport const setMediaUrl = (mediaurl) =>{\n    return{\n        type: SET_MEDIAURL,\n        payload: mediaurl\n    }\n}\n\nexport const clearMediaUrl = () =>{\n    return{\n        type: CLEAR_MEDIAURL\n    }\n}\n\nexport const createNewTranscriptJob = async (mediaLink, podcastId, speakerNames, title) =>{\n    const res = await fetch(baseUrl + `/podcaster/podcasts/${podcastId}/newJob`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            mediaUrl: mediaLink,\n            speakerNames,\n            title\n        })\n    })\n    const data = await res.json();\n    if(!data.msg === \"starting\"){\n        return{\n            type: SET_ERROR,\n            payload: \"There was a problem processing this transcription. Please try again later\"\n        }\n    }\n    // const res2 = await fetch(baseUrl + `/podcaster/podcast/${podcastId}`)\n    // const data2 = res2.json()\n    // return{type: GET_PODCAST, payload: data2}\n    return clearMediaUrl()\n    \n}\n\nexport const getTranscripts = async() =>{\n    const res = await fetch(baseUrl + \"/transcriber/openprojects\", {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearTranscripts = () =>{\n    return{\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const getEditorData = async (id) =>{\n    const res = await fetch(baseUrl + \"/transcriber/transcription/\" + id, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    console.log(\"I AM IN THE ACTION:\", data.data.length)\n    if(data.msg){\n        return{\n            type: SET_ERROR,\n            payload: data.msg\n        }\n    }\n    return {\n        type: GET_EDITORDATA,\n        payload: data}\n}\n\nexport const clearEditorData = () =>{\n    return{\n        type: CLEAR_EDITORDATA,\n    }\n}\n\nexport const updateWordArr = () =>{\n    return{\n        type: UPDATE_WORDARR\n    }\n}\n\nexport const updateAudioIsLoaded = (val) =>{\n    return{\n        type: UPDATE_AUDIOISLOADED,\n        payload: val\n    }\n}\n\nexport const updateSections = (val) =>{\n    return{\n        type: UPDATE_SECTIONS,\n        payload: val\n    }\n}\n\nexport const clearSections = () =>{\n    return{\n        type: CLEAR_SECTIONS\n    }\n}\n\nexport const getALlPodcasts = async (pageNum) =>{\n    console.log(\"RUNNING THIS\")\n    const res = await fetch(baseUrl + \"/researcher/researching/allPodcasts/\" + pageNum, {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    return{\n        type: SET_PODCASTDISPLAY,\n        payload: data\n    }\n}\n\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js",["249"],"import {createStore, applyMiddleware, combineReducers, compose} from \"redux\"\n\nimport {podcastDisplayReducer, errorReducer, userReducer, myPodcastsReducer, mediaUrlReducer, transcriptsReducer, editorReducer, updateWordArrReducer,\n    updateAudioIsLoadedReducer, sectionsReducer} from \"./reducers\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer = combineReducers({podcastDisplay: podcastDisplayReducer, user: userReducer, error: errorReducer, myPodcasts: myPodcastsReducer, mediaUrl: mediaUrlReducer,\n    transcripts: transcriptsReducer, editorData: editorReducer, updateWordArr: updateWordArrReducer, updateAudioIsLoaded: updateAudioIsLoadedReducer,\n    sections: sectionsReducer})\n\nconst configureStore = initialState =>{\n    return createStore(reducer, initialState, composeEnhancers())\n}\n\nexport const store = configureStore({})\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js",[],["250","251"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js",["252","253"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport {setMyPodcasts, clearMyPodcasts, setNewPodcast} from \"../../Store/actions\"\nimport PodcastDisplay from \"../../Displays/PodcastDisplay/PodcastDisplay\"\n\n\nconst MyPodcasts = (props) =>{\n    const history = useHistory()\n    const myPodcasts = useSelector(state=>state.myPodcasts)\n    const dispatch = useDispatch()\n\n    const [myPodcastsState, setMyPodcastsState] = useState(myPodcasts || [])\n    const [newRSSFeed, setNewRSSFeed] = useState(\"\")\n\n    useEffect(()=>{\n        const pods = setMyPodcasts()\n        pods.then(val=> dispatch(val))\n        return ()=>{\n            dispatch(clearMyPodcasts())\n        }\n    },[])\n\n    useEffect(()=>{\n        setMyPodcastsState(myPodcasts)\n    },[myPodcasts])\n\n    const handleRSSFeedChange = (e) => setNewRSSFeed(e.target.value)\n\n    const addFeed = e =>{\n        setNewRSSFeed(\"\")\n        const prom = setNewPodcast(newRSSFeed)\n        prom.then(val => dispatch(val))\n    }\n\n    const generateLinkFunction = (id) =>{\n        return () =>{\n            history.push(\"/podcaster/podcasts/\" + id)\n        }\n    }\n    console.log(myPodcastsState)\n    if(!myPodcastsState.results){\n        return null\n    }\n    if(!myPodcastsState.results.length){\n        <>\n        <h2>Welcome!</h2>\n        <br/>\n        <br/>\n        <label>Add New RSS Feed:</label>\n        <input value={newRSSFeed} onChange={handleRSSFeedChange}></input>\n        <button onClick={addFeed}>Add Feed</button>\n\n\n        </>\n    }\n    return(\n        <>\n        <PodcastDisplay  title={\"My Podcasts\"} clickStub={\"/podcaster/podcasts\"} podcasts={myPodcastsState} />\n        <br/>\n        <br/>\n        <label>Add New RSS Feed:</label>\n        <input value={newRSSFeed} onChange={handleRSSFeedChange}></input>\n        <button onClick={addFeed}>Add Feed</button>\n\n\n        </>\n    )\n}\n\nexport default MyPodcasts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js",["254"],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SpeakerBox from \"./SpeakerBox\"\nimport {createNewTranscriptJob} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\";\nimport {clearMediaUrl} from \"../../Store/actions\"\n\nconst NewTranscriptForm = (props) =>{\n    const {id, title} = useParams()\n    const dispatch = useDispatch()\n    const mediaUrl = useSelector(state=>state.mediaUrl)\n    const history = useHistory()\n    const [speakerSections, setSpeakerSections] = useState([\"item\"])\n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearMediaUrl())\n        }\n    },[])\n    \n    const addSpeaker = () =>{\n        const temp = [...speakerSections]\n        temp.push(\"item\")\n        setSpeakerSections(temp)\n    }\n\n    const submit = () =>{\n        setLoading(true)\n        const getAllBoxes = document.querySelectorAll(\".speakerInputBox\")\n        const speakers = []\n        getAllBoxes.forEach((el)=>{\n            speakers.push(el.value)\n        })\n        console.log(\"!!!!!\", mediaUrl, id, speakers, title, \"!!!!!!\")\n        const prom = createNewTranscriptJob(mediaUrl, id, speakers, title)\n        prom.then(val=> {\n            dispatch(val);\n            history.goBack()\n        })\n    }\n\n\n\n    return(\n        <div className=\"speakerNameForm\">\n            {speakerSections.map((el, i)=>{\n                return(\n                    <SpeakerBox index={i} />\n                )\n            })}\n            <br/>\n            <button key={100} onClick={addSpeaker}>Add Speaker</button>\n            {loading ?  <button key={101}>Pending</button> : <button key={102} onClick={submit}>Submit</button>}\n        </div>\n        \n    )\n}\n\nexport default NewTranscriptForm","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js",["255","256"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {getTranscripts, clearTranscripts} from \"../../../Store/actions\"\nimport EpisodeDisplay from \"../../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst TranscriptDisplay = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getTranscripts()\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearTranscripts())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcriber/transcribe/\" + id)\n        }\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        // return(\n        //     <div className=\"TranscriptPage\">\n        //         {stateTranscripts.map((el, i)=>{\n        //             return(<div className=\"neededTranscript\" key={i} onClick={createClickFunction(el.id)}>\n        //                 <h4>{el.title}</h4>\n        //                 <p>From: {el.podcastName}</p>\n        //             </div>)\n        //         })}\n        //     </div>\n        // )\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcriber/transcribe\"} title={\"Open Jobs\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default TranscriptDisplay","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js",["257","258"],"import {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {updateAudioIsLoaded} from \"../../Store/actions\"\n\nconst useAudioPlayer = (podcast, keepWithTime, editorMode, setEditorMode) =>{\n    const dispatch = useDispatch()\n    //const [length, setLegth] = useState(podcast.length);\n    const [length, setLegth] = useState(0);\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState(0);\n\n    const makeSetAudioVolume = (audio) => (num) =>{\n        audio.volume = num/100\n    }\n\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        //dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(audio.currentTime);\n        }\n\n        const setAudioTime = () => {\n            setCurrentTime(audio.currentTime);\n            //\n        }\n\n        const spaceToPause = (e) =>{\n            if(e.key === \" \" && editorMode === 0){\n                setPlaying(!playing)\n            }\n        }\n\n        const enterToChangeEditorMode = (e) => {\n            if(e.key === \"Enter\"){\n                if(editorMode === 0){\n                    setPlaying(false)\n                    setEditorMode(2)\n                } else{\n                    setPlaying(true)\n                    setEditorMode(0)\n                }\n            }\n        }\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", keepWithTime);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n        document.querySelector(\"body\").addEventListener(\"keypress\", spaceToPause)\n        document.querySelector(\"body\").addEventListener(\"keypress\", enterToChangeEditorMode)\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n            audio.removeEventListener(\"timeupdate\", keepWithTime)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", spaceToPause)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", enterToChangeEditorMode)\n        }\n    });\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(0);\n        }\n        audio.currentTime = 0;\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n        }\n    }, [podcast]);\n\n\n    return{\n        currentTime,\n        length,\n        playing,\n        setPlaying,\n        setClickedTime,\n        makeSetAudioVolume,\n    }\n}\n\nexport default useAudioPlayer;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js",["259"],"import React, { useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\n\nconst Volume = (props) =>{\n    const [value, setValue] = React.useState(50);\n    \n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    useEffect(()=>{\n        props.makeSetAudioVolume(document.getElementById(\"audio\"))(value)\n    },[value])\n    \n    return (\n        <div className=\"AudioPlayer__VolumeDiv\">\n            <VolumeDown />\n            <Slider value={value} onChange={handleChange} aria-labelledby=\"Volume slider\" />\n            <VolumeUp />\n        </div>\n        )\n}\n\nexport default Volume;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js",["260"],"import React from \"react\";\nimport Length from \"./Length\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\n\nconst Bar = (props) =>{\n    const setClickedTime = (e) =>{\n        const bar = document.querySelector(\".AudioPlayer__TimeSlider\").getBoundingClientRect();\n        const percent = ((e.pageX - bar.left) / bar.width);\n        \n        props.setClickedTime(Math.floor(props.length * percent))\n    }\n\n\n    const PrettoSlider = withStyles({\n        root: {\n          color: '#1cb3ff',\n          height: 8,\n        },\n        thumb: {\n          height: 17,\n          width: 17,\n          backgroundColor: '#1cb3ff',\n          border: '2px solid currentColor',\n          marginTop: -4,\n          marginLeft: -12,\n          '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n          },\n        },\n        active: {},\n        valueLabel: {\n          left: 'calc(-50% + 4px)',\n        },\n        track: {\n          height: 8,\n          borderRadius: 4,\n        },\n        rail: {\n          height: 8,\n          borderRadius: 4,\n        },\n      })(Slider);\n    return (\n        <div className=\"AudioPlayer__Section AudioPlayer__LengthAndBar\">\n            <div className=\"AudioPlayer__LengthContainer\">\n                <Length length={props.length} currentTime={props.currentTime} />\n            </div>\n            <div onClick={setClickedTime} className=\"AudioPlayer__BarContainer\">\n                <PrettoSlider className={\"AudioPlayer__TimeSlider\"}  value={(props.currentTime/props.length) *100} />\n            </div>\n    </div>\n    )\n}\n\nexport default Bar;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/AllPodcasts/AllPodcastsWrapper.js",["261"],"import React, {useEffect, useState} from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {getALlPodcasts, clearPodcast} from \"../../Store/actions\"\nimport PodcastDisplay from \"../../Displays/PodcastDisplay/PodcastDisplay\"\n\nconst AllPodcastWrapper = (props) =>{\n    const [toDisplay, setToDisplay] = useState([])\n    const dispatch = useDispatch()\n    const podcastDisplay = useSelector(state=>state.myPodcasts)\n\n    useEffect(()=>{\n        const prom = getALlPodcasts(0)\n        prom.then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    useEffect(()=>{\n        console.log(\"This is new\", podcastDisplay)\n        setToDisplay(podcastDisplay)\n        \n    }, [podcastDisplay])\n\n    if(!toDisplay.results || !toDisplay.results.length){\n        return(\n            <p>Loading</p>\n        )\n    }\n\n    return(\n        <PodcastDisplay clickStub={\"/podcasts\"} podcasts={podcastDisplay} />\n    )\n\n}\n\nexport default AllPodcastWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/PodcastDisplay/PodcastDisplay.js",["262"],"import React from \"react\"\nimport { useHistory } from \"react-router\"\n\n//this expects an array of podcast objects\n//a podcast object is the model from the database\nconst PodcastDisplay = (props) =>{\n    const {podcasts, clickStub, title} = props\n    const {results, totalPages} = podcasts\n    console.log(results, \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n    const history = useHistory()\n\n    const createClickFunction = (id) =>{\n        return () =>{\n            history.push(clickStub + \"/\" + id)\n        }\n    }\n\n    return(\n        <>\n        <div className=\"center\" key={1}>\n        <h2>{title}</h2>\n        </div>\n        <div className=\"center\" key={2}>\n        <div className=\"podcastDisplay\">\n            {results.map((el, i) =>{\n                return(\n                    <div className=\"podcastDisplayAdjuster\" key={i}>\n                        <div onClick={createClickFunction(el.id)} className=\"podcastDisplay__Image\" style={{backgroundImage:`url(${el.photoUrl})`}}>\n                            <div className=\"podcastDisplay__Title\">\n                                {el.name}\n                            </div>\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n        </div>\n        </>\n    )\n}\n\nexport default PodcastDisplay","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/EpisodeDisplay/EpisodeDisplay.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/WrapperTranscriptViewer.js",["263"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport TranscriptViewer from \"./TranscriptView\"\nimport {getEditorData, clearEditorData} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst ViewerWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <TranscriptViewer data={stateEditorData} speakerOptions={editorData.transcript.Speakers} />\n    )\n}\n\n\nexport default ViewerWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/TranscriptView.js",["264","265","266","267","268","269","270","271","272","273","274","275","276"],"import React, { useEffect, useState } from \"react\"\nimport AudioPlayerWrapper from \"./AudioPlayer/AudioPlayerWrapper\"\nimport Text from \"./Text/Text\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {updateAudioIsLoaded} from \"../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport { TextsmsTwoTone } from \"@material-ui/icons\"\n\nconst TranscriptViewer = (props) =>{\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const {data, speakerOptions} = props\n    const words = data.data\n    console.log(\"In editor!!!!\", words.length)\n    const updateWordArr = useSelector(state=>state.updateWordArr)\n    const updateAudioIsLoadedSLice = useSelector(state=>state.updateAudioIsLoaded)\n\n    const [sections, setSections] = useState([])\n    const [wordIndex, setWordIndex] = useState([])\n    const [allWords, setAllWords] = useState([])\n    const [editorMode, setEditorMode] = useState(0)\n    const [openLocalTextMenu, setOpenLocalTextMenu] = useState(false)\n    const [moveSelected, setMoveSelected] = useState(0)\n    const [submitting, setSubmitting] = useState(false)\n\n    //On mount, set up sections\n    useEffect(()=>{\n        const tempSections = []\n        let tempSection = []\n        let currentSpeaker = words[0].speaker\n        for(let i = 0; i < words.length; i++){\n            const word = words[i]\n            if(word.speaker !== currentSpeaker){\n                tempSections.push(tempSection)\n                tempSection = []\n                currentSpeaker = word.speaker\n            }\n            tempSection.push(word)\n            \n\n        }\n        tempSections.push(tempSection)\n        console.log(\"TEMP SECTIONS:\", tempSections)\n        setSections(tempSections)\n    }, [])\n\n\n\n    //updates the word index for near constant lookup times\n    useEffect(()=>{\n        const words = document.querySelectorAll(\".Editor__Word\")\n        const tempWordIndex = []\n        const tempAllWords = []\n        for(let i = 0; i < words.length; i ++){\n            let secondIndex = Math.floor(words[i].getAttribute(\"starttime\"))\n            if(!tempWordIndex[secondIndex]){\n                tempWordIndex[secondIndex] = []\n            }\n            words[i].setAttribute(\"totalwordindex\", i)\n            tempWordIndex[secondIndex].push(words[i])\n            tempAllWords.push(words[i])\n        }\n        setWordIndex(tempWordIndex)\n        setAllWords(tempAllWords)\n\n\n    }, [updateWordArr])\n\n\n    //this function needs to be threaded through so that it can find audio\n    const keepWithTime = (e) =>{\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        //testcomment\n        selected.forEach(el=>el.classList.remove(\"Editor__SelectedWord\"))\n\n        const currentTime = (Math.floor(e.target.currentTime * 100)) / 100\n        let currentIndex = Math.floor(currentTime)\n        let wordsAtSecond = wordIndex[currentIndex]\n        //finds words at the second prior if any\n        let currentWord\n\n        while(!wordsAtSecond && currentIndex >= 0){\n            currentIndex -= 1;\n            wordsAtSecond = wordIndex[currentIndex]\n        }\n        //only true if going negative\n        if(!wordsAtSecond){\n            return\n        }\n\n        for(let i = 0; i < wordsAtSecond.length; i++){\n            currentWord = wordsAtSecond[i]\n            if(currentWord.getAttribute(\"endtime\") > currentTime){\n                break\n            }\n        }\n        currentWord.classList.add(\"Editor__SelectedWord\")\n    }\n\n\n    useEffect(()=>{\n        const moveSelectorWord = (e) =>{\n            if(editorMode === 0 && !document.getElementById(\"audio\").paused){\n                return\n            }\n            if(e.key === \"ArrowRight\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) + 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            } else if(e.key === \"ArrowLeft\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) - 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            }\n        }\n\n        document.querySelector(\"body\").addEventListener(\"keydown\", moveSelectorWord)\n\n        return () => {\n            document.querySelector(\"body\").removeEventListener(\"keydown\", moveSelectorWord)\n        }\n\n    })\n\n\n\n\n    return(\n        <div className=\"editorPage\" id=\"editorPage\">\n            <h2>Transcript Viewer</h2>\n            <AudioPlayerWrapper keepWithTime={keepWithTime} />\n            {sections.map((el, i) => {\n                return(\n                    <div className=\"section\" key={i}>\n                        <SpeakerSection number={i} speaker={el[0].speaker} sections={sections} />\n                        <Text text={el} speaker={el[0].speaker} specialKey={i} />\n                    </div>\n                )\n            })}\n            <br />\n            <br />\n        </div>\n    )\n\n}\n\nexport default TranscriptViewer","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/Text/Text.js",["277","278","279"],"import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport {updateWordArr} from \"../../Store/actions\"\n\n\nconst Text = (props) =>{\n    const dispatch = useDispatch()\n    const {text, specialKey, speaker} = props\n    const editorMode = props.editorMode === 2\n    \n\n    //tell the editor to get the word arrs\n    useEffect(()=>{\n        dispatch(updateWordArr())\n    }, [])\n\n    \n\n    return(\n        <>\n        <div>\n            {text.map((el, i) =>{\n                return <span className=\"Editor__Word\" speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n            })}\n    </div>\n    </> \n    )\n}\n\nexport default Text","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/SpeakerSection/SpeakerSection.js",["280","281","282","283","284"],"import React, { useEffect, useState } from \"react\";\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n    const number = props.number\n    const sections = props.sections\n    const changeSectionSpeaker = props.changeSectionSpeaker\n\n\n    return(\n        <>\n        <div className=\"speakerSecontion\" id={`speakerSection${number}`}>\n            {speakerName + \":\"}\n        </div>\n        </>\n    )\n}\n\nexport default SpeakerSection","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Volume.js",["285"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Controls.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Bar.js",["286"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/useAudioPlayer.js",["287","288"],"import {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {updateAudioIsLoaded} from \"../../Store/actions\"\n\nconst useAudioPlayer = (podcast, keepWithTime, editorMode, setEditorMode) =>{\n    const dispatch = useDispatch()\n    //const [length, setLegth] = useState(podcast.length);\n    const [length, setLegth] = useState(0);\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState(0);\n\n    const makeSetAudioVolume = (audio) => (num) =>{\n        audio.volume = num/100\n    }\n\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        //dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(audio.currentTime);\n        }\n\n        const setAudioTime = () => {\n            setCurrentTime(audio.currentTime);\n            //\n        }\n\n        const spaceToPause = (e) =>{\n            if(e.key === \" \"){\n                setPlaying(!playing)\n            }\n        }\n\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", keepWithTime);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n        document.querySelector(\"body\").addEventListener(\"keypress\", spaceToPause)\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n            audio.removeEventListener(\"timeupdate\", keepWithTime)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", spaceToPause)\n        }\n    });\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(0);\n        }\n        audio.currentTime = 0;\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n        }\n    }, [podcast]);\n\n\n    return{\n        currentTime,\n        length,\n        playing,\n        setPlaying,\n        setClickedTime,\n        makeSetAudioVolume,\n    }\n}\n\nexport default useAudioPlayer;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/config.js",[],{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","severity":1,"message":"294","line":48,"column":5,"nodeType":"295","endLine":48,"endColumn":7,"suggestions":"296"},{"ruleId":"297","severity":1,"message":"298","line":19,"column":12,"nodeType":"299","messageId":"300","endLine":19,"endColumn":27},{"ruleId":"297","severity":1,"message":"301","line":20,"column":12,"nodeType":"299","messageId":"300","endLine":20,"endColumn":28},{"ruleId":"297","severity":1,"message":"302","line":21,"column":12,"nodeType":"299","messageId":"300","endLine":21,"endColumn":26},{"ruleId":"297","severity":1,"message":"303","line":25,"column":12,"nodeType":"299","messageId":"300","endLine":25,"endColumn":22},{"ruleId":"293","severity":1,"message":"304","line":36,"column":8,"nodeType":"295","endLine":36,"endColumn":14,"suggestions":"305"},{"ruleId":"293","severity":1,"message":"294","line":46,"column":8,"nodeType":"295","endLine":46,"endColumn":10,"suggestions":"306"},{"ruleId":"297","severity":1,"message":"307","line":1,"column":8,"nodeType":"299","messageId":"300","endLine":1,"endColumn":13},{"ruleId":"297","severity":1,"message":"303","line":27,"column":12,"nodeType":"299","messageId":"300","endLine":27,"endColumn":22},{"ruleId":"293","severity":1,"message":"304","line":38,"column":8,"nodeType":"295","endLine":38,"endColumn":14,"suggestions":"308"},{"ruleId":"293","severity":1,"message":"294","line":48,"column":8,"nodeType":"295","endLine":48,"endColumn":10,"suggestions":"309"},{"ruleId":"293","severity":1,"message":"310","line":18,"column":7,"nodeType":"295","endLine":18,"endColumn":9,"suggestions":"311"},{"ruleId":"297","severity":1,"message":"312","line":6,"column":9,"nodeType":"299","messageId":"300","endLine":6,"endColumn":28},{"ruleId":"297","severity":1,"message":"313","line":8,"column":10,"nodeType":"299","messageId":"300","endLine":8,"endColumn":24},{"ruleId":"297","severity":1,"message":"314","line":13,"column":11,"nodeType":"299","messageId":"300","endLine":13,"endColumn":19},{"ruleId":"297","severity":1,"message":"315","line":19,"column":11,"nodeType":"299","messageId":"300","endLine":19,"endColumn":35},{"ruleId":"297","severity":1,"message":"316","line":25,"column":12,"nodeType":"299","messageId":"300","endLine":25,"endColumn":29},{"ruleId":"297","severity":1,"message":"317","line":25,"column":31,"nodeType":"299","messageId":"300","endLine":25,"endColumn":51},{"ruleId":"293","severity":1,"message":"318","line":49,"column":8,"nodeType":"295","endLine":49,"endColumn":10,"suggestions":"319"},{"ruleId":"297","severity":1,"message":"320","line":1,"column":28,"nodeType":"299","messageId":"300","endLine":1,"endColumn":36},{"ruleId":"297","severity":1,"message":"321","line":2,"column":8,"nodeType":"299","messageId":"300","endLine":2,"endColumn":20},{"ruleId":"297","severity":1,"message":"322","line":75,"column":15,"nodeType":"299","messageId":"300","endLine":75,"endColumn":35},{"ruleId":"293","severity":1,"message":"294","line":95,"column":8,"nodeType":"295","endLine":95,"endColumn":10,"suggestions":"323"},{"ruleId":"297","severity":1,"message":"324","line":16,"column":11,"nodeType":"299","messageId":"300","endLine":16,"endColumn":33},{"ruleId":"293","severity":1,"message":"325","line":35,"column":8,"nodeType":"295","endLine":35,"endColumn":10,"suggestions":"326"},{"ruleId":"289","replacedBy":"327"},{"ruleId":"291","replacedBy":"328"},{"ruleId":"297","severity":1,"message":"329","line":1,"column":10,"nodeType":"299","messageId":"300","endLine":1,"endColumn":21},{"ruleId":"297","severity":1,"message":"330","line":1,"column":22,"nodeType":"299","messageId":"300","endLine":1,"endColumn":37},{"ruleId":"289","replacedBy":"331"},{"ruleId":"291","replacedBy":"332"},{"ruleId":"293","severity":1,"message":"294","line":22,"column":7,"nodeType":"295","endLine":22,"endColumn":9,"suggestions":"333"},{"ruleId":"297","severity":1,"message":"334","line":36,"column":11,"nodeType":"299","messageId":"300","endLine":36,"endColumn":31},{"ruleId":"293","severity":1,"message":"294","line":21,"column":7,"nodeType":"295","endLine":21,"endColumn":9,"suggestions":"335"},{"ruleId":"293","severity":1,"message":"294","line":20,"column":7,"nodeType":"295","endLine":20,"endColumn":9,"suggestions":"336"},{"ruleId":"297","severity":1,"message":"337","line":26,"column":11,"nodeType":"299","messageId":"300","endLine":26,"endColumn":30},{"ruleId":"293","severity":1,"message":"338","line":18,"column":5,"nodeType":"299","endLine":18,"endColumn":14,"suggestions":"339"},{"ruleId":"293","severity":1,"message":"340","line":112,"column":8,"nodeType":"295","endLine":112,"endColumn":17,"suggestions":"341"},{"ruleId":"293","severity":1,"message":"342","line":14,"column":7,"nodeType":"295","endLine":14,"endColumn":14,"suggestions":"343"},{"ruleId":"297","severity":1,"message":"344","line":3,"column":22,"nodeType":"299","messageId":"300","endLine":3,"endColumn":32},{"ruleId":"293","severity":1,"message":"294","line":17,"column":8,"nodeType":"295","endLine":17,"endColumn":10,"suggestions":"345"},{"ruleId":"297","severity":1,"message":"346","line":8,"column":21,"nodeType":"299","messageId":"300","endLine":8,"endColumn":31},{"ruleId":"293","severity":1,"message":"310","line":18,"column":7,"nodeType":"295","endLine":18,"endColumn":9,"suggestions":"347"},{"ruleId":"297","severity":1,"message":"312","line":6,"column":9,"nodeType":"299","messageId":"300","endLine":6,"endColumn":28},{"ruleId":"297","severity":1,"message":"313","line":8,"column":10,"nodeType":"299","messageId":"300","endLine":8,"endColumn":24},{"ruleId":"297","severity":1,"message":"348","line":11,"column":11,"nodeType":"299","messageId":"300","endLine":11,"endColumn":18},{"ruleId":"297","severity":1,"message":"314","line":12,"column":11,"nodeType":"299","messageId":"300","endLine":12,"endColumn":19},{"ruleId":"297","severity":1,"message":"349","line":13,"column":12,"nodeType":"299","messageId":"300","endLine":13,"endColumn":24},{"ruleId":"297","severity":1,"message":"350","line":14,"column":18,"nodeType":"299","messageId":"300","endLine":14,"endColumn":32},{"ruleId":"297","severity":1,"message":"315","line":18,"column":11,"nodeType":"299","messageId":"300","endLine":18,"endColumn":35},{"ruleId":"297","severity":1,"message":"351","line":23,"column":24,"nodeType":"299","messageId":"300","endLine":23,"endColumn":37},{"ruleId":"297","severity":1,"message":"316","line":24,"column":12,"nodeType":"299","messageId":"300","endLine":24,"endColumn":29},{"ruleId":"297","severity":1,"message":"317","line":24,"column":31,"nodeType":"299","messageId":"300","endLine":24,"endColumn":51},{"ruleId":"297","severity":1,"message":"352","line":26,"column":12,"nodeType":"299","messageId":"300","endLine":26,"endColumn":22},{"ruleId":"297","severity":1,"message":"353","line":26,"column":24,"nodeType":"299","messageId":"300","endLine":26,"endColumn":37},{"ruleId":"293","severity":1,"message":"318","line":47,"column":8,"nodeType":"295","endLine":47,"endColumn":10,"suggestions":"354"},{"ruleId":"297","severity":1,"message":"355","line":8,"column":30,"nodeType":"299","messageId":"300","endLine":8,"endColumn":37},{"ruleId":"297","severity":1,"message":"356","line":9,"column":11,"nodeType":"299","messageId":"300","endLine":9,"endColumn":21},{"ruleId":"293","severity":1,"message":"294","line":15,"column":8,"nodeType":"295","endLine":15,"endColumn":10,"suggestions":"357"},{"ruleId":"297","severity":1,"message":"358","line":1,"column":17,"nodeType":"299","messageId":"300","endLine":1,"endColumn":26},{"ruleId":"297","severity":1,"message":"320","line":1,"column":28,"nodeType":"299","messageId":"300","endLine":1,"endColumn":36},{"ruleId":"297","severity":1,"message":"359","line":5,"column":11,"nodeType":"299","messageId":"300","endLine":5,"endColumn":23},{"ruleId":"297","severity":1,"message":"360","line":7,"column":11,"nodeType":"299","messageId":"300","endLine":7,"endColumn":19},{"ruleId":"297","severity":1,"message":"361","line":8,"column":11,"nodeType":"299","messageId":"300","endLine":8,"endColumn":31},{"ruleId":"293","severity":1,"message":"342","line":14,"column":7,"nodeType":"295","endLine":14,"endColumn":14,"suggestions":"362"},{"ruleId":"297","severity":1,"message":"344","line":3,"column":22,"nodeType":"299","messageId":"300","endLine":3,"endColumn":32},{"ruleId":"293","severity":1,"message":"363","line":18,"column":5,"nodeType":"299","endLine":18,"endColumn":14,"suggestions":"364"},{"ruleId":"293","severity":1,"message":"340","line":99,"column":8,"nodeType":"295","endLine":99,"endColumn":17,"suggestions":"365"},"no-native-reassign",["366"],"no-negated-in-lhs",["367"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["368"],"no-unused-vars","'researcherLogin' is assigned a value but never used.","Identifier","unusedVar","'transcriberLogin' is assigned a value but never used.","'podcasterLogin' is assigned a value but never used.","'stateError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ifLoggedInThenRedirect'. Either include it or remove the dependency array.",["369"],["370"],"'React' is defined but never used.",["371"],["372"],"React Hook useEffect has missing dependencies: 'dispatch' and 'transcriptId'. Either include them or remove the dependency array.",["373"],"'updateAudioIsLoaded' is defined but never used.","'TextsmsTwoTone' is defined but never used.","'dispatch' is assigned a value but never used.","'updateAudioIsLoadedSLice' is assigned a value but never used.","'openLocalTextMenu' is assigned a value but never used.","'setOpenLocalTextMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'words'. Either include it or remove the dependency array.",["374"],"'useState' is defined but never used.","'ListDividers' is defined but never used.","'removeEventListeners' is assigned a value but never used.",["375"],"'createToTranscriptLink' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["376"],["366"],["367"],"'useDispatch' is defined but never used.","'applyMiddleware' is defined but never used.",["366"],["367"],["377"],"'generateLinkFunction' is assigned a value but never used.",["378"],["379"],"'createClickFunction' is assigned a value but never used.","React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode] as a second argument to the useEffect Hook.",["380"],"React Hook useEffect has missing dependencies: 'clickedTime', 'currentTime', 'dispatch', and 'playing'. Either include them or remove the dependency array.",["381"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["382"],"'makeStyles' is defined but never used.",["383"],"'totalPages' is assigned a value but never used.",["384"],"'history' is assigned a value but never used.","'transcriptId' is assigned a value but never used.","'speakerOptions' is assigned a value but never used.","'setEditorMode' is assigned a value but never used.","'submitting' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.",["385"],"'speaker' is assigned a value but never used.","'editorMode' is assigned a value but never used.",["386"],"'useEffect' is defined but never used.","'stateUpdater' is assigned a value but never used.","'sections' is assigned a value but never used.","'changeSectionSpeaker' is assigned a value but never used.",["387"],"React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime] as a second argument to the useEffect Hook.",["388"],["389"],"no-global-assign","no-unsafe-negation",{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"390","fix":"394"},{"desc":"392","fix":"395"},{"desc":"390","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"390","fix":"401"},{"desc":"402","fix":"403"},{"desc":"390","fix":"404"},{"desc":"390","fix":"405"},{"desc":"390","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"390","fix":"413"},{"desc":"397","fix":"414"},{"desc":"399","fix":"415"},{"desc":"390","fix":"416"},{"desc":"411","fix":"417"},{"desc":"418","fix":"419"},{"desc":"409","fix":"420"},"Update the dependencies array to be: [dispatch]",{"range":"421","text":"422"},"Update the dependencies array to be: [ifLoggedInThenRedirect, user]",{"range":"423","text":"424"},{"range":"425","text":"422"},{"range":"426","text":"424"},{"range":"427","text":"422"},"Update the dependencies array to be: [dispatch, transcriptId]",{"range":"428","text":"429"},"Update the dependencies array to be: [words]",{"range":"430","text":"431"},{"range":"432","text":"422"},"Update the dependencies array to be: [dispatch, id]",{"range":"433","text":"434"},{"range":"435","text":"422"},{"range":"436","text":"422"},{"range":"437","text":"422"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode]",{"range":"438","text":"439"},"Update the dependencies array to be: [clickedTime, currentTime, dispatch, playing, podcast]",{"range":"440","text":"441"},"Update the dependencies array to be: [props, value]",{"range":"442","text":"443"},{"range":"444","text":"422"},{"range":"445","text":"429"},{"range":"446","text":"431"},{"range":"447","text":"422"},{"range":"448","text":"443"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime]",{"range":"449","text":"450"},{"range":"451","text":"441"},[1813,1815],"[dispatch]",[1307,1313],"[ifLoggedInThenRedirect, user]",[1475,1477],[1417,1423],[1585,1587],[646,648],"[dispatch, transcriptId]",[1906,1908],"[words]",[3343,3345],[1134,1136],"[dispatch, id]",[773,775],[722,724],[698,700],[2546,2546],", [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode]",[3483,3492],"[clickedTime, currentTime, dispatch, playing, podcast]",[463,470],"[props, value]",[605,607],[664,666],[1837,1839],[397,399],[463,470],[1996,1996],", [keepWithTime, playing, clickedTime, currentTime]",[2933,2942]]
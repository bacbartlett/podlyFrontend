[{"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js":"1","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js":"2","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js":"3","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js":"4","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js":"5","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js":"6","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js":"7","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js":"8","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js":"9","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js":"10","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js":"11","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js":"12","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js":"13","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js":"14","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js":"15","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js":"16","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js":"17","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js":"18","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js":"19","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js":"20","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js":"21","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js":"22","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js":"23","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js":"24","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js":"25","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js":"26","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js":"27","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js":"28","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js":"29","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js":"30","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js":"31","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js":"32","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js":"33","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/AllPodcasts/AllPodcastsWrapper.js":"34","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/PodcastDisplay/PodcastDisplay.js":"35","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/EpisodeDisplay/EpisodeDisplay.js":"36","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/WrapperTranscriptViewer.js":"37","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/TranscriptView.js":"38","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayerWrapper.js":"39","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/Text/Text.js":"40","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/SpeakerSection/SpeakerSection.js":"41","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayer.js":"42","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Volume.js":"43","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Controls.js":"44","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Bar.js":"45","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/useAudioPlayer.js":"46","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Length.js":"47","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/config.js":"48","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PendingTranscripts/PendingTranscripts.js":"49","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/PodcastTranscripts/PodcastTranscripts.js":"50"},{"size":346,"mtime":1607545119820,"results":"51","hashOfConfig":"52"},{"size":3815,"mtime":1608834350290,"results":"53","hashOfConfig":"52"},{"size":405,"mtime":1607921574410,"results":"54","hashOfConfig":"52"},{"size":3846,"mtime":1608836839820,"results":"55","hashOfConfig":"52"},{"size":131,"mtime":1607930655310,"results":"56","hashOfConfig":"52"},{"size":156,"mtime":1607049772990,"results":"57","hashOfConfig":"52"},{"size":4059,"mtime":1608681938860,"results":"58","hashOfConfig":"52"},{"size":282,"mtime":1607722197336,"results":"59","hashOfConfig":"52"},{"size":940,"mtime":1607825063260,"results":"60","hashOfConfig":"52"},{"size":13447,"mtime":1608938308640,"results":"61","hashOfConfig":"52"},{"size":3396,"mtime":1608836843230,"results":"62","hashOfConfig":"52"},{"size":4460,"mtime":1608836107060,"results":"63","hashOfConfig":"52"},{"size":1485,"mtime":1607941833720,"results":"64","hashOfConfig":"52"},{"size":1547,"mtime":1607843465080,"results":"65","hashOfConfig":"52"},{"size":8996,"mtime":1608963293120,"results":"66","hashOfConfig":"52"},{"size":881,"mtime":1607924288200,"results":"67","hashOfConfig":"52"},{"size":3138,"mtime":1608836824630,"results":"68","hashOfConfig":"52"},{"size":46,"mtime":1607462916677,"results":"69","hashOfConfig":"52"},{"size":1203,"mtime":1608680099730,"results":"70","hashOfConfig":"52"},{"size":1206,"mtime":1607918756870,"results":"71","hashOfConfig":"52"},{"size":2343,"mtime":1608679564210,"results":"72","hashOfConfig":"52"},{"size":1938,"mtime":1608836837270,"results":"73","hashOfConfig":"52"},{"size":1751,"mtime":1608836833800,"results":"74","hashOfConfig":"52"},{"size":428,"mtime":1607646956930,"results":"75","hashOfConfig":"52"},{"size":1626,"mtime":1607943015400,"results":"76","hashOfConfig":"52"},{"size":659,"mtime":1607825230980,"results":"77","hashOfConfig":"52"},{"size":876,"mtime":1607825145030,"results":"78","hashOfConfig":"52"},{"size":1370,"mtime":1607827697510,"results":"79","hashOfConfig":"52"},{"size":3801,"mtime":1608837541950,"results":"80","hashOfConfig":"52"},{"size":734,"mtime":1607727232300,"results":"81","hashOfConfig":"52"},{"size":1639,"mtime":1607729598050,"results":"82","hashOfConfig":"52"},{"size":600,"mtime":1607727235330,"results":"83","hashOfConfig":"52"},{"size":1365,"mtime":1608836846030,"results":"84","hashOfConfig":"52"},{"size":1020,"mtime":1608963644010,"results":"85","hashOfConfig":"52"},{"size":1230,"mtime":1608836857070,"results":"86","hashOfConfig":"52"},{"size":3219,"mtime":1609100722305,"results":"87","hashOfConfig":"52"},{"size":968,"mtime":1607944469090,"results":"88","hashOfConfig":"52"},{"size":5256,"mtime":1608837992030,"results":"89","hashOfConfig":"52"},{"size":659,"mtime":1607943821080,"results":"90","hashOfConfig":"52"},{"size":775,"mtime":1607944215470,"results":"91","hashOfConfig":"52"},{"size":494,"mtime":1607944277020,"results":"92","hashOfConfig":"52"},{"size":876,"mtime":1607943821080,"results":"93","hashOfConfig":"52"},{"size":734,"mtime":1607943821090,"results":"94","hashOfConfig":"52"},{"size":1370,"mtime":1607943821080,"results":"95","hashOfConfig":"52"},{"size":1639,"mtime":1607943821080,"results":"96","hashOfConfig":"52"},{"size":3124,"mtime":1607944603570,"results":"97","hashOfConfig":"52"},{"size":600,"mtime":1607943821090,"results":"98","hashOfConfig":"52"},{"size":167,"mtime":1608144291060,"results":"99","hashOfConfig":"52"},{"size":1312,"mtime":1609094767405,"results":"100","hashOfConfig":"52"},{"size":1347,"mtime":1609100818865,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"hnf33b",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"104"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"104"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"104"},"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js",[],["232","233"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js",["234"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./Homepage/Homepage\"\nimport Login from \"./Login/Login\"\nimport Signup from \"./Signup/Signup\"\nimport PodcasterHomepage from \"./Podcasters/Homepage/Homepage\"\nimport TranscriberHomepage from \"./Transcribers/Homepage/Homepage\"\nimport ResearcherHomepage from \"./Researcher/Homepage/Homepage\"\nimport EditorWrapper from \"./Editor/EditorWrapper\"\nimport PodcastDisplayWrapper from \"./Podcasters/PodcastDisplay/PodcastDisplayWrapper\"\nimport { useDispatch } from 'react-redux';\nimport PodcasterNav from \"./NavBar/PodcasterNav/NavBar\"\nimport TranscriberNav from \"./NavBar/TranscriberNav/NavBar\"\nimport DefaultNav from \"./NavBar/DefaultNav/NavBar\"\nimport { SET_USER } from './Store/actions';\nimport MyPodcasts from \"./Podcasters/MyPodcasts/MyPodcasts\"\nimport NewTranscriptForm from \"./Podcasters/NewTranscriptionForm/NewTranscriptForm\"\nimport AllPodcastWrapper from \"./Researcher/AllPodcasts/AllPodcastsWrapper\"\nimport TranscriptViewerWrapper from \"./TranscriptViewer/WrapperTranscriptViewer\"\nimport {baseUrl} from \"./config\"\nimport PendingTranscripts from \"./Podcasters/PendingTranscripts/PendingTranscripts\"\nimport PodcastTranscripts from \"./Researcher/PodcastTranscripts/PodcastTranscripts\"\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    //const token = localStorage.getItem(\"token\")\n    const type = localStorage.getItem(\"type\")\n    if(type){\n      const loginUsingToken = async() =>{\n        const res = await fetch(baseUrl + `/${type.toLowerCase()}/token`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        })\n        const data = await res.json()\n        if(data.msg){\n          return\n        }\n        const action = {\n          type: SET_USER,\n          payload: {...data, type}\n        }\n        dispatch(action)\n      }\n\n\n      loginUsingToken()\n    }\n  },[])\n  return (\n    <>\n    <Router>\n      <Switch>\n        <Route exact={false} path=\"/podcaster\">\n          <PodcasterNav />\n        </Route>\n        <Route exact={false} path=\"/transcriber\">\n          <TranscriberNav />\n        </Route>\n        <Route path=\"/\" exact={false}>\n          <DefaultNav />\n        </Route>\n      </Switch>     \n      <Route exact={true} path=\"/\">\n        <Homepage />\n      </Route>\n      <Route exact={true} path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact={true} path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <PodcasterHomepage />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <MyPodcasts />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id\">\n        <PodcastDisplayWrapper />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id/newtranscript/:title\">\n        <NewTranscriptForm />\n      </Route>\n      <Route exact={true} path=\"/podcaster/pendingjobs\">\n        <PendingTranscripts />\n      </Route>\n      <Route exact={true} path=\"/transcriber\">\n        <TranscriberHomepage />\n      </Route>\n      <Route exact={true} path=\"/researcher\">\n        <ResearcherHomepage />\n      </Route>\n      <Route exact={true} path={\"/podcasts\"}>\n        <AllPodcastWrapper />\n      </Route>\n      <Route exact={true} path=\"/transcriber/transcribe/:transcriptId\">\n        <EditorWrapper />\n      </Route>\n      <Route exact={true} path=\"/transcript/:transcriptId\">\n          <TranscriptViewerWrapper />\n      </Route>\n      <Route exact={true} path={\"/podcasts/:id\"}>\n        <PodcastTranscripts />\n      </Route>\n    </Router>\n    <a href=\"https://www.freepik.com/vectors/technology\">Technology vector created by freepik - www.freepik.com</a>\n    </>\n  );\n}\n\nexport default App;\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js",["235","236","237","238","239","240"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, setUser} from \"../Store/actions\"\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst Login = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherLogin, setResearcherLogin] = useState(false)\n    const [transcriberLogin, setTranscriberLogin] = useState(false)\n    const [podcasterLogin, setPodcasterLogin] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherLogin(false)\n        setTranscriberLogin(false)\n        setPodcasterLogin(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterLogin(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberLogin(true)\n        } else{\n            setResearcherLogin(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n\n    const submitDetails = e =>{\n        const userDetails = setUser(option, email, password)\n        userDetails.then(val => dispatch(val))\n    }\n\n    const demoLogin = () =>{\n        let email\n        let password = \"password\"\n        if (option === \"Podcaster\"){\n            email = \"demoP@user.com\"\n        } else if (option === \"Transcriber\"){\n            email = \"demoT@user.com\"\n        } else if (option === \"Researcher\"){\n            email = \"demoR@user.com\"\n        }\n        const userDetails = setUser(option, email, password)\n        userDetails.then(val=>dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Login</h1>\n        <InputLabel id=\"demo-simple-select-label\">Login Type</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={option}\n          onChange={handleChange}\n        >\n          <MenuItem value={\"Podcaster\"}>Podcaster</MenuItem>\n          <MenuItem value={\"Transcriber\"}>Transcriber</MenuItem>\n          <MenuItem value={\"Researcher\"}>Researcher</MenuItem>\n        </Select>\n            <div className=\"error\">\n                {error}\n            </div>\n                <TextField id=\"email\" type=\"email\" value={email} onChange={handleEmail} label=\"Email\" />\n                <TextField id=\"password\" type=\"password\" value={password} onChange={handlePassword} label=\"Password\" />\n            <Button variant=\"contained\" className=\"submitButton\" onClick={submitDetails}>Login</Button>\n            <Button variant=\"contained\" className=\"demologin\" onClick={demoLogin}>Demo User</Button>\n        </div>\n        \n    )\n}\n\nexport default Login","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js",["241"],"import React from \"react\"\n\nconst PodcasterHomepage = (props) =>{\n    return(\n        null\n    )\n}\n\nexport default PodcasterHomepage","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js",["242","243","244"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, signupUser} from \"../Store/actions\"\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst Signup = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherSignup, setResearcherSignup] = useState(false)\n    const [transcriberSignup, setTranscriberSignup] = useState(false)\n    const [podcasterSignup, setPodcasterSignup] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherSignup(false)\n        setTranscriberSignup(false)\n        setPodcasterSignup(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterSignup(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberSignup(true)\n        } else{\n            setResearcherSignup(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n    const handleFirstName = e => setFirstName(e.target.value)\n    const handleLastName = e => setLastName(e.target.value)\n\n    const submitDetails = e =>{\n        let userDetails\n        if(researcherSignup){\n            userDetails = signupUser(option, email, password)\n        } else {\n            userDetails = signupUser(option, email, password, firstName, lastName)\n        }\n        userDetails.then(val => dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Signup</h1>\n            <InputLabel id=\"demo-simple-select-label\">Login Type</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={option}\n          onChange={handleChange}\n        >\n          <MenuItem value={\"Podcaster\"}>Podcaster</MenuItem>\n          <MenuItem value={\"Transcriber\"}>Transcriber</MenuItem>\n          <MenuItem value={\"Researcher\"}>Researcher</MenuItem>\n        </Select>\n            <div className=\"error\">\n                {error}\n            </div>\n            <TextField id=\"email\" type=\"email\" value={email} onChange={handleEmail} label=\"Email\" />\n            <TextField id=\"password\" type=\"password\" value={password} onChange={handlePassword} label=\"Password\" />\n                {podcasterSignup || transcriberSignup ? \n                <>\n                <TextField id=\"firstName\" type=\"text\" value={firstName} onChange={handleFirstName} label=\"First Name\" />\n                <TextField id=\"lastName\" type=\"text\" value={lastName} onChange={handleLastName} label=\"Last Name\" />\n                </> : null\n            }\n            <Button variant=\"contained\" className=\"submitButton\" onClick={submitDetails}>Signup</Button>\n        </div>\n        \n    )\n}\n\nexport default Signup","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js",["245"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Editor from \"./Editor\"\nimport {getEditorData, clearEditorData} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst EditorWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <Editor data={stateEditorData} speakerOptions={editorData.transcript.Speakers} />\n    )\n}\n\n\nexport default EditorWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js",["246","247","248","249","250","251","252"],"import React, { useEffect, useState } from \"react\"\nimport AudioPlayerWrapper from \"./AudioPlayer/AudioPlayerWrapper\"\nimport Text from \"./Text/Text\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {updateAudioIsLoaded, approveTranscript, rejectTranscript} from \"../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport { TextsmsTwoTone } from \"@material-ui/icons\"\nimport {baseUrl} from \"../config\"\nimport Button from '@material-ui/core/Button';\n\nconst Editor = (props) =>{\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const {data, speakerOptions} = props\n    const words = data.data\n    const updateWordArr = useSelector(state=>state.updateWordArr)\n    const updateAudioIsLoadedSLice = useSelector(state=>state.updateAudioIsLoaded)\n    const typeOfUser = useSelector(state=>state.user.type)\n\n    const [sections, setSections] = useState([])\n    const [wordIndex, setWordIndex] = useState([])\n    const [allWords, setAllWords] = useState([])\n    const [editorMode, setEditorMode] = useState(0)\n    const [openLocalTextMenu, setOpenLocalTextMenu] = useState(false)\n    const [moveSelected, setMoveSelected] = useState(0)\n    const [submitting, setSubmitting] = useState(false)\n\n    //On mount, set up sections\n    useEffect(()=>{\n        const tempSections = []\n        let tempSection = []\n        let currentSpeaker = words[0].speaker\n        for(let i = 0; i < words.length; i++){\n            const word = words[i]\n            if(word.speaker !== currentSpeaker){\n                tempSections.push(tempSection)\n                tempSection = []\n                currentSpeaker = word.speaker\n            }\n            tempSection.push(word)\n            \n\n        }\n        tempSections.push(tempSection)\n        setSections(tempSections)\n    }, [])\n\n\n\n    //updates the word index for near constant lookup times\n    useEffect(()=>{\n        const words = document.querySelectorAll(\".Editor__Word\")\n        const tempWordIndex = []\n        const tempAllWords = []\n        for(let i = 0; i < words.length; i ++){\n            let secondIndex = Math.floor(words[i].getAttribute(\"starttime\") / 10)\n            if(!tempWordIndex[secondIndex]){\n                tempWordIndex[secondIndex] = []\n            }\n            words[i].setAttribute(\"totalwordindex\", i)\n            tempWordIndex[secondIndex].push(words[i])\n            tempAllWords.push(words[i])\n        }\n        setWordIndex(tempWordIndex)\n        setAllWords(tempAllWords)\n\n\n    }, [updateWordArr])\n\n\n    //this function needs to be threaded through so that it can find audio\n    const keepWithTime = (e) =>{\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        selected.forEach(el=>el.classList.remove(\"Editor__SelectedWord\"))\n\n        const currentTime = (Math.floor(e.target.currentTime * 100)) / 100\n        let currentIndex = Math.floor(currentTime / 10)\n        let wordsAtSecond = wordIndex[currentIndex]\n        //finds words at the second prior if any\n        let currentWord\n\n        while(!wordsAtSecond && currentIndex >= 0){\n            currentIndex -= 1;\n            wordsAtSecond = wordIndex[currentIndex]\n        }\n        //only true if going negative\n        if(!wordsAtSecond){\n            return\n        }\n\n        for(let i = 0; i < wordsAtSecond.length; i++){\n            currentWord = wordsAtSecond[i]\n            if(currentWord.getAttribute(\"endtime\") > currentTime){\n                break\n            }\n        }\n        \n        currentWord.classList.add(\"Editor__SelectedWord\")\n    }\n\n    //This is to handle reassigning sections inside of a larger chunk\n    useEffect(()=>{\n\n        const handleLocalTextChange = (name, selected) =>{\n            const nodesInSection = selected.baseNode.parentNode.parentNode.childNodes\n            const before = []\n            const toChange = []\n            const after = []\n            let current = before\n            for(let i = 0; i < nodesInSection.length; i++){\n                //protects from the 1 word edge case\n                let justSwitched = false;\n                if((nodesInSection[i] === selected.baseNode.parentNode || nodesInSection[i] === selected.focusNode.parentNode) && \n                current === before){\n                    current = toChange\n                    if(selected.baseNode.parentNode !== selected.focusNode.parentNode){\n                        justSwitched = true\n                    }  \n                }\n                current.push(nodesInSection[i])\n                if((nodesInSection[i] === selected.baseNode.parentNode || nodesInSection[i] === selected.focusNode.parentNode) && \n                current === toChange && !justSwitched){\n                    current = after\n                }\n            }\n            const tempSections = [...sections]\n            const indexToEdit = toChange[0].getAttribute(\"sectionindex\")\n            const sectionToEdit = sections[indexToEdit]\n            for(let i = 0; i < before.length; i++){\n                before[i] = sectionToEdit[i]\n            }\n            for(let i = 0; i < toChange.length; i++){\n                toChange[i] = sectionToEdit[i + before.length]\n                toChange[i].speaker = name\n            }\n            for(let i = 0; i < after.length; i++){\n                after[i] = sectionToEdit[i + before.length + toChange.length]\n            }\n\n            const toAdd = []\n            if(before.length) toAdd.push(before)\n            if(toChange.length) toAdd.push(toChange)\n            if(after.length) toAdd.push(after)\n\n            tempSections.splice(indexToEdit, 1, ...toAdd)\n            document.querySelectorAll(\".localSpeakerContextBox\").forEach((el)=>{\n                document.querySelector(\"body\").removeChild(el)\n            })\n            setSections(tempSections)\n\n        }\n\n        const handleLocalTextChangeFactory = (name, selected) =>{\n            return (e)=>{\n                e.preventDefault()\n                e.stopPropagation()\n                handleLocalTextChange(name, selected)\n            }\n        }\n\n        const closeMenu = () =>{\n            document.querySelectorAll(\".localSpeakerContextBox\").forEach((el)=>{\n                document.querySelector(\"body\").removeChild(el)\n            })\n            document.querySelector(\"html\").removeEventListener(\"mouseup\", closeMenu)\n        }\n\n        const handleMouseUp = (e) =>{\n            const selected = window.getSelection()\n            if(selected.isCollapsed || editorMode === 2){\n                return\n            }\n            e.stopPropagation()\n            const open = document.querySelectorAll(\".localSpeakerContextBox\")\n            open.forEach(el=>el.remove())\n            const div = document.createElement(\"div\")\n            document.querySelector(\"body\").appendChild(div)\n            div.classList.add(\"localSpeakerContextBox\")\n            div.style.top = e.clientY + \"px\";\n            div.style.left = e.clientX + \"px\";\n            div.backgroundColor = \"grey\"\n\n            for(let i = 0; i < speakerOptions.length; i++){\n                const option = document.createElement(\"div\")\n                option.innerHTML = `This text => ${speakerOptions[i].name}`\n                option.classList.add(\"speakerOption\")\n                div.appendChild(option)\n                option.addEventListener(\"mouseup\", handleLocalTextChangeFactory(speakerOptions[i].name, {baseNode: selected.baseNode, focusNode: selected.focusNode}))\n            }\n\n            document.querySelector(\"html\").addEventListener(\"mouseup\", closeMenu)\n        }\n\n        const editorPage = document.getElementById(\"editorPage\")\n        if(!editorPage){\n            return\n        }\n        editorPage.addEventListener(\"mouseup\", handleMouseUp)\n    })\n\n    useEffect(()=>{\n        if(editorMode === 2){\n            const selected = document.querySelector(\".Editor__SelectedWord\")\n            const r = new Range()\n            r.setStart(selected.childNodes[0], 0)\n            r.setEnd(selected.childNodes[0], selected.innerHTML.length)\n            const selection = window.getSelection()\n            selection.collapse(null)\n            selection.addRange(r)\n        }\n    }, [editorMode, moveSelected])\n\n    useEffect(()=>{\n        const moveSelectorWord = (e) =>{\n            if(editorMode === 0 && !document.getElementById(\"audio\").paused){\n                return\n            }\n            if(e.key === \"ArrowRight\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) + 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            } else if(e.key === \"ArrowLeft\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) - 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            }\n        }\n\n        document.querySelector(\"body\").addEventListener(\"keydown\", moveSelectorWord)\n\n        return () => {\n            document.querySelector(\"body\").removeEventListener(\"keydown\", moveSelectorWord)\n        }\n\n    })\n\n\n\n    const changeSpeaker = (oldName, newName, sections) =>{\n        const result = []\n        for(let i = 0; i < sections.length; i++){\n            if(sections[i][0].speaker !== oldName){\n                result.push(sections[i])\n            } else{\n                const collector = []\n                for(let j = 0; j < sections[i].length; j++){\n                    const word = {...sections[i][j]}\n                    word.speaker = newName\n                    collector.push(word)\n                }\n                result.push(collector)\n            }\n            \n        }\n        setSections(result)\n    }\n\n    const changeSectionSpeaker = (index, newName, sections) =>{\n        const result = [...sections]\n        const toChange = result[index]\n        for(let i = 0; i < toChange.length; i++){\n            toChange[i].speaker = newName\n        }\n        result[index] = toChange\n        setSections(result)\n    }\n\n    if(!sections.length){\n        return <p>Loading</p>\n    }\n\n    const submitTranscript = (e) =>{\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        selected.forEach(el=>{\n            el.classList.remove(\"Editor__SelectedWord\")\n        })\n\n        const completedTranscript = []\n        for(let i = 0; i < allWords.length; i++){\n            const wordNode = allWords[i]\n            const word = {\n                startTime: wordNode.getAttribute(\"starttime\"),\n                endTime: wordNode.getAttribute(\"endTime\"),\n                speaker: wordNode.getAttribute(\"speaker\"),\n                formatted: wordNode.innerHTML.replace(/&nbsp;/g,' ')\n            }\n            completedTranscript.push(word)\n        }\n        const submit = async ()=>{\n            const res = await fetch(baseUrl + \"/transcriber/transcription/\" + transcriptId, {\n               method: \"POST\",\n               headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                   \"Content-Type\": \"application/json\"\n               },\n               body: JSON.stringify({data:completedTranscript})\n            })\n            const data = await res.json()\n            if(data.msg === \"Success\"){\n                history.goBack()\n            }\n        }\n        submit()\n        setSubmitting(true)\n       \n    }\n\n    const approveT = () =>{\n        const prom = approveTranscript(transcriptId)\n        prom.then(val=>{\n            if(val.msg === \"Success\"){\n                history.goBack()\n            } else{\n                alert(\"An error has occured. Please try again later\")\n            }\n        })\n    }\n\n    const rejectT = () =>{\n        const prom = rejectTranscript(transcriptId)\n        prom.then(val=>{\n            if(val.msg === \"Success\"){\n                history.goBack()\n            } else{\n                alert(\"An error has occured. Please try again later\")\n            }\n        })\n    }\n\n    return(\n        <div className=\"editorPage\" id=\"editorPage\">\n            <h2>Editor</h2>\n            <AudioPlayerWrapper editorMode={editorMode} setEditorMode={setEditorMode} keepWithTime={keepWithTime} />\n            {sections.map((el, i) => {\n                return(\n                    <div className=\"section\" key={i}>\n                        <SpeakerSection changeSectionSpeaker={changeSectionSpeaker} speakerList={speakerOptions} number={i} speaker={el[0].speaker} sections={sections} stateUpdater={changeSpeaker} />\n                        <Text text={el} speaker={el[0].speaker} specialKey={i} editorMode={editorMode} />\n                    </div>\n                )\n            })}\n            <br />\n            <br />\n            {typeOfUser === \"Podcaster\" ? <><Button variant={\"contained\"} onClick={approveT}>Approve Transcript</Button> <Button variant={\"contained\"} onClick={rejectT}>Reject Transcript</Button> </>:\n            submitting ? <Button variant={\"contained\"} >Please Wait</Button> : <Button variant={\"contained\"} onClick={submitTranscript}>Submit Transcript</Button>}\n        </div>\n    )\n\n}\n\nexport default Editor","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js",["253","254","255"],"import React, { useEffect, useState } from \"react\";\nimport ListDividers from \"./ContextBoxSpeaker\"\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n    const number = props.number\n    const sections = props.sections\n    const changeSectionSpeaker = props.changeSectionSpeaker\n\n    const changeSectionNameFunction = (name) =>{\n        changeSectionSpeaker(number, name, sections)\n    } \n\n    const createSectionNameSwitcherFunction = (name, sections)=>{\n        return(e) =>{\n            changeSectionNameFunction(name)\n        }\n    }\n    \n\n    const changeSpeakerName = (name) =>{\n        stateUpdater(speakerName, name, sections)\n    }\n\n    const createNameSwitcherFunction = (name, sections) =>{\n        return (e)=>{\n            changeSpeakerName(name, sections)\n        }\n    }\n\n    //set up the event listeners to open and close menus\n    useEffect(()=>{\n        const handleClick = (e) =>{\n            e.stopPropagation()\n            document.querySelector(\"html\").addEventListener(\"click\", handleClickOut)\n            const div = document.createElement(\"div\")\n            document.querySelector(\"body\").appendChild(div)\n            div.classList.add(\"speakerClickContextBox\")\n            div.style.top = e.clientY + \"px\";\n            div.style.left = e.clientX + \"px\";\n            div.backgroundColor = \"grey\"\n            \n            for(let i = 0; i < props.speakerList.length; i++){\n                const option = document.createElement(\"div\")\n                option.innerHTML = `${speakerName} => ${props.speakerList[i].name}`\n                option.style.display = \"flex\"\n                option.classList.add(\"speakerOption\")\n                div.appendChild(option)\n                option.addEventListener(\"click\", createNameSwitcherFunction(props.speakerList[i].name, sections))\n            }\n            for(let i = 0; i < props.speakerList.length; i++){\n                const option = document.createElement(\"div\")\n                option.innerHTML = `This Section => ${props.speakerList[i].name}`\n                option.style.display = \"flex\"\n                option.classList.add(\"speakerOption\")\n                div.appendChild(option)\n                option.addEventListener(\"click\", createSectionNameSwitcherFunction(props.speakerList[i].name, sections))\n            }\n\n            \n\n            e.target.addEventListener(\"click\", handleClickOut)\n        }\n        const handleClickOut = (e) =>{\n            document.querySelector(\"html\").removeEventListener(\"click\", handleClickOut)\n            const sections = document.querySelectorAll(\".speakerSecontion\")\n            sections.forEach(el=>el.removeEventListener(\"click\", handleClickOut))\n            const boxes = document.querySelectorAll(\".speakerClickContextBox\")\n            boxes.forEach(el=> document.querySelector(\"body\").removeChild(el))\n        }\n        document.getElementById(`speakerSection${number}`).addEventListener(\"click\", handleClick)\n\n        const removeEventListeners = () =>{\n            document.getElementById(`speakerSection${number}`).removeEventListener(\"click\", handleClick)\n        }\n        //return removeEventListeners\n    })\n\n    return(\n        <>\n        <div className=\"speakerSecontion\" id={`speakerSection${number}`}>\n            {speakerName + \":\"}\n        </div>\n        </>\n    )\n}\n\nexport default SpeakerSection","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js",["256"],"import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport {updateWordArr} from \"../../Store/actions\"\n\n\nconst Text = (props) =>{\n    const dispatch = useDispatch()\n    const {text, specialKey, speaker} = props\n    const editorMode = props.editorMode === 2\n    \n    \n    const reinsertMetaData = (e) =>{\n\n        const spans = e.target.childNodes\n        const results = []\n\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        selected.forEach(el=>{\n            el.classList.remove(\"Editor__SelectedWord\")\n        })\n\n        \n        for(let i = 0; i < spans.length; i++){\n            let inner = spans[i].innerHTML.split(\"\")\n            \n\n            //This was here to remove the highlighting, but removing the tag should work better\n            // if((inner.includes(\"<\") && inner.includes(\">\"))){\n            //     const tempInner = []\n            //     let insideTheBrackets = false\n            //     for(let k = 0; k < inner.length; k++){\n            //         if(inner[k]=== \"<\"){\n            //             insideTheBrackets = true\n            //         }\n            //         if(!insideTheBrackets){\n            //             tempInner.push(inner[k])\n            //         }\n            //         if(inner[k]=== \">\"){\n            //             insideTheBrackets = false\n            //         }\n            //     }\n            //     inner = tempInner\n            //     spans[i].innerHTML = tempInner.join(\"\")\n            // }\n            \n\n\n            let counter = 0;\n            for(let j = 0; j < inner.length; j++){\n                if(inner[j] === \" \"){\n                    counter++\n                }\n                if(counter === 2){\n                    const editted = {\n                        index: i,\n                        words: inner.join(\"\"),\n                        node: spans[i]\n                    }\n                    results.push(editted)\n                    break\n                }\n            }\n        }\n        for(let i = 0; i < results.length; i++){\n            const edit = results[i]\n            let startTime\n            if(results[i].index === 0){\n                startTime = spans[1].getAttribute(\"starttime\") - 1\n            } else{\n                startTime = spans[edit.index - 1].getAttribute(\"endtime\")\n            }\n            let endTime\n            if(results[i].index === spans.length -1){\n                endTime = spans[spans.length - 2].getAttribute(\"endtime\") + 1\n            } else{\n                endTime = spans[edit.index + 1].getAttribute(\"starttime\")\n            }\n            const wordsArr = edit.words.split(\" \")\n            const timePerWord = (endTime - startTime) / wordsArr.length\n            for(let i = 0; i < wordsArr.length; i++){\n                const node = document.createElement(\"span\")\n                node.innerHTML = wordsArr[i] + \" \"\n                //gets rid of dangling space\n                if(i === wordsArr.length - 1){\n                    node.innerHTML = wordsArr[i]\n                }\n                node.setAttribute(\"starttime\", startTime + (timePerWord * i))\n                node.setAttribute(\"endtime\", startTime + (timePerWord * (i + 1)))\n                node.setAttribute(\"sectionindex\", specialKey)\n                node.setAttribute(\"speaker\", speaker)\n                node.classList.add(\"Editor__Word\")\n                e.target.insertBefore(node, edit.node)\n            }\n            e.target.removeChild(edit.node)\n            \n            \n        }\n\n        dispatch(updateWordArr())\n    }\n\n    //tell the editor to get the word arrs\n    useEffect(()=>{\n        dispatch(updateWordArr())\n    }, [])\n\n    \n\n    return(\n        <>\n        {editorMode ? <div onBlur={reinsertMetaData} className={specialKey} contentEditable={true}>\n                {text.map((el, i) =>{\n                    return <span className=\"Editor__Word\"  speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n                })}\n        </div> : <div>\n            {text.map((el, i) =>{\n                return <span className=\"Editor__Word\" speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n            })}\n    </div>}\n    </> \n    )\n}\n\nexport default Text","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js",["257","258"],"import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n//import PodcastDisplay from \"./PodCastDisplay\"\nimport {getPodcast, clearPodcast} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\nimport {setMediaUrl} from \"../../Store/actions\"\n\n\nconst PodcastDisplayWrapper = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const podcastInfo = useSelector(state=>state.podcastDisplay)\n    const history = useHistory()\n\n    const createToTranscriptLink = (id) =>{\n        return () =>{\n            history.push(\"/transcripts/\" + id)\n        }\n    }\n\n    const createNewTranscriptLink = (mediaurl, title) =>{\n        return () => {\n            dispatch(setMediaUrl(mediaurl))\n            history.push(`/podcaster/podcasts/${id}/newtranscript/${title}`)\n        }\n    }\n\n    useEffect(()=>{\n        const asyncFunc = async() => await getPodcast(id)\n        asyncFunc().then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    if(!podcastInfo || !podcastInfo.length){\n        return <h2>Loading Episodes</h2>\n    }\n\n    return(\n        \n        <EpisodeDisplay episodes={podcastInfo} title={podcastInfo[0].podcastTitle}\n        clickStub={\"/transcript\"} transcribeButton={true} transcibeFunction={createNewTranscriptLink}/>\n    )\n}\n\nexport default PodcastDisplayWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js",[],["259","260"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js",["261","262","263","264","265","266"],"import { useDispatch } from \"react-redux\"\nimport {baseUrl} from \"../config\"\n\n\nexport const GET_PODCAST = \"GET_PODCAST\"\nexport const CLEAR_PODCAST = \"CLEAR_PODCAST\"\nexport const SET_USER = \"SET_USER\"\nexport const REMOVE_USER = \"REMOVE_USER\"\nexport const SET_ERROR = \"SET_ERROR\"\nexport const CLEAR_ERROR = \"CLEAR_ERROR\"\nexport const SET_MYPODCASTS = \"SET_MYPODCASTS\"\nexport const CLEAR_MYPODCASTS = \"CLEAR_MYPODCASTS\"\nexport const SET_MEDIAURL = \"SET_MEDIAURL\"\nexport const CLEAR_MEDIAURL = \"CLEAR_MEDIAURL\"\nexport const SET_TRANSCRIPTS = \"SET_TRANSCRIPTS\"\nexport const CLEAR_TRANSCRIPTS = \"CLEAR_TRANSCRIPTS\"\nexport const GET_EDITORDATA = \"GET_EDITORDATA\"\nexport const CLEAR_EDITORDATA = \"CLEAR_EDITORDATA\"\nexport const UPDATE_WORDARR = \"UPDATE_WORDARR\"\nexport const UPDATE_AUDIOISLOADED = \"UPDATE_AUDIOISLOADED\"\nexport const UPDATE_SECTIONS = \"UPDATE_SECTIONS\"\nexport const CLEAR_SECTIONS = \"CLEAR_SECTIONS\"\nexport const SET_PODCASTDISPLAY = \"SET_PODCASTDISPLAY\"\nexport const CLEAR_PODCASTS = \"CLEAR_PODCASTS\"\n\nexport const getPodcast = async (podcastId) =>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/\" + podcastId, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n    })\n    const data = await res.json()\n    return{type: GET_PODCAST, payload: data}\n    \n}\n\nexport const clearPodcast = () =>{\n    return{\n        type: CLEAR_PODCAST\n    }\n}\n\nexport const setError = (err) =>{\n    return {\n        type: SET_ERROR,\n        payload: err\n    }\n}\n\nexport const clearError = () =>{\n    return{\n        type: CLEAR_ERROR\n    }\n}\n\nexport const setUser = async (type, email, password) =>{\n    const res = await fetch(baseUrl + `/${type.toLowerCase()}/login`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          },\n        body: JSON.stringify({email, password})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    localStorage.setItem(\"token\", data.token)\n    // document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const signupUser = async (type, email, password, firstName, lastName) =>{\n    const res = await fetch(baseUrl + `/${type.toLowerCase()}/signup`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password, firstName, lastName})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    localStorage.setItem(\"token\", data.token)\n    //document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const removeUser = () =>{\n    localStorage.setItem(\"token\", \"\")\n    return {\n        type: REMOVE_USER,\n        payload: {}\n    }\n}\n\nexport const setMyPodcasts = async ()=>{\n    const res = await fetch(baseUrl + `/podcaster/podcasts/mypodcasts`,{\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        mode: \"cors\"\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n\n}\n\nexport const clearMyPodcasts = () =>{\n    return {\n        type: CLEAR_MYPODCASTS\n    }\n}\n\nexport const setNewPodcast = async (rssFeedUrl)=>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/new\", {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({rssFeedUrl})\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n}\n\nexport const setMediaUrl = (mediaurl) =>{\n    return{\n        type: SET_MEDIAURL,\n        payload: mediaurl\n    }\n}\n\nexport const clearMediaUrl = () =>{\n    return{\n        type: CLEAR_MEDIAURL\n    }\n}\n\nexport const createNewTranscriptJob = async (mediaLink, podcastId, speakerNames, title) =>{\n    const res = await fetch(baseUrl + `/podcaster/podcasts/${podcastId}/newJob`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            mediaUrl: mediaLink,\n            speakerNames,\n            title\n        })\n    })\n    const data = await res.json();\n    if(!data.msg === \"starting\"){\n        return{\n            type: SET_ERROR,\n            payload: \"There was a problem processing this transcription. Please try again later\"\n        }\n    }\n    // const res2 = await fetch(baseUrl + `/podcaster/podcast/${podcastId}`)\n    // const data2 = res2.json()\n    // return{type: GET_PODCAST, payload: data2}\n    return clearMediaUrl()\n    \n}\n\nexport const getTranscripts = async() =>{\n    const res = await fetch(baseUrl + \"/transcriber/openprojects\", {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearTranscripts = () =>{\n    return{\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const getEditorData = async (id) =>{\n    const res = await fetch(baseUrl + \"/transcriber/transcription/\" + id, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if(data.msg){\n        return{\n            type: SET_ERROR,\n            payload: data.msg\n        }\n    }\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: GET_EDITORDATA,\n        payload: data}\n}\n\nexport const clearEditorData = () =>{\n    return{\n        type: CLEAR_EDITORDATA,\n    }\n}\n\nexport const updateWordArr = () =>{\n    return{\n        type: UPDATE_WORDARR\n    }\n}\n\nexport const updateAudioIsLoaded = (val) =>{\n    return{\n        type: UPDATE_AUDIOISLOADED,\n        payload: val\n    }\n}\n\nexport const updateSections = (val) =>{\n    return{\n        type: UPDATE_SECTIONS,\n        payload: val\n    }\n}\n\nexport const clearSections = () =>{\n    return{\n        type: CLEAR_SECTIONS\n    }\n}\n\nexport const getALlPodcasts = async (pageNum) =>{\n    const res = await fetch(baseUrl + \"/researcher/researching/allPodcasts/\" + pageNum, {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return{\n        type: SET_PODCASTDISPLAY,\n        payload: data\n    }\n}\n\nexport const getPendingTranscripts = async () =>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/pendingJobs\", {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearPendingTranscripts = () =>{\n    return {\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const approveTranscript = async (id) =>{\n    const res = await fetch(baseUrl + \"/podcaster/approveReject/\" + id, {\n        method: \"POST\",\n        headers:{\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({msg: \"Approve\"})\n    })\n    const data = await res.json()\n    return data\n}\n\nexport const rejectTranscript = async (id) =>{\n    const res = await fetch(baseUrl + \"/podcaster/approveReject/\" + id, {\n        method: \"POST\",\n        headers:{\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({msg: \"Reject\"})\n    })\n    const data = await res.json()\n    return data\n}\n\nexport const getTranscriptsForPodcast = async (id) =>{\n    const res = await fetch(baseUrl + \"/researcher/researching/allEpisodes/\" + id, {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearTranscriptsForPodcast = () =>{\n    return {\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js",["267"],"import {createStore, applyMiddleware, combineReducers, compose} from \"redux\"\n\nimport {podcastDisplayReducer, errorReducer, userReducer, myPodcastsReducer, mediaUrlReducer, transcriptsReducer, editorReducer, updateWordArrReducer,\n    updateAudioIsLoadedReducer, sectionsReducer} from \"./reducers\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer = combineReducers({podcastDisplay: podcastDisplayReducer, user: userReducer, error: errorReducer, myPodcasts: myPodcastsReducer, mediaUrl: mediaUrlReducer,\n    transcripts: transcriptsReducer, editorData: editorReducer, updateWordArr: updateWordArrReducer, updateAudioIsLoaded: updateAudioIsLoadedReducer,\n    sections: sectionsReducer})\n\nconst configureStore = initialState =>{\n    return createStore(reducer, initialState, composeEnhancers())\n}\n\nexport const store = configureStore({})\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js",[],["268","269"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js",["270","271"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport {setMyPodcasts, clearMyPodcasts, setNewPodcast} from \"../../Store/actions\"\nimport PodcastDisplay from \"../../Displays/PodcastDisplay/PodcastDisplay\"\n\n\nconst MyPodcasts = (props) =>{\n    const history = useHistory()\n    const myPodcasts = useSelector(state=>state.myPodcasts)\n    const dispatch = useDispatch()\n\n    const [myPodcastsState, setMyPodcastsState] = useState(myPodcasts || [])\n    const [newRSSFeed, setNewRSSFeed] = useState(\"\")\n\n    useEffect(()=>{\n        const pods = setMyPodcasts()\n        pods.then(val=> dispatch(val))\n        return ()=>{\n            dispatch(clearMyPodcasts())\n        }\n    },[])\n\n    useEffect(()=>{\n        setMyPodcastsState(myPodcasts)\n    },[myPodcasts])\n\n    const handleRSSFeedChange = (e) => setNewRSSFeed(e.target.value)\n\n    const addFeed = e =>{\n        setNewRSSFeed(\"\")\n        const prom = setNewPodcast(newRSSFeed)\n        prom.then(val => dispatch(val))\n    }\n\n    const generateLinkFunction = (id) =>{\n        return () =>{\n            history.push(\"/podcaster/podcasts/\" + id)\n        }\n    }\n    if(!myPodcastsState.results){\n        return null\n    }\n    if(!myPodcastsState.results.length){\n        <>\n        <h2>Welcome!</h2>\n        <br/>\n        <br/>\n        <label>Add New RSS Feed:</label>\n        <input value={newRSSFeed} onChange={handleRSSFeedChange}></input>\n        <button onClick={addFeed}>Add Feed</button>\n\n\n        </>\n    }\n    return(\n        <>\n        <PodcastDisplay  title={\"My Podcasts\"} clickStub={\"/podcaster/podcasts\"} podcasts={myPodcastsState} />\n        <br/>\n        <br/>\n        <label>Add New RSS Feed:</label>\n        <input value={newRSSFeed} onChange={handleRSSFeedChange}></input>\n        <button onClick={addFeed}>Add Feed</button>\n\n\n        </>\n    )\n}\n\nexport default MyPodcasts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js",["272"],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SpeakerBox from \"./SpeakerBox\"\nimport {createNewTranscriptJob} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\";\nimport {clearMediaUrl} from \"../../Store/actions\"\n\nconst NewTranscriptForm = (props) =>{\n    const {id, title} = useParams()\n    const dispatch = useDispatch()\n    const mediaUrl = useSelector(state=>state.mediaUrl)\n    const history = useHistory()\n    const [speakerSections, setSpeakerSections] = useState([\"item\"])\n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearMediaUrl())\n        }\n    },[])\n    \n    const addSpeaker = () =>{\n        const temp = [...speakerSections]\n        temp.push(\"item\")\n        setSpeakerSections(temp)\n    }\n\n    const submit = () =>{\n        setLoading(true)\n        const getAllBoxes = document.querySelectorAll(\".speakerInputBox\")\n        const speakers = []\n        getAllBoxes.forEach((el)=>{\n            speakers.push(el.value)\n        })\n        const prom = createNewTranscriptJob(mediaUrl, id, speakers, title)\n        prom.then(val=> {\n            dispatch(val);\n            history.goBack()\n        })\n    }\n\n\n\n    return(\n        <div className=\"speakerNameForm\">\n            {speakerSections.map((el, i)=>{\n                return(\n                    <SpeakerBox index={i} />\n                )\n            })}\n            <br/>\n            <button key={100} onClick={addSpeaker}>Add Speaker</button>\n            {loading ?  <button key={101}>Pending</button> : <button key={102} onClick={submit}>Submit</button>}\n        </div>\n        \n    )\n}\n\nexport default NewTranscriptForm","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js",["273","274"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {getTranscripts, clearTranscripts} from \"../../../Store/actions\"\nimport EpisodeDisplay from \"../../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst TranscriptDisplay = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getTranscripts()\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearTranscripts())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcriber/transcribe/\" + id)\n        }\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        // return(\n        //     <div className=\"TranscriptPage\">\n        //         {stateTranscripts.map((el, i)=>{\n        //             return(<div className=\"neededTranscript\" key={i} onClick={createClickFunction(el.id)}>\n        //                 <h4>{el.title}</h4>\n        //                 <p>From: {el.podcastName}</p>\n        //             </div>)\n        //         })}\n        //     </div>\n        // )\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcriber/transcribe\"} title={\"Open Jobs\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default TranscriptDisplay","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js",["275","276"],"import {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {updateAudioIsLoaded} from \"../../Store/actions\"\n\nconst useAudioPlayer = (podcast, keepWithTime, editorMode, setEditorMode) =>{\n    const dispatch = useDispatch()\n    //const [length, setLegth] = useState(podcast.length);\n    const [length, setLegth] = useState(0);\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState(0);\n\n    const makeSetAudioVolume = (audio) => (num) =>{\n        audio.volume = num/100\n    }\n\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(audio.currentTime);\n        }\n\n        const setAudioTime = () => {\n            setCurrentTime(audio.currentTime);\n            //\n        }\n\n        const spaceToPause = (e) =>{\n            if(e.key === \" \" && editorMode === 0){\n                setPlaying(!playing)\n            }\n        }\n\n        const pause = () =>{\n            setPlaying(false)\n        }\n\n        const enterToChangeEditorMode = (e) => {\n            if(e.key === \"Enter\"){\n                if(editorMode === 0){\n                    setPlaying(false)\n                    setEditorMode(2)\n                } else{\n                    setPlaying(true)\n                    setEditorMode(0)\n                }\n            }\n        }\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", keepWithTime);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n        audio.addEventListener(\"ended\", pause)\n        document.querySelector(\"body\").addEventListener(\"keypress\", spaceToPause)\n        document.querySelector(\"body\").addEventListener(\"keypress\", enterToChangeEditorMode)\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n\n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n            audio.removeEventListener(\"timeupdate\", keepWithTime)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", spaceToPause)\n            audio.removeEventListener(\"ended\", pause)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", enterToChangeEditorMode)\n        }\n    });\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(0);\n        }\n        audio.currentTime = 0;\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n        }\n    }, [podcast]);\n\n\n    return{\n        currentTime,\n        length,\n        playing,\n        setPlaying,\n        setClickedTime,\n        makeSetAudioVolume,\n    }\n}\n\nexport default useAudioPlayer;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js",["277"],"import React, { useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\n\nconst Volume = (props) =>{\n    const [value, setValue] = React.useState(50);\n    \n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    useEffect(()=>{\n        props.makeSetAudioVolume(document.getElementById(\"audio\"))(value)\n    },[value])\n    \n    return (\n        <div className=\"AudioPlayer__VolumeDiv\">\n            <VolumeDown />\n            <Slider value={value} onChange={handleChange} aria-labelledby=\"Volume slider\" />\n            <VolumeUp />\n        </div>\n        )\n}\n\nexport default Volume;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js",["278"],"import React from \"react\";\nimport Length from \"./Length\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\n\nconst Bar = (props) =>{\n    const setClickedTime = (e) =>{\n        const bar = document.querySelector(\".AudioPlayer__TimeSlider\").getBoundingClientRect();\n        const percent = ((e.pageX - bar.left) / bar.width);\n        \n        props.setClickedTime(Math.floor(props.length * percent))\n    }\n\n\n    const PrettoSlider = withStyles({\n        root: {\n          color: '#1cb3ff',\n          height: 8,\n        },\n        thumb: {\n          height: 17,\n          width: 17,\n          backgroundColor: '#1cb3ff',\n          border: '2px solid currentColor',\n          marginTop: -4,\n          marginLeft: -12,\n          '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n          },\n        },\n        active: {},\n        valueLabel: {\n          left: 'calc(-50% + 4px)',\n        },\n        track: {\n          height: 8,\n          borderRadius: 4,\n        },\n        rail: {\n          height: 8,\n          borderRadius: 4,\n        },\n      })(Slider);\n    return (\n        <div className=\"AudioPlayer__Section AudioPlayer__LengthAndBar\">\n            <div className=\"AudioPlayer__LengthContainer\">\n                <Length length={props.length} currentTime={props.currentTime} />\n            </div>\n            <div onClick={setClickedTime} className=\"AudioPlayer__BarContainer\">\n                <PrettoSlider className={\"AudioPlayer__TimeSlider\"}  value={(props.currentTime/props.length) *100} />\n            </div>\n    </div>\n    )\n}\n\nexport default Bar;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/AllPodcasts/AllPodcastsWrapper.js",["279"],"import React, {useEffect, useState} from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {getALlPodcasts, clearPodcast} from \"../../Store/actions\"\nimport PodcastDisplay from \"../../Displays/PodcastDisplay/PodcastDisplay\"\n\nconst AllPodcastWrapper = (props) =>{\n    const [toDisplay, setToDisplay] = useState([])\n    const dispatch = useDispatch()\n    const podcastDisplay = useSelector(state=>state.myPodcasts)\n\n    useEffect(()=>{\n        const prom = getALlPodcasts(0)\n        prom.then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    useEffect(()=>{\n        setToDisplay(podcastDisplay)\n        \n    }, [podcastDisplay])\n\n    if(toDisplay.msg){\n        return <h4>{toDisplay.msg}</h4>\n    }\n\n    if(!toDisplay.results || !toDisplay.results.length){\n        return(\n            <p>Loading</p>\n        )\n    }\n\n    return(\n        <PodcastDisplay clickStub={\"/podcasts\"} podcasts={podcastDisplay} />\n    )\n\n}\n\nexport default AllPodcastWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/PodcastDisplay/PodcastDisplay.js",["280"],"import React from \"react\"\nimport { useHistory } from \"react-router\"\n\n//this expects an array of podcast objects\n//a podcast object is the model from the database\nconst PodcastDisplay = (props) =>{\n    const {podcasts, clickStub, title} = props\n    const {results, totalPages} = podcasts\n    const history = useHistory()\n\n    const createClickFunction = (id) =>{\n        return () =>{\n            history.push(clickStub + \"/\" + id)\n        }\n    }\n\n    return(\n        <>\n        <div className=\"center\" key={1}>\n        <h2>{title}</h2>\n        </div>\n        <div className=\"center\" key={2}>\n        <div className=\"podcastDisplay\">\n            {results.map((el, i) =>{\n                return(\n                    <div className=\"podcastDisplayAdjuster\" key={i}>\n                        <div onClick={createClickFunction(el.id)} className=\"podcastDisplay__Image\" style={{backgroundImage:`url(${el.photoUrl})`}}>\n                            <div className=\"podcastDisplay__Title\">\n                                {el.name}\n                            </div>\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n        </div>\n        </>\n    )\n}\n\nexport default PodcastDisplay","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/EpisodeDisplay/EpisodeDisplay.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/WrapperTranscriptViewer.js",["281"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport TranscriptViewer from \"./TranscriptView\"\nimport {getEditorData, clearEditorData} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst ViewerWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <TranscriptViewer data={stateEditorData} speakerOptions={editorData.transcript.Speakers} />\n    )\n}\n\n\nexport default ViewerWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/TranscriptView.js",["282","283","284","285","286","287","288","289","290","291","292","293","294"],"import React, { useEffect, useState } from \"react\"\nimport AudioPlayerWrapper from \"./AudioPlayer/AudioPlayerWrapper\"\nimport Text from \"./Text/Text\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {updateAudioIsLoaded} from \"../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport { TextsmsTwoTone } from \"@material-ui/icons\"\n\nconst TranscriptViewer = (props) =>{\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const {data, speakerOptions} = props\n    const words = data.data\n    const updateWordArr = useSelector(state=>state.updateWordArr)\n    const updateAudioIsLoadedSLice = useSelector(state=>state.updateAudioIsLoaded)\n\n    const [sections, setSections] = useState([])\n    const [wordIndex, setWordIndex] = useState([])\n    const [allWords, setAllWords] = useState([])\n    const [editorMode, setEditorMode] = useState(0)\n    const [openLocalTextMenu, setOpenLocalTextMenu] = useState(false)\n    const [moveSelected, setMoveSelected] = useState(0)\n    const [submitting, setSubmitting] = useState(false)\n\n    //On mount, set up sections\n    useEffect(()=>{\n        const tempSections = []\n        let tempSection = []\n        let currentSpeaker = words[0].speaker\n        for(let i = 0; i < words.length; i++){\n            const word = words[i]\n            if(word.speaker !== currentSpeaker){\n                tempSections.push(tempSection)\n                tempSection = []\n                currentSpeaker = word.speaker\n            }\n            tempSection.push(word)\n            \n\n        }\n        tempSections.push(tempSection)\n        setSections(tempSections)\n    }, [])\n\n\n\n    //updates the word index for near constant lookup times\n    useEffect(()=>{\n        const words = document.querySelectorAll(\".Editor__Word\")\n        const tempWordIndex = []\n        const tempAllWords = []\n        for(let i = 0; i < words.length; i ++){\n            let secondIndex = Math.floor(words[i].getAttribute(\"starttime\")/10)\n            if(!tempWordIndex[secondIndex]){\n                tempWordIndex[secondIndex] = []\n            }\n            words[i].setAttribute(\"totalwordindex\", i)\n            tempWordIndex[secondIndex].push(words[i])\n            tempAllWords.push(words[i])\n        }\n        setWordIndex(tempWordIndex)\n        setAllWords(tempAllWords)\n\n\n    }, [updateWordArr])\n\n\n    //this function needs to be threaded through so that it can find audio\n    const keepWithTime = (e) =>{\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        //testcomment\n        selected.forEach(el=>el.classList.remove(\"Editor__SelectedWord\"))\n\n        const currentTime = (Math.floor(e.target.currentTime * 100)) / 100\n        let currentIndex = Math.floor(currentTime/10)\n        let wordsAtSecond = wordIndex[currentIndex]\n        //finds words at the second prior if any\n        let currentWord\n\n        while(!wordsAtSecond && currentIndex >= 0){\n            currentIndex -= 1;\n            wordsAtSecond = wordIndex[currentIndex]\n        }\n        //only true if going negative\n        if(!wordsAtSecond){\n            return\n        }\n\n        for(let i = 0; i < wordsAtSecond.length; i++){\n            currentWord = wordsAtSecond[i]\n            if(currentWord.getAttribute(\"endtime\") > currentTime){\n                break\n            }\n        }\n        currentWord.classList.add(\"Editor__SelectedWord\")\n    }\n\n\n    useEffect(()=>{\n        const moveSelectorWord = (e) =>{\n            if(editorMode === 0 && !document.getElementById(\"audio\").paused){\n                return\n            }\n            if(e.key === \"ArrowRight\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) + 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            } else if(e.key === \"ArrowLeft\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) - 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            }\n        }\n\n        document.querySelector(\"body\").addEventListener(\"keydown\", moveSelectorWord)\n\n        return () => {\n            document.querySelector(\"body\").removeEventListener(\"keydown\", moveSelectorWord)\n        }\n\n    })\n\n\n\n\n    return(\n        <div className=\"editorPage\" id=\"editorPage\">\n            <h2>Transcript Viewer</h2>\n            <AudioPlayerWrapper keepWithTime={keepWithTime} />\n            {sections.map((el, i) => {\n                return(\n                    <div className=\"section\" key={i}>\n                        <SpeakerSection number={i} speaker={el[0].speaker} sections={sections} />\n                        <Text text={el} speaker={el[0].speaker} specialKey={i} />\n                    </div>\n                )\n            })}\n            <br />\n            <br />\n        </div>\n    )\n\n}\n\nexport default TranscriptViewer","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/Text/Text.js",["295","296","297"],"import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport {updateWordArr} from \"../../Store/actions\"\n\n\nconst Text = (props) =>{\n    const dispatch = useDispatch()\n    const {text, specialKey, speaker} = props\n    const editorMode = props.editorMode === 2\n    \n\n    //tell the editor to get the word arrs\n    useEffect(()=>{\n        dispatch(updateWordArr())\n    }, [])\n\n    \n\n    return(\n        <>\n        <div>\n            {text.map((el, i) =>{\n                return <span className=\"Editor__Word\" speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n            })}\n    </div>\n    </> \n    )\n}\n\nexport default Text","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/SpeakerSection/SpeakerSection.js",["298","299","300","301","302"],"import React, { useEffect, useState } from \"react\";\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n    const number = props.number\n    const sections = props.sections\n    const changeSectionSpeaker = props.changeSectionSpeaker\n\n\n    return(\n        <>\n        <div className=\"speakerSecontion\" id={`speakerSection${number}`}>\n            {speakerName + \":\"}\n        </div>\n        </>\n    )\n}\n\nexport default SpeakerSection","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Volume.js",["303"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Controls.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Bar.js",["304"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/useAudioPlayer.js",["305","306"],"import {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {updateAudioIsLoaded} from \"../../Store/actions\"\n\nconst useAudioPlayer = (podcast, keepWithTime, editorMode, setEditorMode) =>{\n    const dispatch = useDispatch()\n    //const [length, setLegth] = useState(podcast.length);\n    const [length, setLegth] = useState(0);\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState(0);\n\n    const makeSetAudioVolume = (audio) => (num) =>{\n        audio.volume = num/100\n    }\n\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        //dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(audio.currentTime);\n        }\n\n        const setAudioTime = () => {\n            setCurrentTime(audio.currentTime);\n            //\n        }\n\n        const spaceToPause = (e) =>{\n            if(e.key === \" \"){\n                setPlaying(!playing)\n            }\n        }\n\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", keepWithTime);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n        document.querySelector(\"body\").addEventListener(\"keypress\", spaceToPause)\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n            audio.removeEventListener(\"timeupdate\", keepWithTime)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", spaceToPause)\n        }\n    });\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(0);\n        }\n        audio.currentTime = 0;\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n        }\n    }, [podcast]);\n\n\n    return{\n        currentTime,\n        length,\n        playing,\n        setPlaying,\n        setClickedTime,\n        makeSetAudioVolume,\n    }\n}\n\nexport default useAudioPlayer;",["307","308"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/config.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PendingTranscripts/PendingTranscripts.js",["309","310"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {getPendingTranscripts, clearPendingTranscripts} from \"../../Store/actions\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst PendingTranscripts = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getPendingTranscripts()\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearPendingTranscripts())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcriber/transcribe/\" + id)\n        }\n    }\n\n    if(stateTranscripts.msg){\n        return <h4>{stateTranscripts.msg}</h4>\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcriber/transcribe\"} title={\"Open Jobs\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default PendingTranscripts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/PodcastTranscripts/PodcastTranscripts.js",["311","312"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory, useParams } from \"react-router\"\nimport {getTranscriptsForPodcast, clearTranscriptsForPodcast} from \"../../Store/actions\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst PodcastTranscripts = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const {id} = useParams()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getTranscriptsForPodcast(id)\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearTranscriptsForPodcast())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcription/\" + id)\n        }\n    }\n\n    if(stateTranscripts.msg){\n        return <h4>{stateTranscripts.msg}</h4>\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcript\"} title={\"Transcripts\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default PodcastTranscripts",{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","severity":1,"message":"318","line":50,"column":5,"nodeType":"319","endLine":50,"endColumn":7,"suggestions":"320"},{"ruleId":"321","severity":1,"message":"322","line":19,"column":12,"nodeType":"323","messageId":"324","endLine":19,"endColumn":27},{"ruleId":"321","severity":1,"message":"325","line":20,"column":12,"nodeType":"323","messageId":"324","endLine":20,"endColumn":28},{"ruleId":"321","severity":1,"message":"326","line":21,"column":12,"nodeType":"323","messageId":"324","endLine":21,"endColumn":26},{"ruleId":"321","severity":1,"message":"327","line":25,"column":12,"nodeType":"323","messageId":"324","endLine":25,"endColumn":22},{"ruleId":"317","severity":1,"message":"328","line":36,"column":8,"nodeType":"319","endLine":36,"endColumn":14,"suggestions":"329"},{"ruleId":"317","severity":1,"message":"318","line":46,"column":8,"nodeType":"319","endLine":46,"endColumn":10,"suggestions":"330"},{"ruleId":"321","severity":1,"message":"331","line":1,"column":8,"nodeType":"323","messageId":"324","endLine":1,"endColumn":13},{"ruleId":"321","severity":1,"message":"327","line":27,"column":12,"nodeType":"323","messageId":"324","endLine":27,"endColumn":22},{"ruleId":"317","severity":1,"message":"328","line":38,"column":8,"nodeType":"319","endLine":38,"endColumn":14,"suggestions":"332"},{"ruleId":"317","severity":1,"message":"318","line":48,"column":8,"nodeType":"319","endLine":48,"endColumn":10,"suggestions":"333"},{"ruleId":"317","severity":1,"message":"334","line":18,"column":7,"nodeType":"319","endLine":18,"endColumn":9,"suggestions":"335"},{"ruleId":"321","severity":1,"message":"336","line":6,"column":9,"nodeType":"323","messageId":"324","endLine":6,"endColumn":28},{"ruleId":"321","severity":1,"message":"337","line":8,"column":10,"nodeType":"323","messageId":"324","endLine":8,"endColumn":24},{"ruleId":"321","severity":1,"message":"338","line":14,"column":11,"nodeType":"323","messageId":"324","endLine":14,"endColumn":19},{"ruleId":"321","severity":1,"message":"339","line":19,"column":11,"nodeType":"323","messageId":"324","endLine":19,"endColumn":35},{"ruleId":"321","severity":1,"message":"340","line":26,"column":12,"nodeType":"323","messageId":"324","endLine":26,"endColumn":29},{"ruleId":"321","severity":1,"message":"341","line":26,"column":31,"nodeType":"323","messageId":"324","endLine":26,"endColumn":51},{"ruleId":"317","severity":1,"message":"342","line":48,"column":8,"nodeType":"319","endLine":48,"endColumn":10,"suggestions":"343"},{"ruleId":"321","severity":1,"message":"344","line":1,"column":28,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"345","line":2,"column":8,"nodeType":"323","messageId":"324","endLine":2,"endColumn":20},{"ruleId":"321","severity":1,"message":"346","line":74,"column":15,"nodeType":"323","messageId":"324","endLine":74,"endColumn":35},{"ruleId":"317","severity":1,"message":"318","line":105,"column":8,"nodeType":"319","endLine":105,"endColumn":10,"suggestions":"347"},{"ruleId":"321","severity":1,"message":"348","line":16,"column":11,"nodeType":"323","messageId":"324","endLine":16,"endColumn":33},{"ruleId":"317","severity":1,"message":"349","line":35,"column":8,"nodeType":"319","endLine":35,"endColumn":10,"suggestions":"350"},{"ruleId":"313","replacedBy":"351"},{"ruleId":"315","replacedBy":"352"},{"ruleId":"321","severity":1,"message":"353","line":1,"column":10,"nodeType":"323","messageId":"324","endLine":1,"endColumn":21},{"ruleId":"354","severity":1,"message":"355","line":195,"column":9,"nodeType":"323","messageId":"356","endLine":195,"endColumn":13},{"ruleId":"354","severity":1,"message":"355","line":223,"column":9,"nodeType":"323","messageId":"356","endLine":223,"endColumn":13},{"ruleId":"354","severity":1,"message":"355","line":270,"column":9,"nodeType":"323","messageId":"356","endLine":270,"endColumn":13},{"ruleId":"354","severity":1,"message":"355","line":286,"column":9,"nodeType":"323","messageId":"356","endLine":286,"endColumn":13},{"ruleId":"354","severity":1,"message":"355","line":334,"column":9,"nodeType":"323","messageId":"356","endLine":334,"endColumn":13},{"ruleId":"321","severity":1,"message":"357","line":1,"column":22,"nodeType":"323","messageId":"324","endLine":1,"endColumn":37},{"ruleId":"313","replacedBy":"358"},{"ruleId":"315","replacedBy":"359"},{"ruleId":"317","severity":1,"message":"318","line":22,"column":7,"nodeType":"319","endLine":22,"endColumn":9,"suggestions":"360"},{"ruleId":"321","severity":1,"message":"361","line":36,"column":11,"nodeType":"323","messageId":"324","endLine":36,"endColumn":31},{"ruleId":"317","severity":1,"message":"318","line":21,"column":7,"nodeType":"319","endLine":21,"endColumn":9,"suggestions":"362"},{"ruleId":"317","severity":1,"message":"318","line":20,"column":7,"nodeType":"319","endLine":20,"endColumn":9,"suggestions":"363"},{"ruleId":"321","severity":1,"message":"364","line":26,"column":11,"nodeType":"323","messageId":"324","endLine":26,"endColumn":30},{"ruleId":"317","severity":1,"message":"365","line":18,"column":5,"nodeType":"323","endLine":18,"endColumn":14,"suggestions":"366"},{"ruleId":"317","severity":1,"message":"367","line":119,"column":8,"nodeType":"319","endLine":119,"endColumn":17,"suggestions":"368"},{"ruleId":"317","severity":1,"message":"369","line":14,"column":7,"nodeType":"319","endLine":14,"endColumn":14,"suggestions":"370"},{"ruleId":"321","severity":1,"message":"371","line":3,"column":22,"nodeType":"323","messageId":"324","endLine":3,"endColumn":32},{"ruleId":"317","severity":1,"message":"318","line":17,"column":8,"nodeType":"319","endLine":17,"endColumn":10,"suggestions":"372"},{"ruleId":"321","severity":1,"message":"373","line":8,"column":21,"nodeType":"323","messageId":"324","endLine":8,"endColumn":31},{"ruleId":"317","severity":1,"message":"334","line":18,"column":7,"nodeType":"319","endLine":18,"endColumn":9,"suggestions":"374"},{"ruleId":"321","severity":1,"message":"336","line":6,"column":9,"nodeType":"323","messageId":"324","endLine":6,"endColumn":28},{"ruleId":"321","severity":1,"message":"337","line":8,"column":10,"nodeType":"323","messageId":"324","endLine":8,"endColumn":24},{"ruleId":"321","severity":1,"message":"375","line":11,"column":11,"nodeType":"323","messageId":"324","endLine":11,"endColumn":18},{"ruleId":"321","severity":1,"message":"338","line":12,"column":11,"nodeType":"323","messageId":"324","endLine":12,"endColumn":19},{"ruleId":"321","severity":1,"message":"376","line":13,"column":12,"nodeType":"323","messageId":"324","endLine":13,"endColumn":24},{"ruleId":"321","severity":1,"message":"377","line":14,"column":18,"nodeType":"323","messageId":"324","endLine":14,"endColumn":32},{"ruleId":"321","severity":1,"message":"339","line":17,"column":11,"nodeType":"323","messageId":"324","endLine":17,"endColumn":35},{"ruleId":"321","severity":1,"message":"378","line":22,"column":24,"nodeType":"323","messageId":"324","endLine":22,"endColumn":37},{"ruleId":"321","severity":1,"message":"340","line":23,"column":12,"nodeType":"323","messageId":"324","endLine":23,"endColumn":29},{"ruleId":"321","severity":1,"message":"341","line":23,"column":31,"nodeType":"323","messageId":"324","endLine":23,"endColumn":51},{"ruleId":"321","severity":1,"message":"379","line":25,"column":12,"nodeType":"323","messageId":"324","endLine":25,"endColumn":22},{"ruleId":"321","severity":1,"message":"380","line":25,"column":24,"nodeType":"323","messageId":"324","endLine":25,"endColumn":37},{"ruleId":"317","severity":1,"message":"342","line":45,"column":8,"nodeType":"319","endLine":45,"endColumn":10,"suggestions":"381"},{"ruleId":"321","severity":1,"message":"382","line":8,"column":30,"nodeType":"323","messageId":"324","endLine":8,"endColumn":37},{"ruleId":"321","severity":1,"message":"383","line":9,"column":11,"nodeType":"323","messageId":"324","endLine":9,"endColumn":21},{"ruleId":"317","severity":1,"message":"318","line":15,"column":8,"nodeType":"319","endLine":15,"endColumn":10,"suggestions":"384"},{"ruleId":"321","severity":1,"message":"385","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":26},{"ruleId":"321","severity":1,"message":"344","line":1,"column":28,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"386","line":5,"column":11,"nodeType":"323","messageId":"324","endLine":5,"endColumn":23},{"ruleId":"321","severity":1,"message":"387","line":7,"column":11,"nodeType":"323","messageId":"324","endLine":7,"endColumn":19},{"ruleId":"321","severity":1,"message":"388","line":8,"column":11,"nodeType":"323","messageId":"324","endLine":8,"endColumn":31},{"ruleId":"317","severity":1,"message":"369","line":14,"column":7,"nodeType":"319","endLine":14,"endColumn":14,"suggestions":"389"},{"ruleId":"321","severity":1,"message":"371","line":3,"column":22,"nodeType":"323","messageId":"324","endLine":3,"endColumn":32},{"ruleId":"317","severity":1,"message":"390","line":18,"column":5,"nodeType":"323","endLine":18,"endColumn":14,"suggestions":"391"},{"ruleId":"317","severity":1,"message":"367","line":99,"column":8,"nodeType":"319","endLine":99,"endColumn":17,"suggestions":"392"},{"ruleId":"313","replacedBy":"393"},{"ruleId":"315","replacedBy":"394"},{"ruleId":"317","severity":1,"message":"318","line":20,"column":7,"nodeType":"319","endLine":20,"endColumn":9,"suggestions":"395"},{"ruleId":"321","severity":1,"message":"364","line":26,"column":11,"nodeType":"323","messageId":"324","endLine":26,"endColumn":30},{"ruleId":"317","severity":1,"message":"349","line":21,"column":7,"nodeType":"319","endLine":21,"endColumn":9,"suggestions":"396"},{"ruleId":"321","severity":1,"message":"364","line":27,"column":11,"nodeType":"323","messageId":"324","endLine":27,"endColumn":30},"no-native-reassign",["397"],"no-negated-in-lhs",["398"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["399"],"no-unused-vars","'researcherLogin' is assigned a value but never used.","Identifier","unusedVar","'transcriberLogin' is assigned a value but never used.","'podcasterLogin' is assigned a value but never used.","'stateError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ifLoggedInThenRedirect'. Either include it or remove the dependency array.",["400"],["401"],"'React' is defined but never used.",["402"],["403"],"React Hook useEffect has missing dependencies: 'dispatch' and 'transcriptId'. Either include them or remove the dependency array.",["404"],"'updateAudioIsLoaded' is defined but never used.","'TextsmsTwoTone' is defined but never used.","'dispatch' is assigned a value but never used.","'updateAudioIsLoadedSLice' is assigned a value but never used.","'openLocalTextMenu' is assigned a value but never used.","'setOpenLocalTextMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'words'. Either include it or remove the dependency array.",["405"],"'useState' is defined but never used.","'ListDividers' is defined but never used.","'removeEventListeners' is assigned a value but never used.",["406"],"'createToTranscriptLink' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["407"],["397"],["398"],"'useDispatch' is defined but never used.","no-const-assign","'data' is constant.","const","'applyMiddleware' is defined but never used.",["397"],["398"],["408"],"'generateLinkFunction' is assigned a value but never used.",["409"],["410"],"'createClickFunction' is assigned a value but never used.","React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode] as a second argument to the useEffect Hook.",["411"],"React Hook useEffect has missing dependencies: 'clickedTime', 'currentTime', 'dispatch', and 'playing'. Either include them or remove the dependency array.",["412"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["413"],"'makeStyles' is defined but never used.",["414"],"'totalPages' is assigned a value but never used.",["415"],"'history' is assigned a value but never used.","'transcriptId' is assigned a value but never used.","'speakerOptions' is assigned a value but never used.","'setEditorMode' is assigned a value but never used.","'submitting' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.",["416"],"'speaker' is assigned a value but never used.","'editorMode' is assigned a value but never used.",["417"],"'useEffect' is defined but never used.","'stateUpdater' is assigned a value but never used.","'sections' is assigned a value but never used.","'changeSectionSpeaker' is assigned a value but never used.",["418"],"React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime] as a second argument to the useEffect Hook.",["419"],["420"],["397"],["398"],["421"],["422"],"no-global-assign","no-unsafe-negation",{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"423","fix":"427"},{"desc":"425","fix":"428"},{"desc":"423","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"423","fix":"434"},{"desc":"435","fix":"436"},{"desc":"423","fix":"437"},{"desc":"423","fix":"438"},{"desc":"423","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"423","fix":"446"},{"desc":"430","fix":"447"},{"desc":"432","fix":"448"},{"desc":"423","fix":"449"},{"desc":"444","fix":"450"},{"desc":"451","fix":"452"},{"desc":"442","fix":"453"},{"desc":"423","fix":"454"},{"desc":"435","fix":"455"},"Update the dependencies array to be: [dispatch]",{"range":"456","text":"457"},"Update the dependencies array to be: [ifLoggedInThenRedirect, user]",{"range":"458","text":"459"},{"range":"460","text":"457"},{"range":"461","text":"459"},{"range":"462","text":"457"},"Update the dependencies array to be: [dispatch, transcriptId]",{"range":"463","text":"464"},"Update the dependencies array to be: [words]",{"range":"465","text":"466"},{"range":"467","text":"457"},"Update the dependencies array to be: [dispatch, id]",{"range":"468","text":"469"},{"range":"470","text":"457"},{"range":"471","text":"457"},{"range":"472","text":"457"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode]",{"range":"473","text":"474"},"Update the dependencies array to be: [clickedTime, currentTime, dispatch, playing, podcast]",{"range":"475","text":"476"},"Update the dependencies array to be: [props, value]",{"range":"477","text":"478"},{"range":"479","text":"457"},{"range":"480","text":"464"},{"range":"481","text":"466"},{"range":"482","text":"457"},{"range":"483","text":"478"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime]",{"range":"484","text":"485"},{"range":"486","text":"476"},{"range":"487","text":"457"},{"range":"488","text":"469"},[1981,1983],"[dispatch]",[1307,1313],"[ifLoggedInThenRedirect, user]",[1475,1477],[1417,1423],[1585,1587],[646,648],"[dispatch, transcriptId]",[1905,1907],"[words]",[3677,3679],[1134,1136],"[dispatch, id]",[773,775],[722,724],[698,700],[2673,2673],", [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode]",[3610,3619],"[clickedTime, currentTime, dispatch, playing, podcast]",[463,470],"[props, value]",[605,607],[664,666],[1738,1740],[397,399],[463,470],[1996,1996],", [keepWithTime, playing, clickedTime, currentTime]",[2933,2942],[721,723],[775,777]]
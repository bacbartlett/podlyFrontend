[{"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js":"1","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js":"2","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js":"3","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js":"4","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js":"5","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js":"6","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js":"7","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js":"8","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js":"9","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js":"10","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js":"11","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js":"12","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js":"13","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js":"14","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js":"15","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js":"16","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js":"17","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js":"18","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js":"19","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js":"20","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js":"21","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js":"22","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js":"23","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js":"24","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js":"25","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js":"26","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js":"27","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js":"28","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js":"29","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js":"30","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js":"31","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js":"32","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js":"33","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/AllPodcasts/AllPodcastsWrapper.js":"34","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/PodcastDisplay/PodcastDisplay.js":"35","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/EpisodeDisplay/EpisodeDisplay.js":"36","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/WrapperTranscriptViewer.js":"37","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/TranscriptView.js":"38","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayerWrapper.js":"39","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/Text/Text.js":"40","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/SpeakerSection/SpeakerSection.js":"41","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayer.js":"42","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Volume.js":"43","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Controls.js":"44","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Bar.js":"45","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/useAudioPlayer.js":"46","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Length.js":"47","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/config.js":"48","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PendingTranscripts/PendingTranscripts.js":"49","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/PodcastTranscripts/PodcastTranscripts.js":"50","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/AddOrRemoveSpeakers/AddOrRemoveSpeakers.js":"51","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/AboutPage/AboutPage.js":"52","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/HelpPage/HelpPage.js":"53"},{"size":346,"mtime":1607545119820,"results":"54","hashOfConfig":"55"},{"size":3878,"mtime":1611005361163,"results":"56","hashOfConfig":"55"},{"size":2054,"mtime":1610898176825,"results":"57","hashOfConfig":"55"},{"size":3846,"mtime":1608836839820,"results":"58","hashOfConfig":"55"},{"size":131,"mtime":1607930655310,"results":"59","hashOfConfig":"55"},{"size":156,"mtime":1607049772990,"results":"60","hashOfConfig":"55"},{"size":4059,"mtime":1608681938860,"results":"61","hashOfConfig":"55"},{"size":282,"mtime":1607722197336,"results":"62","hashOfConfig":"55"},{"size":1233,"mtime":1609379246271,"results":"63","hashOfConfig":"55"},{"size":15366,"mtime":1611089176470,"results":"64","hashOfConfig":"55"},{"size":4148,"mtime":1609432463142,"results":"65","hashOfConfig":"55"},{"size":4551,"mtime":1611089226220,"results":"66","hashOfConfig":"55"},{"size":1642,"mtime":1609423701195,"results":"67","hashOfConfig":"55"},{"size":1547,"mtime":1607843465080,"results":"68","hashOfConfig":"55"},{"size":10128,"mtime":1609409999885,"results":"69","hashOfConfig":"55"},{"size":923,"mtime":1609378971403,"results":"70","hashOfConfig":"55"},{"size":3866,"mtime":1609423694145,"results":"71","hashOfConfig":"55"},{"size":46,"mtime":1607462916677,"results":"72","hashOfConfig":"55"},{"size":1517,"mtime":1610899082245,"results":"73","hashOfConfig":"55"},{"size":4644,"mtime":1610899659935,"results":"74","hashOfConfig":"55"},{"size":4644,"mtime":1610899739625,"results":"75","hashOfConfig":"55"},{"size":2123,"mtime":1611084776520,"results":"76","hashOfConfig":"55"},{"size":1260,"mtime":1609396655763,"results":"77","hashOfConfig":"55"},{"size":428,"mtime":1607646956930,"results":"78","hashOfConfig":"55"},{"size":1626,"mtime":1607943015400,"results":"79","hashOfConfig":"55"},{"size":659,"mtime":1607825230980,"results":"80","hashOfConfig":"55"},{"size":876,"mtime":1609120080425,"results":"81","hashOfConfig":"55"},{"size":1370,"mtime":1607827697510,"results":"82","hashOfConfig":"55"},{"size":3801,"mtime":1609413837174,"results":"83","hashOfConfig":"55"},{"size":734,"mtime":1607727232300,"results":"84","hashOfConfig":"55"},{"size":1639,"mtime":1607729598050,"results":"85","hashOfConfig":"55"},{"size":600,"mtime":1607727235330,"results":"86","hashOfConfig":"55"},{"size":1365,"mtime":1608836846030,"results":"87","hashOfConfig":"55"},{"size":1020,"mtime":1608963644010,"results":"88","hashOfConfig":"55"},{"size":1323,"mtime":1611084651190,"results":"89","hashOfConfig":"55"},{"size":3219,"mtime":1609100722305,"results":"90","hashOfConfig":"55"},{"size":968,"mtime":1607944469090,"results":"91","hashOfConfig":"55"},{"size":5288,"mtime":1609120522565,"results":"92","hashOfConfig":"55"},{"size":659,"mtime":1607943821080,"results":"93","hashOfConfig":"55"},{"size":775,"mtime":1607944215470,"results":"94","hashOfConfig":"55"},{"size":494,"mtime":1607944277020,"results":"95","hashOfConfig":"55"},{"size":876,"mtime":1609120105245,"results":"96","hashOfConfig":"55"},{"size":734,"mtime":1607943821090,"results":"97","hashOfConfig":"55"},{"size":1370,"mtime":1607943821080,"results":"98","hashOfConfig":"55"},{"size":1639,"mtime":1607943821080,"results":"99","hashOfConfig":"55"},{"size":3124,"mtime":1607944603570,"results":"100","hashOfConfig":"55"},{"size":600,"mtime":1607943821090,"results":"101","hashOfConfig":"55"},{"size":167,"mtime":1608144291060,"results":"102","hashOfConfig":"55"},{"size":1312,"mtime":1609094767405,"results":"103","hashOfConfig":"55"},{"size":1347,"mtime":1609100818865,"results":"104","hashOfConfig":"55"},{"size":2063,"mtime":1609423706525,"results":"105","hashOfConfig":"55"},{"size":6749,"mtime":1611009190833,"results":"106","hashOfConfig":"55"},{"size":0,"mtime":1611005319403,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"hnf33b",{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"110"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"110"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"110"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"110"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"110"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"110"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"110"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"110"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"110"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"110"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"110"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js",[],["240","241"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js",["242","243","244"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./Homepage/Homepage\"\nimport Login from \"./Login/Login\"\nimport Signup from \"./Signup/Signup\"\nimport PodcasterHomepage from \"./Podcasters/Homepage/Homepage\"\nimport TranscriberHomepage from \"./Transcribers/Homepage/Homepage\"\nimport ResearcherHomepage from \"./Researcher/Homepage/Homepage\"\nimport EditorWrapper from \"./Editor/EditorWrapper\"\nimport PodcastDisplayWrapper from \"./Podcasters/PodcastDisplay/PodcastDisplayWrapper\"\nimport { useDispatch } from 'react-redux';\nimport PodcasterNav from \"./NavBar/PodcasterNav/NavBar\"\nimport TranscriberNav from \"./NavBar/TranscriberNav/NavBar\"\nimport DefaultNav from \"./NavBar/DefaultNav/NavBar\"\nimport { SET_USER } from './Store/actions';\nimport MyPodcasts from \"./Podcasters/MyPodcasts/MyPodcasts\"\nimport NewTranscriptForm from \"./Podcasters/NewTranscriptionForm/NewTranscriptForm\"\nimport AllPodcastWrapper from \"./Researcher/AllPodcasts/AllPodcastsWrapper\"\nimport TranscriptViewerWrapper from \"./TranscriptViewer/WrapperTranscriptViewer\"\nimport {baseUrl} from \"./config\"\nimport PendingTranscripts from \"./Podcasters/PendingTranscripts/PendingTranscripts\"\nimport PodcastTranscripts from \"./Researcher/PodcastTranscripts/PodcastTranscripts\"\nimport AboutPage from \"./AboutPage/AboutPage\"\nimport HelpPage from \"./HelpPage/HelpPage\"\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    //const token = localStorage.getItem(\"token\")\n    const type = localStorage.getItem(\"type\")\n    if(type){\n      const loginUsingToken = async() =>{\n        const res = await fetch(baseUrl + `/${type.toLowerCase()}/token`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        })\n        const data = await res.json()\n        if(data.msg){\n          return\n        }\n        const action = {\n          type: SET_USER,\n          payload: {...data, type}\n        }\n        dispatch(action)\n      }\n\n\n      loginUsingToken()\n    }\n  },[])\n  return (\n    <>\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact={false}>\n          <DefaultNav />\n        </Route>\n      </Switch>     \n      <Route exact={true} path=\"/\">\n        <Homepage />\n      </Route>\n      <Route exact={true} path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact={true} path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <PodcasterHomepage />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <MyPodcasts />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id\">\n        <PodcastDisplayWrapper />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id/newtranscript/:title\">\n        <NewTranscriptForm />\n      </Route>\n      <Route exact={true} path=\"/podcaster/pendingjobs\">\n        <PendingTranscripts />\n      </Route>\n      <Route exact={true} path=\"/transcriber\">\n        <TranscriberHomepage />\n      </Route>\n      <Route exact={true} path=\"/researcher\">\n        <ResearcherHomepage />\n      </Route>\n      <Route exact={true} path={\"/podcasts\"}>\n        <AllPodcastWrapper />\n      </Route>\n      <Route exact={true} path=\"/transcriber/transcribe/:transcriptId\">\n        <EditorWrapper />\n      </Route>\n      <Route exact={true} path=\"/transcript/:transcriptId\">\n          <TranscriptViewerWrapper />\n      </Route>\n      <Route exact={true} path={\"/podcasts/:id\"}>\n        <PodcastTranscripts />\n      </Route>\n      <Route exact={true} path=\"/about\">\n        <AboutPage />\n      </Route>\n      <Route exact={true} path=\"/help\">\n        <HelpPage />\n      </Route>\n    </Router>\n    {/* <a href=\"https://www.freepik.com/vectors/technology\">Technology vector created by freepik - www.freepik.com</a> */}\n    </>\n  );\n}\n\nexport default App;\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js",["245","246","247","248","249","250"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, setUser} from \"../Store/actions\"\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst Login = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherLogin, setResearcherLogin] = useState(false)\n    const [transcriberLogin, setTranscriberLogin] = useState(false)\n    const [podcasterLogin, setPodcasterLogin] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherLogin(false)\n        setTranscriberLogin(false)\n        setPodcasterLogin(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterLogin(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberLogin(true)\n        } else{\n            setResearcherLogin(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n\n    const submitDetails = e =>{\n        const userDetails = setUser(option, email, password)\n        userDetails.then(val => dispatch(val))\n    }\n\n    const demoLogin = () =>{\n        let email\n        let password = \"password\"\n        if (option === \"Podcaster\"){\n            email = \"demoP@user.com\"\n        } else if (option === \"Transcriber\"){\n            email = \"demoT@user.com\"\n        } else if (option === \"Researcher\"){\n            email = \"demoR@user.com\"\n        }\n        const userDetails = setUser(option, email, password)\n        userDetails.then(val=>dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Login</h1>\n        <InputLabel id=\"demo-simple-select-label\">Login Type</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={option}\n          onChange={handleChange}\n        >\n          <MenuItem value={\"Podcaster\"}>Podcaster</MenuItem>\n          <MenuItem value={\"Transcriber\"}>Transcriber</MenuItem>\n          <MenuItem value={\"Researcher\"}>Researcher</MenuItem>\n        </Select>\n            <div className=\"error\">\n                {error}\n            </div>\n                <TextField id=\"email\" type=\"email\" value={email} onChange={handleEmail} label=\"Email\" />\n                <TextField id=\"password\" type=\"password\" value={password} onChange={handlePassword} label=\"Password\" />\n            <Button variant=\"contained\" className=\"submitButton\" onClick={submitDetails}>Login</Button>\n            <Button variant=\"contained\" className=\"demologin\" onClick={demoLogin}>Demo User</Button>\n        </div>\n        \n    )\n}\n\nexport default Login","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js",["251"],"import React from \"react\"\n\nconst PodcasterHomepage = (props) =>{\n    return(\n        null\n    )\n}\n\nexport default PodcasterHomepage","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js",["252","253","254"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, signupUser} from \"../Store/actions\"\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst Signup = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherSignup, setResearcherSignup] = useState(false)\n    const [transcriberSignup, setTranscriberSignup] = useState(false)\n    const [podcasterSignup, setPodcasterSignup] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherSignup(false)\n        setTranscriberSignup(false)\n        setPodcasterSignup(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterSignup(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberSignup(true)\n        } else{\n            setResearcherSignup(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n    const handleFirstName = e => setFirstName(e.target.value)\n    const handleLastName = e => setLastName(e.target.value)\n\n    const submitDetails = e =>{\n        let userDetails\n        if(researcherSignup){\n            userDetails = signupUser(option, email, password)\n        } else {\n            userDetails = signupUser(option, email, password, firstName, lastName)\n        }\n        userDetails.then(val => dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Signup</h1>\n            <InputLabel id=\"demo-simple-select-label\">Login Type</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={option}\n          onChange={handleChange}\n        >\n          <MenuItem value={\"Podcaster\"}>Podcaster</MenuItem>\n          <MenuItem value={\"Transcriber\"}>Transcriber</MenuItem>\n          <MenuItem value={\"Researcher\"}>Researcher</MenuItem>\n        </Select>\n            <div className=\"error\">\n                {error}\n            </div>\n            <TextField id=\"email\" type=\"email\" value={email} onChange={handleEmail} label=\"Email\" />\n            <TextField id=\"password\" type=\"password\" value={password} onChange={handlePassword} label=\"Password\" />\n                {podcasterSignup || transcriberSignup ? \n                <>\n                <TextField id=\"firstName\" type=\"text\" value={firstName} onChange={handleFirstName} label=\"First Name\" />\n                <TextField id=\"lastName\" type=\"text\" value={lastName} onChange={handleLastName} label=\"Last Name\" />\n                </> : null\n            }\n            <Button variant=\"contained\" className=\"submitButton\" onClick={submitDetails}>Signup</Button>\n        </div>\n        \n    )\n}\n\nexport default Signup","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js",["255"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Editor from \"./Editor\"\nimport {getEditorData, clearEditorData, setSpeakers} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst EditorWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n    const speakerData = useSelector(state=>state.speakers)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n    const [stateSpeakers, setStateSpeakers] = useState(speakerData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        const prom2 = setSpeakers(transcriptId)\n        prom2.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    useEffect(()=>{\n        setStateSpeakers(speakerData)\n    }, [speakerData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <Editor data={stateEditorData} speakerOptions={stateSpeakers} />\n    )\n}\n\n\nexport default EditorWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js",["256","257","258","259","260","261","262"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js",["263"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js",["264","265"],"import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\n//import PodcastDisplay from \"./PodCastDisplay\"\nimport {getPodcast, clearPodcast} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\nimport {setMediaUrl, createNewTranscriptJob} from \"../../Store/actions\"\n\n\nconst PodcastDisplayWrapper = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const podcastInfo = useSelector(state=>state.podcastDisplay)\n    const history = useHistory()\n\n    const createToTranscriptLink = (id) =>{\n        return () =>{\n            history.push(\"/transcripts/\" + id)\n        }\n    }\n\n    const createNewTranscriptLink = (mediaurl, title) =>{\n        return () => {\n            const prom = createNewTranscriptJob(mediaurl, id, [], title)\n            prom.then(val=>{\n                dispatch(setMediaUrl(val))\n                history.push(`/podcaster/podcasts/${id}/newtranscript/${title}`)\n            })\n            \n        }\n    }\n\n    useEffect(()=>{\n        const asyncFunc = async() => await getPodcast(id)\n        asyncFunc().then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    if(!podcastInfo || !podcastInfo.length){\n        return <h2>Loading Episodes</h2>\n    }\n\n    return(\n        \n        <EpisodeDisplay episodes={podcastInfo} title={podcastInfo[0].podcastTitle}\n        clickStub={\"/transcript\"} transcribeButton={true} transcibeFunction={createNewTranscriptLink}/>\n    )\n}\n\nexport default PodcastDisplayWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js",[],["266","267"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js",["268","269","270","271","272","273","274"],"import { useDispatch } from \"react-redux\"\nimport {baseUrl} from \"../config\"\n\n\nexport const GET_PODCAST = \"GET_PODCAST\"\nexport const CLEAR_PODCAST = \"CLEAR_PODCAST\"\nexport const SET_USER = \"SET_USER\"\nexport const REMOVE_USER = \"REMOVE_USER\"\nexport const SET_ERROR = \"SET_ERROR\"\nexport const CLEAR_ERROR = \"CLEAR_ERROR\"\nexport const SET_MYPODCASTS = \"SET_MYPODCASTS\"\nexport const CLEAR_MYPODCASTS = \"CLEAR_MYPODCASTS\"\nexport const SET_MEDIAURL = \"SET_MEDIAURL\"\nexport const CLEAR_MEDIAURL = \"CLEAR_MEDIAURL\"\nexport const SET_TRANSCRIPTS = \"SET_TRANSCRIPTS\"\nexport const CLEAR_TRANSCRIPTS = \"CLEAR_TRANSCRIPTS\"\nexport const GET_EDITORDATA = \"GET_EDITORDATA\"\nexport const CLEAR_EDITORDATA = \"CLEAR_EDITORDATA\"\nexport const UPDATE_WORDARR = \"UPDATE_WORDARR\"\nexport const UPDATE_AUDIOISLOADED = \"UPDATE_AUDIOISLOADED\"\nexport const UPDATE_SECTIONS = \"UPDATE_SECTIONS\"\nexport const CLEAR_SECTIONS = \"CLEAR_SECTIONS\"\nexport const SET_PODCASTDISPLAY = \"SET_PODCASTDISPLAY\"\nexport const CLEAR_PODCASTS = \"CLEAR_PODCASTS\"\nexport const SET_SPEAKERS = \"SET_SPEAKERS\"\nexport const SAVE_SPEAKERS = \"SAVE_SPEAKERS\"\nexport const ADD_SPEAKER = \"ADD_SPEAKER\"\nexport const DELETE_SPEAKER = \"DELETE_SPEAKER\"\n\nexport const getPodcast = async (podcastId) =>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/\" + podcastId, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n    })\n    const data = await res.json()\n    return{type: GET_PODCAST, payload: data}\n    \n}\n\nexport const clearPodcast = () =>{\n    return{\n        type: CLEAR_PODCAST\n    }\n}\n\nexport const setError = (err) =>{\n    return {\n        type: SET_ERROR,\n        payload: err\n    }\n}\n\nexport const clearError = () =>{\n    return{\n        type: CLEAR_ERROR\n    }\n}\n\nexport const setUser = async (type, email, password) =>{\n    const res = await fetch(baseUrl + `/${type.toLowerCase()}/login`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          },\n        body: JSON.stringify({email, password})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    localStorage.setItem(\"token\", data.token)\n    // document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const signupUser = async (type, email, password, firstName, lastName) =>{\n    const res = await fetch(baseUrl + `/${type.toLowerCase()}/signup`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password, firstName, lastName})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    localStorage.setItem(\"token\", data.token)\n    //document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const removeUser = () =>{\n    localStorage.setItem(\"token\", \"\")\n    return {\n        type: REMOVE_USER,\n        payload: {}\n    }\n}\n\nexport const setMyPodcasts = async ()=>{\n    const res = await fetch(baseUrl + `/podcaster/podcasts/mypodcasts`,{\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        mode: \"cors\"\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n\n}\n\nexport const clearMyPodcasts = () =>{\n    return {\n        type: CLEAR_MYPODCASTS\n    }\n}\n\nexport const setNewPodcast = async (rssFeedUrl)=>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/new\", {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({rssFeedUrl})\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n}\n\nexport const setMediaUrl = (mediaurl) =>{\n    return{\n        type: SET_MEDIAURL,\n        payload: mediaurl\n    }\n}\n\nexport const clearMediaUrl = () =>{\n    return{\n        type: CLEAR_MEDIAURL\n    }\n}\n\nexport const createNewTranscriptJob = async (mediaLink, podcastId, speakerNames, title) =>{\n    const res = await fetch(baseUrl + `/podcaster/podcasts/${podcastId}/newjob`, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            mediaUrl: mediaLink,\n            speakerNames,\n            title\n        })\n    })\n    const data = await res.json();\n    if(!data.msg === \"starting\"){\n        return{\n            type: SET_ERROR,\n            payload: \"There was a problem processing this transcription. Please try again later\"\n        }\n    }\n    // const res2 = await fetch(baseUrl + `/podcaster/podcast/${podcastId}`)\n    // const data2 = res2.json()\n    // return{type: GET_PODCAST, payload: data2}\n    return data.id\n    \n}\n\nexport const getTranscripts = async() =>{\n    const res = await fetch(baseUrl + \"/transcriber/openprojects\", {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearTranscripts = () =>{\n    return{\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const getEditorData = async (id) =>{\n    const res = await fetch(baseUrl + \"/transcriber/transcription/\" + id, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if(data.msg){\n        return{\n            type: SET_ERROR,\n            payload: data.msg\n        }\n    }\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: GET_EDITORDATA,\n        payload: data}\n}\n\nexport const clearEditorData = () =>{\n    return{\n        type: CLEAR_EDITORDATA,\n    }\n}\n\nexport const updateWordArr = () =>{\n    return{\n        type: UPDATE_WORDARR\n    }\n}\n\nexport const updateAudioIsLoaded = (val) =>{\n    return{\n        type: UPDATE_AUDIOISLOADED,\n        payload: val\n    }\n}\n\nexport const updateSections = (val) =>{\n    return{\n        type: UPDATE_SECTIONS,\n        payload: val\n    }\n}\n\nexport const clearSections = () =>{\n    return{\n        type: CLEAR_SECTIONS\n    }\n}\n\nexport const getALlPodcasts = async (pageNum) =>{\n    const res = await fetch(baseUrl + \"/researcher/researching/allPodcasts/\" + pageNum, {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return{\n        type: SET_PODCASTDISPLAY,\n        payload: data\n    }\n}\n\nexport const getPendingTranscripts = async () =>{\n    const res = await fetch(baseUrl + \"/podcaster/podcasts/pendingJobs\", {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearPendingTranscripts = () =>{\n    return {\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const approveTranscript = async (id) =>{\n    const res = await fetch(baseUrl + \"/podcaster/approveReject/\" + id, {\n        method: \"POST\",\n        headers:{\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({msg: \"Approve\"})\n    })\n    const data = await res.json()\n    return data\n}\n\nexport const rejectTranscript = async (id) =>{\n    const res = await fetch(baseUrl + \"/podcaster/approveReject/\" + id, {\n        method: \"POST\",\n        headers:{\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({msg: \"Reject\"})\n    })\n    const data = await res.json()\n    return data\n}\n\nexport const getTranscriptsForPodcast = async (id) =>{\n    const res = await fetch(baseUrl + \"/researcher/researching/allEpisodes/\" + id, {\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n    })\n    const data = await res.json()\n    if (!Object.keys(data).length){\n        data = {msg: \"Nothing to display\"}\n    }\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearTranscriptsForPodcast = () =>{\n    return {\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const setSpeakers = async (id) => {\n    const res = await fetch(baseUrl + \"/transcriber/transcription/\" + id + \"/speakers\")\n    const data = await res.json()\n    const speakers = []\n    data.speakers.forEach(el=>speakers.push(el.name))\n    return{\n        type: SET_SPEAKERS,\n        payload: speakers\n    }\n}\n\nexport const addSpeaker = (speaker) => {\n    return{\n        type: ADD_SPEAKER,\n        payload: speaker\n    }\n}\n\nexport const deleteSpeaker = (speaker) => {\n    return{\n        type: DELETE_SPEAKER,\n        payload: speaker\n    }\n}\n\nexport const saveSpeakers = async (id, speakers) => {\n    const res = await fetch(baseUrl + \"/transcriber/transcription/\" + id + \"/speakers\", {\n        method: \"POST\",\n        headers:{\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({speakers})\n    })\n    return{\n        type: SAVE_SPEAKERS,\n    }\n}\n\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js",["275"],"import {createStore, applyMiddleware, combineReducers, compose} from \"redux\"\n\nimport {podcastDisplayReducer, errorReducer, userReducer, myPodcastsReducer, mediaUrlReducer, transcriptsReducer, editorReducer, updateWordArrReducer,\n    updateAudioIsLoadedReducer, sectionsReducer, speakerReducer} from \"./reducers\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer = combineReducers({podcastDisplay: podcastDisplayReducer, user: userReducer, error: errorReducer, myPodcasts: myPodcastsReducer, mediaUrl: mediaUrlReducer,\n    transcripts: transcriptsReducer, editorData: editorReducer, updateWordArr: updateWordArrReducer, updateAudioIsLoaded: updateAudioIsLoadedReducer,\n    sections: sectionsReducer, speakers: speakerReducer})\n\nconst configureStore = initialState =>{\n    return createStore(reducer, initialState, composeEnhancers())\n}\n\nexport const store = configureStore({})\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js",[],["276","277"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js",["278","279"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js",["280","281","282","283","284","285","286","287"],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SpeakerBox from \"./SpeakerBox\"\nimport {createNewTranscriptJob} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\";\nimport {clearMediaUrl} from \"../../Store/actions\"\nimport SpeakerDisplay from \"../../Displays/AddOrRemoveSpeakers/AddOrRemoveSpeakers\"\n\nconst NewTranscriptForm = (props) =>{\n    const {id, title} = useParams()\n    const dispatch = useDispatch()\n    const mediaUrl = useSelector(state=>state.mediaUrl)\n    const history = useHistory()\n    const [speakerSections, setSpeakerSections] = useState([\"item\"])\n    const [loading, setLoading] = useState(false)\n    const transcriptId = useSelector(state=>state.mediaUrl)\n\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearMediaUrl())\n        }\n    },[])\n    \n\n    const submit = () =>{\n        setLoading(true)\n        history.goBack()\n    }\n\n\n\n    return(\n        <div className=\"speakerNameForm\">\n            <SpeakerDisplay id={transcriptId} />\n            <br/>\n            {loading ?  <button key={101}>Pending</button> : <button key={102} onClick={submit}>Submit</button>}\n        </div>\n        \n    )\n}\n\nexport default NewTranscriptForm","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js",["288","289"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {getTranscripts, clearTranscripts} from \"../../../Store/actions\"\nimport EpisodeDisplay from \"../../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst TranscriptDisplay = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getTranscripts()\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearTranscripts())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcriber/transcribe/\" + id)\n        }\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        // return(\n        //     <div className=\"TranscriptPage\">\n        //         {stateTranscripts.map((el, i)=>{\n        //             return(<div className=\"neededTranscript\" key={i} onClick={createClickFunction(el.id)}>\n        //                 <h4>{el.title}</h4>\n        //                 <p>From: {el.podcastName}</p>\n        //             </div>)\n        //         })}\n        //     </div>\n        // )\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcriber/transcribe\"} title={\"Open Jobs\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default TranscriptDisplay","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js",["290","291"],"import {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {updateAudioIsLoaded} from \"../../Store/actions\"\n\nconst useAudioPlayer = (podcast, keepWithTime, editorMode, setEditorMode) =>{\n    const dispatch = useDispatch()\n    //const [length, setLegth] = useState(podcast.length);\n    const [length, setLegth] = useState(0);\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState(0);\n\n    const makeSetAudioVolume = (audio) => (num) =>{\n        audio.volume = num/100\n    }\n\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(audio.currentTime);\n        }\n\n        const setAudioTime = () => {\n            setCurrentTime(audio.currentTime);\n            //\n        }\n\n        const spaceToPause = (e) =>{\n            if(e.key === \" \" && editorMode === 0){\n                setPlaying(!playing)\n            }\n        }\n\n        const pause = () =>{\n            setPlaying(false)\n        }\n\n        const enterToChangeEditorMode = (e) => {\n            if(e.key === \"Enter\"){\n                if(editorMode === 0){\n                    setPlaying(false)\n                    setEditorMode(1)\n                } else{\n                    setPlaying(true)\n                    setEditorMode(0)\n                }\n            }\n        }\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", keepWithTime);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n        audio.addEventListener(\"ended\", pause)\n        document.querySelector(\"body\").addEventListener(\"keypress\", spaceToPause)\n        document.querySelector(\"body\").addEventListener(\"keypress\", enterToChangeEditorMode)\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n\n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n            audio.removeEventListener(\"timeupdate\", keepWithTime)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", spaceToPause)\n            audio.removeEventListener(\"ended\", pause)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", enterToChangeEditorMode)\n        }\n    });\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(0);\n        }\n        audio.currentTime = 0;\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n        }\n    }, [podcast]);\n\n\n    return{\n        currentTime,\n        length,\n        playing,\n        setPlaying,\n        setClickedTime,\n        makeSetAudioVolume,\n    }\n}\n\nexport default useAudioPlayer;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js",["292"],"import React, { useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\n\nconst Volume = (props) =>{\n    const [value, setValue] = React.useState(50);\n    \n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    useEffect(()=>{\n        props.makeSetAudioVolume(document.getElementById(\"audio\"))(value)\n    },[value])\n    \n    return (\n        <div className=\"AudioPlayer__VolumeDiv\">\n            <VolumeDown />\n            <Slider value={value} onChange={handleChange} aria-labelledby=\"Volume slider\" />\n            <VolumeUp />\n        </div>\n        )\n}\n\nexport default Volume;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js",["293"],"import React from \"react\";\nimport Length from \"./Length\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\n\nconst Bar = (props) =>{\n    const setClickedTime = (e) =>{\n        const bar = document.querySelector(\".AudioPlayer__TimeSlider\").getBoundingClientRect();\n        const percent = ((e.pageX - bar.left) / bar.width);\n        \n        props.setClickedTime(Math.floor(props.length * percent))\n    }\n\n\n    const PrettoSlider = withStyles({\n        root: {\n          color: '#1cb3ff',\n          height: 8,\n        },\n        thumb: {\n          height: 17,\n          width: 17,\n          backgroundColor: '#1cb3ff',\n          border: '2px solid currentColor',\n          marginTop: -4,\n          marginLeft: -12,\n          '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n          },\n        },\n        active: {},\n        valueLabel: {\n          left: 'calc(-50% + 4px)',\n        },\n        track: {\n          height: 8,\n          borderRadius: 4,\n        },\n        rail: {\n          height: 8,\n          borderRadius: 4,\n        },\n      })(Slider);\n    return (\n        <div className=\"AudioPlayer__Section AudioPlayer__LengthAndBar\">\n            <div className=\"AudioPlayer__LengthContainer\">\n                <Length length={props.length} currentTime={props.currentTime} />\n            </div>\n            <div onClick={setClickedTime} className=\"AudioPlayer__BarContainer\">\n                <PrettoSlider className={\"AudioPlayer__TimeSlider\"}  value={(props.currentTime/props.length) *100} />\n            </div>\n    </div>\n    )\n}\n\nexport default Bar;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js",[],["294","295"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/AllPodcasts/AllPodcastsWrapper.js",["296"],"import React, {useEffect, useState} from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {getALlPodcasts, clearPodcast} from \"../../Store/actions\"\nimport PodcastDisplay from \"../../Displays/PodcastDisplay/PodcastDisplay\"\n\nconst AllPodcastWrapper = (props) =>{\n    const [toDisplay, setToDisplay] = useState([])\n    const dispatch = useDispatch()\n    const podcastDisplay = useSelector(state=>state.myPodcasts)\n\n    useEffect(()=>{\n        const prom = getALlPodcasts(0)\n        prom.then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    useEffect(()=>{\n        setToDisplay(podcastDisplay)\n        \n    }, [podcastDisplay])\n\n    if(toDisplay.msg){\n        return <h4>{toDisplay.msg}</h4>\n    }\n\n    if(!toDisplay.results || !toDisplay.results.length){\n        return(\n            <p>Loading</p>\n        )\n    }\n\n    return(\n        <PodcastDisplay clickStub={\"/podcasts\"} podcasts={podcastDisplay} />\n    )\n\n}\n\nexport default AllPodcastWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/PodcastDisplay/PodcastDisplay.js",["297","298","299","300"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/EpisodeDisplay/EpisodeDisplay.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/WrapperTranscriptViewer.js",["301"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport TranscriptViewer from \"./TranscriptView\"\nimport {getEditorData, clearEditorData} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst ViewerWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <TranscriptViewer data={stateEditorData} speakerOptions={editorData.transcript.Speakers} />\n    )\n}\n\n\nexport default ViewerWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/TranscriptView.js",["302","303","304","305","306","307","308","309","310","311","312","313","314"],"import React, { useEffect, useState } from \"react\"\nimport AudioPlayerWrapper from \"./AudioPlayer/AudioPlayerWrapper\"\nimport Text from \"./Text/Text\"\nimport SpeakerSection from \"./SpeakerSection/SpeakerSection\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {updateAudioIsLoaded} from \"../Store/actions\"\nimport { useHistory, useParams } from \"react-router\"\nimport { TextsmsTwoTone } from \"@material-ui/icons\"\n\nconst TranscriptViewer = (props) =>{\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const {data, speakerOptions} = props\n    const words = data.data\n    const updateWordArr = useSelector(state=>state.updateWordArr)\n    const updateAudioIsLoadedSLice = useSelector(state=>state.updateAudioIsLoaded)\n\n    const [sections, setSections] = useState([])\n    const [wordIndex, setWordIndex] = useState([])\n    const [allWords, setAllWords] = useState([])\n    const [editorMode, setEditorMode] = useState(0)\n    const [openLocalTextMenu, setOpenLocalTextMenu] = useState(false)\n    const [moveSelected, setMoveSelected] = useState(0)\n    const [submitting, setSubmitting] = useState(false)\n\n    //On mount, set up sections\n    useEffect(()=>{\n        const tempSections = []\n        let tempSection = []\n        let currentSpeaker = words[0].speaker\n        for(let i = 0; i < words.length; i++){\n            const word = words[i]\n            if(word.speaker !== currentSpeaker){\n                tempSections.push(tempSection)\n                tempSection = []\n                currentSpeaker = word.speaker\n            }\n            tempSection.push(word)\n            \n\n        }\n        tempSections.push(tempSection)\n        setSections(tempSections)\n    }, [])\n\n\n\n    //updates the word index for near constant lookup times\n    useEffect(()=>{\n        const words = document.querySelectorAll(\".Editor__Word\")\n        const tempWordIndex = []\n        const tempAllWords = []\n        for(let i = 0; i < words.length; i ++){\n            let secondIndex = Math.floor(words[i].getAttribute(\"starttime\")/10)\n            if(!tempWordIndex[secondIndex]){\n                tempWordIndex[secondIndex] = []\n            }\n            words[i].setAttribute(\"totalwordindex\", i)\n            tempWordIndex[secondIndex].push(words[i])\n            tempAllWords.push(words[i])\n        }\n        setWordIndex(tempWordIndex)\n        setAllWords(tempAllWords)\n\n\n    }, [updateWordArr])\n\n\n    //this function needs to be threaded through so that it can find audio\n    const keepWithTime = (e) =>{\n        const selected = document.querySelectorAll(\".Editor__SelectedWord\")\n        //testcomment\n        selected.forEach(el=>el.classList.remove(\"Editor__SelectedWord\"))\n\n        const currentTime = (Math.floor(e.target.currentTime * 100)) / 100\n        let currentIndex = Math.floor(currentTime/10)\n        let wordsAtSecond = wordIndex[currentIndex]\n        //finds words at the second prior if any\n        let currentWord\n\n        while(!wordsAtSecond && currentIndex >= 0){\n            currentIndex -= 1;\n            wordsAtSecond = wordIndex[currentIndex]\n        }\n        //only true if going negative\n        if(!wordsAtSecond){\n            return\n        }\n\n        for(let i = 0; i < wordsAtSecond.length; i++){\n            currentWord = wordsAtSecond[i]\n            if(currentWord.getAttribute(\"endtime\") > currentTime){\n                break\n            }\n        }\n        currentWord.classList.add(\"Editor__SelectedWord\")\n    }\n\n\n    useEffect(()=>{\n        const moveSelectorWord = (e) =>{\n            if(editorMode === 0 && !document.getElementById(\"audio\").paused){\n                return\n            }\n            if(e.key === \"ArrowRight\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) + 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            } else if(e.key === \"ArrowLeft\"){\n                const selected = document.querySelector(\".Editor__SelectedWord\")\n                selected.classList.remove(\"Editor__SelectedWord\")\n                allWords[parseInt(selected.getAttribute(\"totalwordindex\")) - 1].classList.add(\"Editor__SelectedWord\")\n                setMoveSelected(moveSelected+1)\n            }\n        }\n\n        document.querySelector(\"body\").addEventListener(\"keydown\", moveSelectorWord)\n\n        return () => {\n            document.querySelector(\"body\").removeEventListener(\"keydown\", moveSelectorWord)\n        }\n\n    })\n\n\n\n\n    return(\n        <div className=\"editorPage\" id=\"editorPage\">\n            <h2 className=\"Editor__Title\">{data.transcript.title}</h2>\n            <AudioPlayerWrapper keepWithTime={keepWithTime} />\n            {sections.map((el, i) => {\n                return(\n                    <div className=\"section\" key={i}>\n                        <SpeakerSection number={i} speaker={el[0].speaker} sections={sections} />\n                        <Text text={el} speaker={el[0].speaker} specialKey={i} />\n                    </div>\n                )\n            })}\n            <br />\n            <br />\n        </div>\n    )\n\n}\n\nexport default TranscriptViewer","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/Text/Text.js",["315","316","317"],"import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport {updateWordArr} from \"../../Store/actions\"\n\n\nconst Text = (props) =>{\n    const dispatch = useDispatch()\n    const {text, specialKey, speaker} = props\n    const editorMode = props.editorMode === 2\n    \n\n    //tell the editor to get the word arrs\n    useEffect(()=>{\n        dispatch(updateWordArr())\n    }, [])\n\n    \n\n    return(\n        <>\n        <div>\n            {text.map((el, i) =>{\n                return <span className=\"Editor__Word\" speaker={el.speaker} starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n            })}\n    </div>\n    </> \n    )\n}\n\nexport default Text","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/SpeakerSection/SpeakerSection.js",["318","319","320","321","322"],"import React, { useEffect, useState } from \"react\";\n\nconst SpeakerSection = (props) =>{\n    const speakerName = props.speaker\n    const stateUpdater = props.stateUpdater\n    const number = props.number\n    const sections = props.sections\n    const changeSectionSpeaker = props.changeSectionSpeaker\n\n\n    return(\n        <>\n        <div className=\"speakerSecontion\" id={`speakerSection${number}`}>\n            {speakerName + \":\"}\n        </div>\n        </>\n    )\n}\n\nexport default SpeakerSection","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Volume.js",["323"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Controls.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Bar.js",["324"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/useAudioPlayer.js",["325","326"],"import {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {updateAudioIsLoaded} from \"../../Store/actions\"\n\nconst useAudioPlayer = (podcast, keepWithTime, editorMode, setEditorMode) =>{\n    const dispatch = useDispatch()\n    //const [length, setLegth] = useState(podcast.length);\n    const [length, setLegth] = useState(0);\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState(0);\n\n    const makeSetAudioVolume = (audio) => (num) =>{\n        audio.volume = num/100\n    }\n\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        //dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(audio.currentTime);\n        }\n\n        const setAudioTime = () => {\n            setCurrentTime(audio.currentTime);\n            //\n        }\n\n        const spaceToPause = (e) =>{\n            if(e.key === \" \"){\n                setPlaying(!playing)\n            }\n        }\n\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", keepWithTime);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n        document.querySelector(\"body\").addEventListener(\"keypress\", spaceToPause)\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n            audio.removeEventListener(\"timeupdate\", keepWithTime)\n            document.querySelector(\"body\").removeEventListener(\"keypress\", spaceToPause)\n        }\n    });\n\n    useEffect(()=>{\n        const audio = document.getElementById(\"audio\");\n        if(!audio){\n            return\n        }\n        dispatch(updateAudioIsLoaded(true))\n\n        const setAudioData = () =>{\n            setLegth(audio.duration);\n            setCurrentTime(0);\n        }\n        audio.currentTime = 0;\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n        audio.addEventListener(\"loadeddata\", setAudioData);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        if(playing){\n            audio.play();\n        } else{\n            audio.pause()\n        };\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n          } \n\n        return ()=>{\n            audio.removeEventListener(\"loadeddata\", setAudioData);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n        }\n    }, [podcast]);\n\n\n    return{\n        currentTime,\n        length,\n        playing,\n        setPlaying,\n        setClickedTime,\n        makeSetAudioVolume,\n    }\n}\n\nexport default useAudioPlayer;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/TranscriptViewer/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/config.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PendingTranscripts/PendingTranscripts.js",["327","328"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {getPendingTranscripts, clearPendingTranscripts} from \"../../Store/actions\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst PendingTranscripts = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getPendingTranscripts()\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearPendingTranscripts())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcriber/transcribe/\" + id)\n        }\n    }\n\n    if(stateTranscripts.msg){\n        return <h4>{stateTranscripts.msg}</h4>\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcriber/transcribe\"} title={\"Open Jobs\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default PendingTranscripts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/PodcastTranscripts/PodcastTranscripts.js",["329","330"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory, useParams } from \"react-router\"\nimport {getTranscriptsForPodcast, clearTranscriptsForPodcast} from \"../../Store/actions\"\nimport EpisodeDisplay from \"../../Displays/EpisodeDisplay/EpisodeDisplay\"\n\nconst PodcastTranscripts = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const {id} = useParams()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getTranscriptsForPodcast(id)\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearTranscriptsForPodcast())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcription/\" + id)\n        }\n    }\n\n    if(stateTranscripts.msg){\n        return <h4>{stateTranscripts.msg}</h4>\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        return(\n            <EpisodeDisplay episodes={transcripts} clickStub={\"/transcript\"} title={\"Transcripts\"} transcribeButton={false} />\n        )\n    }\n}\n\nexport default PodcastTranscripts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Displays/AddOrRemoveSpeakers/AddOrRemoveSpeakers.js",["331","332"],"import React, { useEffect, useState } from \"react\"\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {saveSpeakers, deleteSpeaker, addSpeaker, setSpeakers} from \"../../Store/actions\"\n\nconst AddOrRemoveSpeakers = (props) =>{\n    const speakers = useSelector(state=>state.speakers)\n    const dispatch = useDispatch()\n    const {id} = props\n    const [adding, setAdding] = useState(false)\n    const [newSpeaker, setNewSpeaker] = useState(\"\")\n    const [stateSpeakers, setSpeakers] = useState(speakers)\n\n    const createRemoveFunction = (speakerName) =>{\n        return ()=>{\n            dispatch(deleteSpeaker(speakerName))\n        }\n    }\n\n    const changeAdding = () => setAdding(true)\n\n    const handleTyping = e => setNewSpeaker(e.target.value)\n\n    const saveSpeaker = e => {\n        dispatch(addSpeaker(newSpeaker))\n        setNewSpeaker(\"\")\n    }\n\n    useEffect(()=>{\n        return ()=>{\n            saveSpeakers(id, speakers)\n        }\n    }, [speakers])\n\n    useEffect(()=>{\n        setSpeakers(speakers)\n    }, [speakers])\n\n\n    return(\n        <div className=\"speakerEdit\">\n            {stateSpeakers.map((el, i)=>{\n                return(<div className=\"speakerSection\">\n                <TextField id={`speaker ${i}`} type=\"text\" value={speakers[i]} disabled label=\"Speaker\" />\n                <Button variant=\"contained\" className=\"submitButton\" onClick={createRemoveFunction(el)}>Remove</Button>\n                </div>)\n            })}\n            {adding ? <div className=\"speakerSection\">\n                <TextField onChange={handleTyping} type=\"text\" label={\"Add Speaker\"} id=\"addSpeakerInput\" value={newSpeaker} />\n                    <Button className=\"saveSpeaker\" onClick={saveSpeaker} variant=\"contained\" >Save Speaker </Button>\n                    </div>\n                 : <Button className=\"addSpeaker\" onClick={changeAdding} variant=\"contained\">Add Speaker </Button>}\n        </div>\n    )\n}\n\nexport default AddOrRemoveSpeakers","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/AboutPage/AboutPage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/HelpPage/HelpPage.js",[],{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","severity":1,"message":"338","line":12,"column":8,"nodeType":"339","messageId":"340","endLine":12,"endColumn":20},{"ruleId":"337","severity":1,"message":"341","line":13,"column":8,"nodeType":"339","messageId":"340","endLine":13,"endColumn":22},{"ruleId":"342","severity":1,"message":"343","line":52,"column":5,"nodeType":"344","endLine":52,"endColumn":7,"suggestions":"345"},{"ruleId":"337","severity":1,"message":"346","line":19,"column":12,"nodeType":"339","messageId":"340","endLine":19,"endColumn":27},{"ruleId":"337","severity":1,"message":"347","line":20,"column":12,"nodeType":"339","messageId":"340","endLine":20,"endColumn":28},{"ruleId":"337","severity":1,"message":"348","line":21,"column":12,"nodeType":"339","messageId":"340","endLine":21,"endColumn":26},{"ruleId":"337","severity":1,"message":"349","line":25,"column":12,"nodeType":"339","messageId":"340","endLine":25,"endColumn":22},{"ruleId":"342","severity":1,"message":"350","line":36,"column":8,"nodeType":"344","endLine":36,"endColumn":14,"suggestions":"351"},{"ruleId":"342","severity":1,"message":"343","line":46,"column":8,"nodeType":"344","endLine":46,"endColumn":10,"suggestions":"352"},{"ruleId":"337","severity":1,"message":"353","line":1,"column":8,"nodeType":"339","messageId":"340","endLine":1,"endColumn":13},{"ruleId":"337","severity":1,"message":"349","line":27,"column":12,"nodeType":"339","messageId":"340","endLine":27,"endColumn":22},{"ruleId":"342","severity":1,"message":"350","line":38,"column":8,"nodeType":"344","endLine":38,"endColumn":14,"suggestions":"354"},{"ruleId":"342","severity":1,"message":"343","line":48,"column":8,"nodeType":"344","endLine":48,"endColumn":10,"suggestions":"355"},{"ruleId":"342","severity":1,"message":"356","line":22,"column":7,"nodeType":"344","endLine":22,"endColumn":9,"suggestions":"357"},{"ruleId":"337","severity":1,"message":"358","line":6,"column":9,"nodeType":"339","messageId":"340","endLine":6,"endColumn":28},{"ruleId":"337","severity":1,"message":"359","line":8,"column":10,"nodeType":"339","messageId":"340","endLine":8,"endColumn":24},{"ruleId":"337","severity":1,"message":"360","line":15,"column":11,"nodeType":"339","messageId":"340","endLine":15,"endColumn":19},{"ruleId":"337","severity":1,"message":"361","line":20,"column":11,"nodeType":"339","messageId":"340","endLine":20,"endColumn":35},{"ruleId":"337","severity":1,"message":"362","line":27,"column":12,"nodeType":"339","messageId":"340","endLine":27,"endColumn":29},{"ruleId":"337","severity":1,"message":"363","line":27,"column":31,"nodeType":"339","messageId":"340","endLine":27,"endColumn":51},{"ruleId":"342","severity":1,"message":"364","line":50,"column":8,"nodeType":"344","endLine":50,"endColumn":10,"suggestions":"365"},{"ruleId":"342","severity":1,"message":"343","line":106,"column":8,"nodeType":"344","endLine":106,"endColumn":10,"suggestions":"366"},{"ruleId":"337","severity":1,"message":"367","line":16,"column":11,"nodeType":"339","messageId":"340","endLine":16,"endColumn":33},{"ruleId":"342","severity":1,"message":"368","line":39,"column":8,"nodeType":"344","endLine":39,"endColumn":10,"suggestions":"369"},{"ruleId":"333","replacedBy":"370"},{"ruleId":"335","replacedBy":"371"},{"ruleId":"337","severity":1,"message":"372","line":1,"column":10,"nodeType":"339","messageId":"340","endLine":1,"endColumn":21},{"ruleId":"373","severity":1,"message":"374","line":199,"column":9,"nodeType":"339","messageId":"375","endLine":199,"endColumn":13},{"ruleId":"373","severity":1,"message":"374","line":227,"column":9,"nodeType":"339","messageId":"375","endLine":227,"endColumn":13},{"ruleId":"373","severity":1,"message":"374","line":274,"column":9,"nodeType":"339","messageId":"375","endLine":274,"endColumn":13},{"ruleId":"373","severity":1,"message":"374","line":290,"column":9,"nodeType":"339","messageId":"375","endLine":290,"endColumn":13},{"ruleId":"373","severity":1,"message":"374","line":338,"column":9,"nodeType":"339","messageId":"375","endLine":338,"endColumn":13},{"ruleId":"337","severity":1,"message":"376","line":378,"column":11,"nodeType":"339","messageId":"340","endLine":378,"endColumn":14},{"ruleId":"337","severity":1,"message":"377","line":1,"column":22,"nodeType":"339","messageId":"340","endLine":1,"endColumn":37},{"ruleId":"333","replacedBy":"378"},{"ruleId":"335","replacedBy":"379"},{"ruleId":"342","severity":1,"message":"343","line":22,"column":7,"nodeType":"344","endLine":22,"endColumn":9,"suggestions":"380"},{"ruleId":"337","severity":1,"message":"381","line":41,"column":11,"nodeType":"339","messageId":"340","endLine":41,"endColumn":31},{"ruleId":"337","severity":1,"message":"382","line":3,"column":8,"nodeType":"339","messageId":"340","endLine":3,"endColumn":18},{"ruleId":"337","severity":1,"message":"383","line":4,"column":9,"nodeType":"339","messageId":"340","endLine":4,"endColumn":31},{"ruleId":"337","severity":1,"message":"384","line":10,"column":12,"nodeType":"339","messageId":"340","endLine":10,"endColumn":14},{"ruleId":"337","severity":1,"message":"385","line":10,"column":16,"nodeType":"339","messageId":"340","endLine":10,"endColumn":21},{"ruleId":"337","severity":1,"message":"386","line":12,"column":11,"nodeType":"339","messageId":"340","endLine":12,"endColumn":19},{"ruleId":"337","severity":1,"message":"387","line":14,"column":12,"nodeType":"339","messageId":"340","endLine":14,"endColumn":27},{"ruleId":"337","severity":1,"message":"388","line":14,"column":29,"nodeType":"339","messageId":"340","endLine":14,"endColumn":47},{"ruleId":"342","severity":1,"message":"343","line":23,"column":7,"nodeType":"344","endLine":23,"endColumn":9,"suggestions":"389"},{"ruleId":"342","severity":1,"message":"343","line":20,"column":7,"nodeType":"344","endLine":20,"endColumn":9,"suggestions":"390"},{"ruleId":"337","severity":1,"message":"391","line":26,"column":11,"nodeType":"339","messageId":"340","endLine":26,"endColumn":30},{"ruleId":"342","severity":1,"message":"392","line":18,"column":5,"nodeType":"339","endLine":18,"endColumn":14,"suggestions":"393"},{"ruleId":"342","severity":1,"message":"394","line":119,"column":8,"nodeType":"344","endLine":119,"endColumn":17,"suggestions":"395"},{"ruleId":"342","severity":1,"message":"396","line":14,"column":7,"nodeType":"344","endLine":14,"endColumn":14,"suggestions":"397"},{"ruleId":"337","severity":1,"message":"398","line":3,"column":22,"nodeType":"339","messageId":"340","endLine":3,"endColumn":32},{"ruleId":"333","replacedBy":"399"},{"ruleId":"335","replacedBy":"400"},{"ruleId":"342","severity":1,"message":"343","line":17,"column":8,"nodeType":"344","endLine":17,"endColumn":10,"suggestions":"401"},{"ruleId":"337","severity":1,"message":"402","line":7,"column":40,"nodeType":"339","messageId":"340","endLine":7,"endColumn":54},{"ruleId":"337","severity":1,"message":"403","line":8,"column":21,"nodeType":"339","messageId":"340","endLine":8,"endColumn":31},{"ruleId":"337","severity":1,"message":"404","line":11,"column":12,"nodeType":"339","messageId":"340","endLine":11,"endColumn":25},{"ruleId":"337","severity":1,"message":"405","line":11,"column":27,"nodeType":"339","messageId":"340","endLine":11,"endColumn":43},{"ruleId":"342","severity":1,"message":"356","line":18,"column":7,"nodeType":"344","endLine":18,"endColumn":9,"suggestions":"406"},{"ruleId":"337","severity":1,"message":"358","line":6,"column":9,"nodeType":"339","messageId":"340","endLine":6,"endColumn":28},{"ruleId":"337","severity":1,"message":"359","line":8,"column":10,"nodeType":"339","messageId":"340","endLine":8,"endColumn":24},{"ruleId":"337","severity":1,"message":"407","line":11,"column":11,"nodeType":"339","messageId":"340","endLine":11,"endColumn":18},{"ruleId":"337","severity":1,"message":"360","line":12,"column":11,"nodeType":"339","messageId":"340","endLine":12,"endColumn":19},{"ruleId":"337","severity":1,"message":"408","line":13,"column":12,"nodeType":"339","messageId":"340","endLine":13,"endColumn":24},{"ruleId":"337","severity":1,"message":"409","line":14,"column":18,"nodeType":"339","messageId":"340","endLine":14,"endColumn":32},{"ruleId":"337","severity":1,"message":"361","line":17,"column":11,"nodeType":"339","messageId":"340","endLine":17,"endColumn":35},{"ruleId":"337","severity":1,"message":"410","line":22,"column":24,"nodeType":"339","messageId":"340","endLine":22,"endColumn":37},{"ruleId":"337","severity":1,"message":"362","line":23,"column":12,"nodeType":"339","messageId":"340","endLine":23,"endColumn":29},{"ruleId":"337","severity":1,"message":"363","line":23,"column":31,"nodeType":"339","messageId":"340","endLine":23,"endColumn":51},{"ruleId":"337","severity":1,"message":"411","line":25,"column":12,"nodeType":"339","messageId":"340","endLine":25,"endColumn":22},{"ruleId":"337","severity":1,"message":"412","line":25,"column":24,"nodeType":"339","messageId":"340","endLine":25,"endColumn":37},{"ruleId":"342","severity":1,"message":"364","line":45,"column":8,"nodeType":"344","endLine":45,"endColumn":10,"suggestions":"413"},{"ruleId":"337","severity":1,"message":"414","line":8,"column":30,"nodeType":"339","messageId":"340","endLine":8,"endColumn":37},{"ruleId":"337","severity":1,"message":"415","line":9,"column":11,"nodeType":"339","messageId":"340","endLine":9,"endColumn":21},{"ruleId":"342","severity":1,"message":"343","line":15,"column":8,"nodeType":"344","endLine":15,"endColumn":10,"suggestions":"416"},{"ruleId":"337","severity":1,"message":"417","line":1,"column":17,"nodeType":"339","messageId":"340","endLine":1,"endColumn":26},{"ruleId":"337","severity":1,"message":"418","line":1,"column":28,"nodeType":"339","messageId":"340","endLine":1,"endColumn":36},{"ruleId":"337","severity":1,"message":"419","line":5,"column":11,"nodeType":"339","messageId":"340","endLine":5,"endColumn":23},{"ruleId":"337","severity":1,"message":"420","line":7,"column":11,"nodeType":"339","messageId":"340","endLine":7,"endColumn":19},{"ruleId":"337","severity":1,"message":"421","line":8,"column":11,"nodeType":"339","messageId":"340","endLine":8,"endColumn":31},{"ruleId":"342","severity":1,"message":"396","line":14,"column":7,"nodeType":"344","endLine":14,"endColumn":14,"suggestions":"422"},{"ruleId":"337","severity":1,"message":"398","line":3,"column":22,"nodeType":"339","messageId":"340","endLine":3,"endColumn":32},{"ruleId":"342","severity":1,"message":"423","line":18,"column":5,"nodeType":"339","endLine":18,"endColumn":14,"suggestions":"424"},{"ruleId":"342","severity":1,"message":"394","line":99,"column":8,"nodeType":"344","endLine":99,"endColumn":17,"suggestions":"425"},{"ruleId":"342","severity":1,"message":"343","line":20,"column":7,"nodeType":"344","endLine":20,"endColumn":9,"suggestions":"426"},{"ruleId":"337","severity":1,"message":"391","line":26,"column":11,"nodeType":"339","messageId":"340","endLine":26,"endColumn":30},{"ruleId":"342","severity":1,"message":"368","line":21,"column":7,"nodeType":"344","endLine":21,"endColumn":9,"suggestions":"427"},{"ruleId":"337","severity":1,"message":"391","line":27,"column":11,"nodeType":"339","messageId":"340","endLine":27,"endColumn":30},{"ruleId":"337","severity":1,"message":"428","line":5,"column":50,"nodeType":"339","messageId":"340","endLine":5,"endColumn":61},{"ruleId":"342","severity":1,"message":"429","line":34,"column":8,"nodeType":"344","endLine":34,"endColumn":18,"suggestions":"430"},"no-native-reassign",["431"],"no-negated-in-lhs",["432"],"no-unused-vars","'PodcasterNav' is defined but never used.","Identifier","unusedVar","'TranscriberNav' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["433"],"'researcherLogin' is assigned a value but never used.","'transcriberLogin' is assigned a value but never used.","'podcasterLogin' is assigned a value but never used.","'stateError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ifLoggedInThenRedirect'. Either include it or remove the dependency array.",["434"],["435"],"'React' is defined but never used.",["436"],["437"],"React Hook useEffect has missing dependencies: 'dispatch' and 'transcriptId'. Either include them or remove the dependency array.",["438"],"'updateAudioIsLoaded' is defined but never used.","'TextsmsTwoTone' is defined but never used.","'dispatch' is assigned a value but never used.","'updateAudioIsLoadedSLice' is assigned a value but never used.","'openLocalTextMenu' is assigned a value but never used.","'setOpenLocalTextMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'words'. Either include it or remove the dependency array.",["439"],["440"],"'createToTranscriptLink' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["441"],["431"],["432"],"'useDispatch' is defined but never used.","no-const-assign","'data' is constant.","const","'res' is assigned a value but never used.","'applyMiddleware' is defined but never used.",["431"],["432"],["442"],"'generateLinkFunction' is assigned a value but never used.","'SpeakerBox' is defined but never used.","'createNewTranscriptJob' is defined but never used.","'id' is assigned a value but never used.","'title' is assigned a value but never used.","'mediaUrl' is assigned a value but never used.","'speakerSections' is assigned a value but never used.","'setSpeakerSections' is assigned a value but never used.",["443"],["444"],"'createClickFunction' is assigned a value but never used.","React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode] as a second argument to the useEffect Hook.",["445"],"React Hook useEffect has missing dependencies: 'clickedTime', 'currentTime', 'dispatch', and 'playing'. Either include them or remove the dependency array.",["446"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["447"],"'makeStyles' is defined but never used.",["431"],["432"],["448"],"'additionOption' is assigned a value but never used.","'totalPages' is assigned a value but never used.","'displayModule' is assigned a value but never used.","'setDisplayModule' is assigned a value but never used.",["449"],"'history' is assigned a value but never used.","'transcriptId' is assigned a value but never used.","'speakerOptions' is assigned a value but never used.","'setEditorMode' is assigned a value but never used.","'submitting' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.",["450"],"'speaker' is assigned a value but never used.","'editorMode' is assigned a value but never used.",["451"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'stateUpdater' is assigned a value but never used.","'sections' is assigned a value but never used.","'changeSectionSpeaker' is assigned a value but never used.",["452"],"React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime] as a second argument to the useEffect Hook.",["453"],["454"],["455"],["456"],"'setSpeakers' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["457"],"no-global-assign","no-unsafe-negation",{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"458","fix":"462"},{"desc":"460","fix":"463"},{"desc":"458","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"458","fix":"469"},{"desc":"470","fix":"471"},{"desc":"458","fix":"472"},{"desc":"458","fix":"473"},{"desc":"458","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"458","fix":"481"},{"desc":"465","fix":"482"},{"desc":"467","fix":"483"},{"desc":"458","fix":"484"},{"desc":"479","fix":"485"},{"desc":"486","fix":"487"},{"desc":"477","fix":"488"},{"desc":"458","fix":"489"},{"desc":"470","fix":"490"},{"desc":"491","fix":"492"},"Update the dependencies array to be: [dispatch]",{"range":"493","text":"494"},"Update the dependencies array to be: [ifLoggedInThenRedirect, user]",{"range":"495","text":"496"},{"range":"497","text":"494"},{"range":"498","text":"496"},{"range":"499","text":"494"},"Update the dependencies array to be: [dispatch, transcriptId]",{"range":"500","text":"501"},"Update the dependencies array to be: [words]",{"range":"502","text":"503"},{"range":"504","text":"494"},"Update the dependencies array to be: [dispatch, id]",{"range":"505","text":"506"},{"range":"507","text":"494"},{"range":"508","text":"494"},{"range":"509","text":"494"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode]",{"range":"510","text":"511"},"Update the dependencies array to be: [clickedTime, currentTime, dispatch, playing, podcast]",{"range":"512","text":"513"},"Update the dependencies array to be: [props, value]",{"range":"514","text":"515"},{"range":"516","text":"494"},{"range":"517","text":"501"},{"range":"518","text":"503"},{"range":"519","text":"494"},{"range":"520","text":"515"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime]",{"range":"521","text":"522"},{"range":"523","text":"513"},{"range":"524","text":"494"},{"range":"525","text":"506"},"Update the dependencies array to be: [id, speakers]",{"range":"526","text":"527"},[2070,2072],"[dispatch]",[1307,1313],"[ifLoggedInThenRedirect, user]",[1475,1477],[1417,1423],[1585,1587],[875,877],"[dispatch, transcriptId]",[2048,2050],"[words]",[3707,3709],[1291,1293],"[dispatch, id]",[773,775],[866,868],[698,700],[2673,2673],", [keepWithTime, playing, clickedTime, currentTime, editorMode, setEditorMode]",[3610,3619],"[clickedTime, currentTime, dispatch, playing, podcast]",[463,470],"[props, value]",[605,607],[664,666],[1738,1740],[397,399],[463,470],[1996,1996],", [keepWithTime, playing, clickedTime, currentTime]",[2933,2942],[721,723],[775,777],[1062,1072],"[id, speakers]"]
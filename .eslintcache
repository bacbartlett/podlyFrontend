[{"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js":"1","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js":"2","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js":"3","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js":"4","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js":"5","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js":"6","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js":"7","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js":"8","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js":"9","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js":"10","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js":"11","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js":"12","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js":"13","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js":"14","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js":"15","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js":"16","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js":"17","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js":"18","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js":"19","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js":"20","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js":"21","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js":"22","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js":"23","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js":"24","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js":"25","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js":"26","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js":"27","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js":"28","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js":"29","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js":"30","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js":"31","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js":"32","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js":"33"},{"size":346,"mtime":1607545119820,"results":"34","hashOfConfig":"35"},{"size":2802,"mtime":1607755027220,"results":"36","hashOfConfig":"35"},{"size":127,"mtime":1607048726560,"results":"37","hashOfConfig":"35"},{"size":2976,"mtime":1607538212620,"results":"38","hashOfConfig":"35"},{"size":153,"mtime":1607049405560,"results":"39","hashOfConfig":"35"},{"size":156,"mtime":1607049772990,"results":"40","hashOfConfig":"35"},{"size":3757,"mtime":1607538684270,"results":"41","hashOfConfig":"35"},{"size":282,"mtime":1607722197336,"results":"42","hashOfConfig":"35"},{"size":892,"mtime":1607755030360,"results":"43","hashOfConfig":"35"},{"size":4680,"mtime":1607802725710,"results":"44","hashOfConfig":"35"},{"size":2825,"mtime":1607803293280,"results":"45","hashOfConfig":"35"},{"size":3271,"mtime":1607795768230,"results":"46","hashOfConfig":"35"},{"size":732,"mtime":1607755022590,"results":"47","hashOfConfig":"35"},{"size":1521,"mtime":1607657690370,"results":"48","hashOfConfig":"35"},{"size":5129,"mtime":1607755006200,"results":"49","hashOfConfig":"35"},{"size":833,"mtime":1607752402120,"results":"50","hashOfConfig":"35"},{"size":2641,"mtime":1607754035720,"results":"51","hashOfConfig":"35"},{"size":46,"mtime":1607462916677,"results":"52","hashOfConfig":"35"},{"size":180,"mtime":1607532595660,"results":"53","hashOfConfig":"35"},{"size":182,"mtime":1607532579230,"results":"54","hashOfConfig":"35"},{"size":189,"mtime":1607532617240,"results":"55","hashOfConfig":"35"},{"size":1718,"mtime":1607656782210,"results":"56","hashOfConfig":"35"},{"size":1706,"mtime":1607656881900,"results":"57","hashOfConfig":"35"},{"size":428,"mtime":1607646956930,"results":"58","hashOfConfig":"35"},{"size":1356,"mtime":1607722961920,"results":"59","hashOfConfig":"35"},{"size":593,"mtime":1607754244130,"results":"60","hashOfConfig":"35"},{"size":805,"mtime":1607795621960,"results":"61","hashOfConfig":"35"},{"size":1028,"mtime":1607743869200,"results":"62","hashOfConfig":"35"},{"size":2795,"mtime":1607795548880,"results":"63","hashOfConfig":"35"},{"size":734,"mtime":1607727232300,"results":"64","hashOfConfig":"35"},{"size":1639,"mtime":1607729598050,"results":"65","hashOfConfig":"35"},{"size":600,"mtime":1607727235330,"results":"66","hashOfConfig":"35"},{"size":1396,"mtime":1607798758910,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"hnf33b",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"70"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/index.js",[],["150","151"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/App.js",["152"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./Homepage/Homepage\"\nimport Login from \"./Login/Login\"\nimport Signup from \"./Signup/Signup\"\nimport PodcasterHomepage from \"./Podcasters/Homepage/Homepage\"\nimport TranscriberHomepage from \"./Transcribers/Homepage/Homepage\"\nimport ResearcherHomepage from \"./Researcher/Homepage/Homepage\"\nimport EditorWrapper from \"./Editor/EditorWrapper\"\nimport PodcastDisplayWrapper from \"./Podcasters/PodcastDisplay/PodcastDisplayWrapper\"\nimport { useDispatch } from 'react-redux';\nimport PodcasterNav from \"./NavBar/PodcasterNav/NavBar\"\nimport TranscriberNav from \"./NavBar/TranscriberNav/NavBar\"\nimport DefaultNav from \"./NavBar/DefaultNav/NavBar\"\nimport { SET_USER } from './Store/actions';\nimport MyPodcasts from \"./Podcasters/MyPodcasts/MyPodcasts\"\nimport NewTranscriptForm from \"./Podcasters/NewTranscriptionForm/NewTranscriptForm\"\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    //const token = localStorage.getItem(\"token\")\n    const type = localStorage.getItem(\"type\")\n    if(type){\n      const loginUsingToken = async() =>{\n        const res = await fetch(`/${type.toLowerCase()}/token`)\n        const data = await res.json()\n        if(data.msg){\n          return\n        }\n        const action = {\n          type: SET_USER,\n          payload: {...data, type}\n        }\n        dispatch(action)\n      }\n\n\n      loginUsingToken()\n    }\n  },[])\n  return (\n    <Router>\n      <Switch>\n        <Route exact={false} path=\"/podcaster\">\n          <PodcasterNav />\n        </Route>\n        <Route exact={false} path=\"/transcriber\">\n          <TranscriberNav />\n        </Route>\n        <Route path=\"/\" exact={false}>\n          <DefaultNav />\n        </Route>\n      </Switch>     \n      <Route exact={true} path=\"/\">\n        <Homepage />\n      </Route>\n      <Route exact={true} path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact={true} path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route exact={true} path=\"/podcaster\">\n        <PodcasterHomepage />\n      </Route>\n      <Route exact={true} path=\"/podcaster/myPodcasts\">\n        <MyPodcasts />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id\">\n        <PodcastDisplayWrapper />\n      </Route>\n      <Route exact={true} path=\"/podcaster/podcasts/:id/newtranscript\">\n        <NewTranscriptForm />\n      </Route>\n      <Route exact={true} path=\"/transcriber\">\n        <TranscriberHomepage />\n      </Route>\n      <Route exact={true} path=\"/researcher\">\n        <ResearcherHomepage />\n      </Route>\n      <Route exact={true} path=\"/transcriber/transcribe/:transcriptId\">\n        <EditorWrapper />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Login/Login.js",["153","154","155","156","157","158"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, setUser} from \"../Store/actions\"\n\nconst Login = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherLogin, setResearcherLogin] = useState(false)\n    const [transcriberLogin, setTranscriberLogin] = useState(false)\n    const [podcasterLogin, setPodcasterLogin] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherLogin(false)\n        setTranscriberLogin(false)\n        setPodcasterLogin(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterLogin(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberLogin(true)\n        } else{\n            setResearcherLogin(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n\n    const submitDetails = e =>{\n        const userDetails = setUser(option, email, password)\n        userDetails.then(val => dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Login</h1>\n            <label>Login as:</label>\n            <select value={option} onChange={handleChange}>\n                <option value=\"Podcaster\">Podcaster</option>\n                <option value=\"Transcriber\">Transcriber</option>\n                <option value=\"Researcher\">Researcher</option>\n            </select>\n            <div className=\"error\">\n                {error}\n            </div>\n            <div className=\"loginForm\">\n                <label>Email</label>\n                <input type=\"email\" value={email} onChange={handleEmail}></input>\n                <label>Password</label>\n                <input type=\"password\" value={password} onChange={handlePassword}></input>\n            </div>\n            <button className=\"submitButton\" onClick={submitDetails}>Login</button>\n        </div>\n        \n    )\n}\n\nexport default Login","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Researcher/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Signup/Signup.js",["159","160","161"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {clearError, signupUser} from \"../Store/actions\"\n\nconst Signup = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const error = useSelector(state=>state.error)\n    const user = useSelector(state=>state.user)\n\n    const [option, setOption] = useState(\"Podcaster\")\n    const [researcherSignup, setResearcherSignup] = useState(false)\n    const [transcriberSignup, setTranscriberSignup] = useState(false)\n    const [podcasterSignup, setPodcasterSignup] = useState(true)\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    //const [userState, setUserState] = useState(user)\n    const [stateError, setStateError] = useState(error)\n    \n\n    const ifLoggedInThenRedirect = () =>{\n        if(user.type){\n            history.push(`/${user.type.toLowerCase()}`)\n        }\n    }\n\n    useEffect(()=>{\n        ifLoggedInThenRedirect()\n    }, [user])\n\n    useEffect(()=>{\n        setStateError(error)\n    }, [error])\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearError())\n        }\n    }, [])\n\n    const setAllToFalse = () =>{\n        setResearcherSignup(false)\n        setTranscriberSignup(false)\n        setPodcasterSignup(false)\n    }\n\n    const handleChange = (e) =>{\n        setAllToFalse()\n        const selection = e.target.value\n        if(selection === \"Podcaster\"){\n            setOption(\"Podcaster\")\n            setPodcasterSignup(true)\n        } else if(selection === \"Transcriber\"){\n            setOption(\"Transcriber\")\n            setTranscriberSignup(true)\n        } else{\n            setResearcherSignup(true)\n            setOption(\"Researcher\")\n        }\n    }\n\n    const handlePassword = e => setPassword(e.target.value)\n    const handleEmail = e => setEmail(e.target.value)\n    const handleFirstName = e => setFirstName(e.target.value)\n    const handleLastName = e => setLastName(e.target.value)\n\n    const submitDetails = e =>{\n        let userDetails\n        if(researcherSignup){\n            userDetails = signupUser(option, email, password)\n        } else {\n            userDetails = signupUser(option, email, password, firstName, lastName)\n        }\n        userDetails.then(val => dispatch(val))\n    }\n\n    return(\n        <div className=\"loginPage\">\n            <h1>Signup</h1>\n            <label>Login as:</label>\n            <select value={option} onChange={handleChange}>\n                <option value=\"Podcaster\">Podcaster</option>\n                <option value=\"Transcriber\">Transcriber</option>\n                <option value=\"Researcher\">Researcher</option>\n            </select>\n            <div className=\"error\">\n                {error}\n            </div>\n            <div className=\"loginForm\">\n                <label>Email</label>\n                <input type=\"email\" value={email} onChange={handleEmail}></input>\n                <label>Password</label>\n                <input type=\"password\" value={password} onChange={handlePassword}></input>\n                {podcasterSignup || transcriberSignup ? \n                <>\n                <label>First Name</label>\n                <input type=\"text\" value={firstName} onChange={handleFirstName}></input>\n                <label>Last Name</label>\n                <input type=\"text\" value={lastName} onChange={handleLastName}></input>\n                </> : null\n            }\n            </div>\n            <button className=\"submitButton\" onClick={submitDetails}>Login</button>\n        </div>\n        \n    )\n}\n\nexport default Signup","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/Homepage.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/EditorWrapper.js",["162"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Editor from \"./Editor\"\nimport {getEditorData, clearEditorData} from \"../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst EditorWrapper = (props) =>{\n    const dispatch = useDispatch()\n    const {transcriptId} = useParams()\n    const editorData = useSelector(state=>state.editorData)\n\n    const [stateEditorData, setStateEditorData] = useState(editorData)\n\n    useEffect(()=>{\n        const prom = getEditorData(transcriptId)\n        prom.then(val=>{dispatch(val)})\n        return()=>{dispatch(clearEditorData())}\n    },[])\n\n    useEffect(()=>{\n        setStateEditorData(editorData)\n    }, [editorData])\n\n    if(!stateEditorData.data){\n        return <p>Loading</p>\n    } \n    return(\n        <Editor data={stateEditorData} />\n    )\n}\n\n\nexport default EditorWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Editor.js",["163","164","165","166","167","168","169","170"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/SpeakerSection.js",["171","172","173"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/Text/Text.js",["174"],"import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport {updateWordArr} from \"../../Store/actions\"\n\n\nconst Text = (props) =>{\n    const dispatch = useDispatch()\n    const {text, specialKey} = props\n    const editorMode = props.editorMode === 2\n    \n    \n    const reinsertMetaData = (e) =>{\n        const spans = e.target.childNodes\n        const results = []\n        for(let i = 0; i < spans.length; i++){\n            const inner = spans[i].innerHTML.split(\"\")\n            let counter = 0;\n            for(let j = 0; j < inner.length; j++){\n                if(inner[j] === \" \"){\n                    counter++\n                }\n                if(counter === 2){\n                    const editted = {\n                        index: i,\n                        words: inner.join(\"\"),\n                        node: spans[i]\n                    }\n                    results.push(editted)\n                    break\n                }\n            }\n        }\n        for(let i = 0; i < results.length; i++){\n            const edit = results[i]\n            let startTime\n            if(results[i].index === 0){\n                startTime = spans[1].getAttribute(\"starttime\") - 1\n            } else{\n                startTime = spans[edit.index - 1].getAttribute(\"endtime\")\n            }\n            let endTime\n            if(results[i].index === spans.length -1){\n                endTime = spans[spans.length - 2].getAttribute(\"endtime\") + 1\n            } else{\n                endTime = spans[edit.index + 1].getAttribute(\"starttime\")\n            }\n            const wordsArr = edit.words.split(\" \")\n            const timePerWord = (endTime - startTime) / wordsArr.length\n            for(let i = 0; i < wordsArr.length; i++){\n                const node = document.createElement(\"span\")\n                node.innerHTML = wordsArr[i] + \" \"\n                //gets rid of dangling space\n                if(i === wordsArr.length - 1){\n                    node.innerHTML = wordsArr[i]\n                }\n                node.setAttribute(\"starttime\", startTime + (timePerWord * i))\n                node.setAttribute(\"endtime\", startTime + (timePerWord * (i + 1)))\n                node.classList.add(\"Editor__Word\")\n                e.target.insertBefore(node, edit.node)\n            }\n            e.target.removeChild(edit.node)\n            \n            \n        }\n\n        dispatch(updateWordArr())\n    }\n\n    //tell the editor to get the word arrs\n    useEffect(()=>{\n        dispatch(updateWordArr())\n    }, [])\n\n    \n\n    return(\n        <>\n        {editorMode ? <div onBlur={reinsertMetaData} className={specialKey} contentEditable={true}>\n                {text.map((el, i) =>{\n                    return <span className=\"Editor__Word\"  starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n                })}\n        </div> : <div>\n            {text.map((el, i) =>{\n                return <span className=\"Editor__Word\" starttime={el.startTime} sectionindex={specialKey} wordindex={i} endtime={el.endTime} key={specialKey.toString() + i.toString()}>{el.formatted + \" \"}</span>\n            })}\n    </div>}\n    </> \n    )\n}\n\nexport default Text","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodcastDisplayWrapper.js",["175"],"import React, { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport PodcastDisplay from \"./PodCastDisplay\"\nimport {getPodcast, clearPodcast} from \"../../Store/actions\"\nimport { useParams } from \"react-router\"\n\nconst PodcastDisplayWrapper = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const podcastInfo = useSelector(state=>state.podcastDisplay)\n\n    useEffect(()=>{\n        const asyncFunc = async() => await getPodcast(id)\n        asyncFunc().then(val=>dispatch(val))\n        return ()=>{\n            dispatch(clearPodcast())\n        }\n    }, [])\n\n    return(\n        \n        <PodcastDisplay info={podcastInfo} />\n    )\n}\n\nexport default PodcastDisplayWrapper","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/PodcastDisplay/PodCastDisplay.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/actions.js",["176"],"import { useDispatch } from \"react-redux\"\n\n\nexport const GET_PODCAST = \"GET_PODCAST\"\nexport const CLEAR_PODCAST = \"CLEAR_PODCAST\"\nexport const SET_USER = \"SET_USER\"\nexport const REMOVE_USER = \"REMOVE_USER\"\nexport const SET_ERROR = \"SET_ERROR\"\nexport const CLEAR_ERROR = \"CLEAR_ERROR\"\nexport const SET_MYPODCASTS = \"SET_MYPODCASTS\"\nexport const CLEAR_MYPODCASTS = \"CLEAR_MYPODCASTS\"\nexport const SET_MEDIAURL = \"SET_MEDIAURL\"\nexport const CLEAR_MEDIAURL = \"CLEAR_MEDIAURL\"\nexport const SET_TRANSCRIPTS = \"SET_TRANSCRIPTS\"\nexport const CLEAR_TRANSCRIPTS = \"CLEAR_TRANSCRIPTS\"\nexport const GET_EDITORDATA = \"GET_EDITORDATA\"\nexport const CLEAR_EDITORDATA = \"CLEAR_EDITORDATA\"\nexport const UPDATE_WORDARR = \"UPDATE_WORDARR\"\nexport const UPDATE_AUDIOISLOADED = \"UPDATE_AUDIOISLOADED\"\n\n\n\nexport const getPodcast = async (podcastId) =>{\n    const res = await fetch(\"/podcaster/podcasts/\" + podcastId)\n    const data = await res.json()\n    return{type: GET_PODCAST, payload: data}\n    \n}\n\nexport const clearPodcast = () =>{\n    return{\n        type: CLEAR_PODCAST\n    }\n}\n\nexport const setError = (err) =>{\n    return {\n        type: SET_ERROR,\n        payload: err\n    }\n}\n\nexport const clearError = () =>{\n    return{\n        type: CLEAR_ERROR\n    }\n}\n\nexport const setUser = async (type, email, password) =>{\n    const res = await fetch(`/${type.toLowerCase()}/login`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    //localStorage.setItem(\"token\", data.token)\n    document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const signupUser = async (type, email, password, firstName, lastName) =>{\n    const res = await fetch(`/${type.toLowerCase()}/signup`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({email, password, firstName, lastName})\n    })\n    const data = await res.json()\n    if(data.msg){\n        return setError(data.msg)\n    }\n    // localStorage.setItem(\"token\", data.token)\n    document.cookie = `loginToken=${data.token}`;\n    localStorage.setItem(\"type\", type)\n    return {\n        type: SET_USER,\n        payload: {...data, type}\n    }\n}\n\nexport const removeUser = () =>{\n    return {\n        type: REMOVE_USER,\n        payload: {}\n    }\n}\n\nexport const setMyPodcasts = async ()=>{\n    const res = await fetch(`/podcaster/podcasts/mypodcasts`)\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n\n}\n\nexport const clearMyPodcasts = () =>{\n    return {\n        type: CLEAR_MYPODCASTS\n    }\n}\n\nexport const setNewPodcast = async (rssFeedUrl)=>{\n    const res = await fetch(\"/podcaster/podcasts/new\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({rssFeedUrl})\n    })\n    const data = await res.json()\n    return {\n        type: SET_MYPODCASTS,\n        payload: data\n    }\n}\n\nexport const setMediaUrl = (mediaurl) =>{\n    return{\n        type: SET_MEDIAURL,\n        payload: mediaurl\n    }\n}\n\nexport const clearMediaUrl = () =>{\n    return{\n        type: CLEAR_MEDIAURL\n    }\n}\n\nexport const createNewTranscriptJob = async (mediaLink, podcastId, speakerNames) =>{\n    const res = await fetch(`/podcaster/podcasts/${podcastId}/newJob`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            mediaUrl: mediaLink,\n            speakerNames\n        })\n    })\n    const data = await res.json();\n    if(!data.msg === \"starting\"){\n        return{\n            type: SET_ERROR,\n            payload: \"There was a problem processing this transcription. Please try again later\"\n        }\n    }\n    // const res2 = await fetch(`/podcaster/podcast/${podcastId}`)\n    // const data2 = res2.json()\n    // return{type: GET_PODCAST, payload: data2}\n    return clearMediaUrl()\n    \n}\n\nexport const getTranscripts = async() =>{\n    const res = await fetch(\"/transcriber/openprojects\")\n    const data = await res.json()\n    return {\n        type: SET_TRANSCRIPTS,\n        payload: data\n    }\n}\n\nexport const clearTranscripts = () =>{\n    return{\n        type: CLEAR_TRANSCRIPTS\n    }\n}\n\nexport const getEditorData = async (id) =>{\n    const res = await fetch(\"/transcriber/transcription/\" + id)\n    const data = await res.json()\n    if(data.msg){\n        return{\n            type: SET_ERROR,\n            payload: data.msg\n        }\n    }\n    return {\n        type: GET_EDITORDATA,\n        payload: data}\n}\n\nexport const clearEditorData = () =>{\n    return{\n        type: CLEAR_EDITORDATA,\n    }\n}\n\nexport const updateWordArr = () =>{\n    return{\n        type: UPDATE_WORDARR\n    }\n}\n\nexport const updateAudioIsLoaded = (val) =>{\n    return{\n        type: UPDATE_AUDIOISLOADED,\n        payload: val\n    }\n}","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/store.js",["177"],"import {createStore, applyMiddleware, combineReducers, compose} from \"redux\"\n\nimport {podcastDisplayReducer, errorReducer, userReducer, myPodcastsReducer, mediaUrlReducer, transcriptsReducer, editorReducer, updateWordArrReducer,\n    updateAudioIsLoadedReducer} from \"./reducers\"\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer = combineReducers({podcastDisplay: podcastDisplayReducer, user: userReducer, error: errorReducer, myPodcasts: myPodcastsReducer, mediaUrl: mediaUrlReducer,\n    transcripts: transcriptsReducer, editorData: editorReducer, updateWordArr: updateWordArrReducer, updateAudioIsLoaded: updateAudioIsLoadedReducer})\n\nconst configureStore = initialState =>{\n    return createStore(reducer, initialState, composeEnhancers())\n}\n\nexport const store = configureStore({})\n","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Store/reducers.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Globals.js",[],["178","179"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/PodcasterNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/TranscriberNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/NavBar/DefaultNav/NavBar.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/MyPodcasts/MyPodcasts.js",["180"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport {setMyPodcasts, clearMyPodcasts, setNewPodcast} from \"../../Store/actions\"\n\n\nconst MyPodcasts = (props) =>{\n    const history = useHistory()\n    const myPodcasts = useSelector(state=>state.myPodcasts)\n    const dispatch = useDispatch()\n\n    const [myPodcastsState, setMyPodcastsState] = useState(myPodcasts || [])\n    const [newRSSFeed, setNewRSSFeed] = useState(\"\")\n\n    useEffect(()=>{\n        const pods = setMyPodcasts()\n        pods.then(val=> dispatch(val))\n        return ()=>{\n            dispatch(clearMyPodcasts())\n        }\n    },[])\n\n    useEffect(()=>{\n        setMyPodcastsState(myPodcasts)\n    },[myPodcasts])\n\n    const handleRSSFeedChange = (e) => setNewRSSFeed(e.target.value)\n\n    const addFeed = e =>{\n        setNewRSSFeed(\"\")\n        const prom = setNewPodcast(newRSSFeed)\n        prom.then(val => dispatch(val))\n    }\n\n    const generateLinkFunction = (id) =>{\n        return () =>{\n            history.push(\"/podcaster/podcasts/\" + id)\n        }\n    }\n\n    return(\n        <>\n        <div className=\"myPodcasts\">\n            {myPodcastsState.map((el, i) =>{\n                return(\n                    <div onClick={generateLinkFunction(el.id)} className=\"podcast\" key={i}>\n                        <h3>{el.name}</h3>\n                    </div>\n                )\n            })}\n        </div>\n        <br/>\n        <br/>\n        <label>Add New RSS Feed:</label>\n        <input value={newRSSFeed} onChange={handleRSSFeedChange}></input>\n        <button onClick={addFeed}>Add Feed</button>\n\n\n        </>\n    )\n}\n\nexport default MyPodcasts","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/NewTranscriptForm.js",["181"],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SpeakerBox from \"./SpeakerBox\"\nimport {createNewTranscriptJob} from \"../../Store/actions\"\nimport { useHistory, useParams } from \"react-router\";\nimport {clearMediaUrl} from \"../../Store/actions\"\n\nconst NewTranscriptForm = (props) =>{\n    const {id} = useParams()\n    const dispatch = useDispatch()\n    const mediaUrl = useSelector(state=>state.mediaUrl)\n    const history = useHistory()\n    const [speakerSections, setSpeakerSections] = useState([\"item\"])\n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(()=>{\n        return ()=>{\n            dispatch(clearMediaUrl())\n        }\n    },[])\n    \n    const addSpeaker = () =>{\n        const temp = [...speakerSections]\n        temp.push(\"item\")\n        setSpeakerSections(temp)\n    }\n\n    const submit = () =>{\n        setLoading(true)\n        const getAllBoxes = document.querySelectorAll(\".speakerInputBox\")\n        const speakers = []\n        getAllBoxes.forEach((el)=>{\n            speakers.push(el.value)\n        })\n        const prom = createNewTranscriptJob(mediaUrl, id, speakers)\n        prom.then(val=> {\n            dispatch(val);\n            history.goBack()\n        })\n    }\n\n\n\n    return(\n        <div className=\"speakerNameForm\">\n            {speakerSections.map((el, i)=>{\n                return(\n                    <SpeakerBox index={i} />\n                )\n            })}\n            <br/>\n            <button onClick={addSpeaker}>Add Speaker</button>\n            {loading ? <button>Pending</button> : <button onClick={submit}>Submit</button>}\n        </div>\n        \n    )\n}\n\nexport default NewTranscriptForm","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Podcasters/NewTranscriptionForm/SpeakerBox.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Transcribers/Homepage/TranscriptDisplay/TranscriptDisplay.js",["182"],"import React, { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport {getTranscripts, clearTranscripts} from \"../../../Store/actions\"\n\nconst TranscriptDisplay = (props) =>{\n    const dispatch = useDispatch()\n    const history = useHistory()\n    \n    const transcripts = useSelector(state=>state.transcripts)\n\n    const [stateTranscripts, setStateTranscripts] = useState(transcripts)\n\n    useEffect(()=>{\n        const prom = getTranscripts()\n        prom.then(val=>dispatch(val))\n\n        return ()=>dispatch(clearTranscripts())\n    },[])\n\n    useEffect(()=>{\n        setStateTranscripts(transcripts)\n    }, [transcripts])\n\n    const createClickFunction = (id) => {\n        return ()=>{\n            history.push(\"/transcriber/transcribe/\" + id)\n        }\n    }\n\n    if(!stateTranscripts.length){\n        return <p>Loading</p>\n    }else{\n        return(\n            <div className=\"TranscriptPage\">\n                {stateTranscripts.map((el, i)=>{\n                    return(<div className=\"neededTranscript\" key={i} onClick={createClickFunction(el.id)}>\n                        <h4>{el.title}</h4>\n                        <p>From: {el.podcastName}</p>\n                    </div>)\n                })}\n            </div>\n        )\n    }\n}\n\nexport default TranscriptDisplay","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayerWrapper.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/AudioPlayer.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Controls.js",["183","184"],"import React from \"react\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\nimport Replay10Icon from \"@material-ui/icons/Replay10\"\nimport Replay30Icon from \"@material-ui/icons/Replay30\"\nimport PauseIcon from '@material-ui/icons/Pause';\nimport Forward10Icon from '@material-ui/icons/Forward10';\nimport Forward30Icon from '@material-ui/icons/Forward30';\n\n\nconst Controls = (props) =>{\n\n    const toggle = (e) =>{\n        props.setPlaying(!props.playing)\n    }\n\n    const handleGoToNextSong = () => {\n        console.log(\"Needs to be changed in controls\")\n    }\n\n    const handleGoToPreviousSong = () => {\n        console.log(\"Needs to be changed in controls\")\n        \n    }\n\n    return (\n        <div className=\"AudioPlayer__Controls AudioPlayer__Section\">\n            <Replay30Icon />\n            <Replay10Icon />\n            {props.playing ? <PauseIcon onClick={toggle} /> : <PlayArrowIcon onClick={toggle} />}\n            <Forward10Icon />\n            <Forward30Icon />\n        </div>\n    )\n}\n\nexport default Controls;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/useAudioPlayer.js",["185","186"],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Volume.js",["187"],"import React, { useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\n\nconst Volume = (props) =>{\n    const [value, setValue] = React.useState(50);\n    \n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    useEffect(()=>{\n        props.makeSetAudioVolume(document.getElementById(\"audio\"))(value)\n    },[value])\n    \n    return (\n        <div className=\"AudioPlayer__VolumeDiv\">\n            <VolumeDown />\n            <Slider value={value} onChange={handleChange} aria-labelledby=\"Volume slider\" />\n            <VolumeUp />\n        </div>\n        )\n}\n\nexport default Volume;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Bar.js",["188"],"import React from \"react\";\nimport Length from \"./Length\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\n\nconst Bar = (props) =>{\n    const setClickedTime = (e) =>{\n        const bar = document.querySelector(\".AudioPlayer__TimeSlider\").getBoundingClientRect();\n        const percent = ((e.pageX - bar.left) / bar.width);\n        \n        props.setClickedTime(Math.floor(props.length * percent))\n    }\n\n\n    const PrettoSlider = withStyles({\n        root: {\n          color: '#1cb3ff',\n          height: 8,\n        },\n        thumb: {\n          height: 17,\n          width: 17,\n          backgroundColor: '#1cb3ff',\n          border: '2px solid currentColor',\n          marginTop: -4,\n          marginLeft: -12,\n          '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n          },\n        },\n        active: {},\n        valueLabel: {\n          left: 'calc(-50% + 4px)',\n        },\n        track: {\n          height: 8,\n          borderRadius: 4,\n        },\n        rail: {\n          height: 8,\n          borderRadius: 4,\n        },\n      })(Slider);\n    return (\n        <div className=\"AudioPlayer__Section AudioPlayer__LengthAndBar\">\n            <div className=\"AudioPlayer__LengthContainer\">\n                <Length length={props.length} currentTime={props.currentTime} />\n            </div>\n            <div onClick={setClickedTime} className=\"AudioPlayer__BarContainer\">\n                <PrettoSlider className={\"AudioPlayer__TimeSlider\"}  value={(props.currentTime/props.length) *100} />\n            </div>\n    </div>\n    )\n}\n\nexport default Bar;","/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/AudioPlayer/Length.js",[],"/home/bbartlett/AppAcademy/finalProject/frontendpodly/src/Editor/SpeakerSection/ContextBoxSpeaker.js",[],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":41,"column":5,"nodeType":"195","endLine":41,"endColumn":7,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":14,"column":12,"nodeType":"199","messageId":"200","endLine":14,"endColumn":27},{"ruleId":"197","severity":1,"message":"201","line":15,"column":12,"nodeType":"199","messageId":"200","endLine":15,"endColumn":28},{"ruleId":"197","severity":1,"message":"202","line":16,"column":12,"nodeType":"199","messageId":"200","endLine":16,"endColumn":26},{"ruleId":"197","severity":1,"message":"203","line":20,"column":12,"nodeType":"199","messageId":"200","endLine":20,"endColumn":22},{"ruleId":"193","severity":1,"message":"204","line":31,"column":8,"nodeType":"195","endLine":31,"endColumn":14,"suggestions":"205"},{"ruleId":"193","severity":1,"message":"194","line":41,"column":8,"nodeType":"195","endLine":41,"endColumn":10,"suggestions":"206"},{"ruleId":"197","severity":1,"message":"203","line":22,"column":12,"nodeType":"199","messageId":"200","endLine":22,"endColumn":22},{"ruleId":"193","severity":1,"message":"204","line":33,"column":8,"nodeType":"195","endLine":33,"endColumn":14,"suggestions":"207"},{"ruleId":"193","severity":1,"message":"194","line":43,"column":8,"nodeType":"195","endLine":43,"endColumn":10,"suggestions":"208"},{"ruleId":"193","severity":1,"message":"209","line":18,"column":7,"nodeType":"195","endLine":18,"endColumn":9,"suggestions":"210"},{"ruleId":"197","severity":1,"message":"211","line":6,"column":9,"nodeType":"199","messageId":"200","endLine":6,"endColumn":28},{"ruleId":"197","severity":1,"message":"212","line":9,"column":11,"nodeType":"199","messageId":"200","endLine":9,"endColumn":19},{"ruleId":"197","severity":1,"message":"213","line":13,"column":11,"nodeType":"199","messageId":"200","endLine":13,"endColumn":35},{"ruleId":"197","severity":1,"message":"214","line":17,"column":12,"nodeType":"199","messageId":"200","endLine":17,"endColumn":30},{"ruleId":"197","severity":1,"message":"215","line":17,"column":32,"nodeType":"199","messageId":"200","endLine":17,"endColumn":52},{"ruleId":"197","severity":1,"message":"216","line":18,"column":12,"nodeType":"199","messageId":"200","endLine":18,"endColumn":20},{"ruleId":"197","severity":1,"message":"217","line":19,"column":24,"nodeType":"199","messageId":"200","endLine":19,"endColumn":37},{"ruleId":"193","severity":1,"message":"218","line":38,"column":8,"nodeType":"195","endLine":38,"endColumn":10,"suggestions":"219"},{"ruleId":"197","severity":1,"message":"220","line":1,"column":28,"nodeType":"199","messageId":"200","endLine":1,"endColumn":36},{"ruleId":"197","severity":1,"message":"221","line":2,"column":8,"nodeType":"199","messageId":"200","endLine":2,"endColumn":20},{"ruleId":"193","severity":1,"message":"222","line":61,"column":8,"nodeType":"195","endLine":61,"endColumn":10,"suggestions":"223"},{"ruleId":"193","severity":1,"message":"194","line":72,"column":8,"nodeType":"195","endLine":72,"endColumn":10,"suggestions":"224"},{"ruleId":"193","severity":1,"message":"225","line":18,"column":8,"nodeType":"195","endLine":18,"endColumn":10,"suggestions":"226"},{"ruleId":"197","severity":1,"message":"227","line":1,"column":10,"nodeType":"199","messageId":"200","endLine":1,"endColumn":21},{"ruleId":"197","severity":1,"message":"228","line":1,"column":22,"nodeType":"199","messageId":"200","endLine":1,"endColumn":37},{"ruleId":"189","replacedBy":"229"},{"ruleId":"191","replacedBy":"230"},{"ruleId":"193","severity":1,"message":"194","line":21,"column":7,"nodeType":"195","endLine":21,"endColumn":9,"suggestions":"231"},{"ruleId":"193","severity":1,"message":"194","line":21,"column":7,"nodeType":"195","endLine":21,"endColumn":9,"suggestions":"232"},{"ruleId":"193","severity":1,"message":"194","line":19,"column":7,"nodeType":"195","endLine":19,"endColumn":9,"suggestions":"233"},{"ruleId":"197","severity":1,"message":"234","line":16,"column":11,"nodeType":"199","messageId":"200","endLine":16,"endColumn":29},{"ruleId":"197","severity":1,"message":"235","line":20,"column":11,"nodeType":"199","messageId":"200","endLine":20,"endColumn":33},{"ruleId":"193","severity":1,"message":"236","line":18,"column":5,"nodeType":"199","endLine":18,"endColumn":14,"suggestions":"237"},{"ruleId":"193","severity":1,"message":"238","line":90,"column":8,"nodeType":"195","endLine":90,"endColumn":17,"suggestions":"239"},{"ruleId":"193","severity":1,"message":"240","line":14,"column":7,"nodeType":"195","endLine":14,"endColumn":14,"suggestions":"241"},{"ruleId":"197","severity":1,"message":"242","line":3,"column":22,"nodeType":"199","messageId":"200","endLine":3,"endColumn":32},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["245"],"no-unused-vars","'researcherLogin' is assigned a value but never used.","Identifier","unusedVar","'transcriberLogin' is assigned a value but never used.","'podcasterLogin' is assigned a value but never used.","'stateError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ifLoggedInThenRedirect'. Either include it or remove the dependency array.",["246"],["247"],["248"],["249"],"React Hook useEffect has missing dependencies: 'dispatch' and 'transcriptId'. Either include them or remove the dependency array.",["250"],"'updateAudioIsLoaded' is defined but never used.","'dispatch' is assigned a value but never used.","'updateAudioIsLoadedSLice' is assigned a value but never used.","'currentlySelection' is assigned a value but never used.","'setCurrentlySelected' is assigned a value but never used.","'allWords' is assigned a value but never used.","'setEditorMode' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'words'. Either include it or remove the dependency array.",["251"],"'useState' is defined but never used.","'ListDividers' is defined but never used.","React Hook useEffect has missing dependencies: 'createNameSwitcherFunction', 'number', 'props.speakerList', and 'sections'. Either include them or remove the dependency array.",["252"],["253"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["254"],"'useDispatch' is defined but never used.","'applyMiddleware' is defined but never used.",["243"],["244"],["255"],["256"],["257"],"'handleGoToNextSong' is assigned a value but never used.","'handleGoToPreviousSong' is assigned a value but never used.","React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [keepWithTime, playing, clickedTime, currentTime] as a second argument to the useEffect Hook.",["258"],"React Hook useEffect has missing dependencies: 'clickedTime', 'currentTime', 'dispatch', and 'playing'. Either include them or remove the dependency array.",["259"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["260"],"'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"261","fix":"265"},{"desc":"263","fix":"266"},{"desc":"261","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"261","fix":"274"},{"desc":"275","fix":"276"},{"desc":"261","fix":"277"},{"desc":"261","fix":"278"},{"desc":"261","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [dispatch]",{"range":"286","text":"287"},"Update the dependencies array to be: [ifLoggedInThenRedirect, user]",{"range":"288","text":"289"},{"range":"290","text":"287"},{"range":"291","text":"289"},{"range":"292","text":"287"},"Update the dependencies array to be: [dispatch, transcriptId]",{"range":"293","text":"294"},"Update the dependencies array to be: [words]",{"range":"295","text":"296"},"Update the dependencies array to be: [createNameSwitcherFunction, number, props.speakerList, sections]",{"range":"297","text":"298"},{"range":"299","text":"287"},"Update the dependencies array to be: [dispatch, id]",{"range":"300","text":"301"},{"range":"302","text":"287"},{"range":"303","text":"287"},{"range":"304","text":"287"},"Add dependencies array: [keepWithTime, playing, clickedTime, currentTime]",{"range":"305","text":"306"},"Update the dependencies array to be: [clickedTime, currentTime, dispatch, playing, podcast]",{"range":"307","text":"308"},"Update the dependencies array to be: [props, value]",{"range":"309","text":"310"},[1498,1500],"[dispatch]",[1054,1060],"[ifLoggedInThenRedirect, user]",[1222,1224],[1164,1170],[1332,1334],[646,648],"[dispatch, transcriptId]",[1452,1454],"[words]",[2622,2624],"[createNameSwitcherFunction, number, props.speakerList, sections]",[2530,2532],[615,617],"[dispatch, id]",[699,701],[715,717],[621,623],[1667,1667],", [keepWithTime, playing, clickedTime, currentTime]",[2604,2613],"[clickedTime, currentTime, dispatch, playing, podcast]",[463,470],"[props, value]"]